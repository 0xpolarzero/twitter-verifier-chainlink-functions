{"id":"495280801a8fd6e1f296d4203b5f8ef8","_format":"hh-sol-build-info-1","solcVersion":"0.8.7","solcLongVersion":"0.8.7+commit.e28d00a7","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ConfirmedOwnerWithProposal.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"},"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/OwnableInterface.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /**\n   * @notice Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /**\n   * @notice Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership() external override {\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @notice Get the current owner\n   */\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /**\n   * @notice validate, transfer ownership, and emit relevant events\n   */\n  function _transferOwnership(address to) private {\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /**\n   * @notice validate access\n   */\n  function _validateOwnership() internal view {\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /**\n   * @notice Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface OwnableInterface {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"},"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev A library for working with mutable byte buffers in Solidity.\n *\n * Byte buffers are mutable and expandable, and provide a variety of primitives\n * for writing to them. At any time you can fetch a bytes object containing the\n * current contents of the buffer. The bytes object should not be stored between\n * operations, as it may change due to resizing of the buffer.\n */\nlibrary BufferChainlink {\n  /**\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n   *      a capacity. The capacity may be longer than the current value, in\n   *      which case it can be extended without the need to allocate more memory.\n   */\n  struct buffer {\n    bytes buf;\n    uint256 capacity;\n  }\n\n  /**\n   * @dev Initializes a buffer with an initial capacity.\n   * @param buf The buffer to initialize.\n   * @param capacity The number of bytes of space to allocate the buffer.\n   * @return The buffer, for chaining.\n   */\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\n    if (capacity % 32 != 0) {\n      capacity += 32 - (capacity % 32);\n    }\n    // Allocate space for the buffer data\n    buf.capacity = capacity;\n    assembly {\n      let ptr := mload(0x40)\n      mstore(buf, ptr)\n      mstore(ptr, 0)\n      mstore(0x40, add(32, add(ptr, capacity)))\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Initializes a new buffer from an existing bytes object.\n   *      Changes to the buffer may mutate the original value.\n   * @param b The bytes object to initialize the buffer with.\n   * @return A new buffer.\n   */\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\n    buffer memory buf;\n    buf.buf = b;\n    buf.capacity = b.length;\n    return buf;\n  }\n\n  function resize(buffer memory buf, uint256 capacity) private pure {\n    bytes memory oldbuf = buf.buf;\n    init(buf, capacity);\n    append(buf, oldbuf);\n  }\n\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  /**\n   * @dev Sets buffer length to 0.\n   * @param buf The buffer to truncate.\n   * @return The original buffer, for chaining..\n   */\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\n    assembly {\n      let bufptr := mload(buf)\n      mstore(bufptr, 0)\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The start offset to write to.\n   * @param data The data to append.\n   * @param len The number of bytes to copy.\n   * @return The original buffer, for chaining.\n   */\n  function write(\n    buffer memory buf,\n    uint256 off,\n    bytes memory data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    require(len <= data.length);\n\n    if (off + len > buf.capacity) {\n      resize(buf, max(buf.capacity, len + off) * 2);\n    }\n\n    uint256 dest;\n    uint256 src;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Start address = buffer address + offset + sizeof(buffer length)\n      dest := add(add(bufptr, 32), off)\n      // Update buffer length if we're extending it\n      if gt(add(len, off), buflen) {\n        mstore(bufptr, add(len, off))\n      }\n      src := add(data, 32)\n    }\n\n    // Copy word-length chunks while possible\n    for (; len >= 32; len -= 32) {\n      assembly {\n        mstore(dest, mload(src))\n      }\n      dest += 32;\n      src += 32;\n    }\n\n    // Copy remaining bytes\n    unchecked {\n      uint256 mask = (256**(32 - len)) - 1;\n      assembly {\n        let srcpart := and(mload(src), not(mask))\n        let destpart := and(mload(dest), mask)\n        mstore(dest, or(destpart, srcpart))\n      }\n    }\n\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @param len The number of bytes to copy.\n   * @return The original buffer, for chaining.\n   */\n  function append(\n    buffer memory buf,\n    bytes memory data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, len);\n  }\n\n  /**\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, data.length);\n  }\n\n  /**\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write the byte at.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function writeUint8(\n    buffer memory buf,\n    uint256 off,\n    uint8 data\n  ) internal pure returns (buffer memory) {\n    if (off >= buf.capacity) {\n      resize(buf, buf.capacity * 2);\n    }\n\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Address = buffer address + sizeof(buffer length) + off\n      let dest := add(add(bufptr, off), 32)\n      mstore8(dest, data)\n      // Update buffer length if we extended it\n      if eq(off, buflen) {\n        mstore(bufptr, add(buflen, 1))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\n    return writeUint8(buf, buf.buf.length, data);\n  }\n\n  /**\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n   *      exceed the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @param len The number of bytes to write (left-aligned).\n   * @return The original buffer, for chaining.\n   */\n  function write(\n    buffer memory buf,\n    uint256 off,\n    bytes32 data,\n    uint256 len\n  ) private pure returns (buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    unchecked {\n      uint256 mask = (256**len) - 1;\n      // Right-align data\n      data = data >> (8 * (32 - len));\n      assembly {\n        // Memory address of the buffer data\n        let bufptr := mload(buf)\n        // Address = buffer address + sizeof(buffer length) + off + len\n        let dest := add(add(bufptr, off), len)\n        mstore(dest, or(and(mload(dest), not(mask)), data))\n        // Update buffer length if we extended it\n        if gt(add(off, len), mload(bufptr)) {\n          mstore(bufptr, add(off, len))\n        }\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function writeBytes20(\n    buffer memory buf,\n    uint256 off,\n    bytes20 data\n  ) internal pure returns (buffer memory) {\n    return write(buf, off, bytes32(data), 20);\n  }\n\n  /**\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chhaining.\n   */\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, bytes32(data), 20);\n  }\n\n  /**\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, 32);\n  }\n\n  /**\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @param len The number of bytes to write (right-aligned).\n   * @return The original buffer, for chaining.\n   */\n  function writeInt(\n    buffer memory buf,\n    uint256 off,\n    uint256 data,\n    uint256 len\n  ) private pure returns (buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    uint256 mask = (256**len) - 1;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Address = buffer address + off + sizeof(buffer length) + len\n      let dest := add(add(bufptr, off), len)\n      mstore(dest, or(and(mload(dest), not(mask)), data))\n      // Update buffer length if we extended it\n      if gt(add(off, len), mload(bufptr)) {\n        mstore(bufptr, add(off, len))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n   * exceed the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer.\n   */\n  function appendInt(\n    buffer memory buf,\n    uint256 data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    return writeInt(buf, buf.buf.length, data, len);\n  }\n}\n"},"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.19;\n\nimport {BufferChainlink} from \"./BufferChainlink.sol\";\n\nlibrary CBORChainlink {\n  using BufferChainlink for BufferChainlink.buffer;\n\n  uint8 private constant MAJOR_TYPE_INT = 0;\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\n  uint8 private constant MAJOR_TYPE_STRING = 3;\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\n  uint8 private constant MAJOR_TYPE_MAP = 5;\n  uint8 private constant MAJOR_TYPE_TAG = 6;\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\n\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\n    if(value <= 23) {\n      buf.appendUint8(uint8((major << 5) | value));\n    } else if (value <= 0xFF) {\n      buf.appendUint8(uint8((major << 5) | 24));\n      buf.appendInt(value, 1);\n    } else if (value <= 0xFFFF) {\n      buf.appendUint8(uint8((major << 5) | 25));\n      buf.appendInt(value, 2);\n    } else if (value <= 0xFFFFFFFF) {\n      buf.appendUint8(uint8((major << 5) | 26));\n      buf.appendInt(value, 4);\n    } else {\n      buf.appendUint8(uint8((major << 5) | 27));\n      buf.appendInt(value, 8);\n    }\n  }\n\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\n    buf.appendUint8(uint8((major << 5) | 31));\n  }\n\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\n    if(value > 0xFFFFFFFFFFFFFFFF) {\n      encodeBigNum(buf, value);\n    } else {\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\n    }\n  }\n\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\n    if(value < -0x10000000000000000) {\n      encodeSignedBigNum(buf, value);\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\n      encodeBigNum(buf, uint(value));\n    } else if(value >= 0) {\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\n    } else {\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\n    }\n  }\n\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\n    buf.append(value);\n  }\n\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\n    encodeBytes(buf, abi.encode(value));\n  }\n\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\n  }\n\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\n    buf.append(bytes(value));\n  }\n\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n  }\n\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n  }\n\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n  }\n}\n"},"contracts/lib/dev/functions/Functions.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport {CBORChainlink} from \"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\";\nimport {BufferChainlink} from \"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\";\n\n/**\n * @title Library for Chainlink Functions\n */\nlibrary Functions {\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\n\n  using CBORChainlink for BufferChainlink.buffer;\n\n  enum Location {\n    Inline,\n    Remote\n  }\n\n  enum CodeLanguage {\n    JavaScript\n    // In future version we may add other languages\n  }\n\n  struct Request {\n    Location codeLocation;\n    Location secretsLocation;\n    CodeLanguage language;\n    string source; // Source code for Location.Inline or url for Location.Remote\n    bytes secrets; // Encrypted secrets blob for Location.Inline or url for Location.Remote\n    string[] args;\n  }\n\n  error EmptySource();\n  error EmptyUrl();\n  error EmptySecrets();\n  error EmptyArgs();\n\n  /**\n   * @notice Encodes a Request to CBOR encoded bytes\n   * @param self The request to encode\n   * @return CBOR encoded bytes\n   */\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\n    BufferChainlink.buffer memory buf;\n    BufferChainlink.init(buf, DEFAULT_BUFFER_SIZE);\n\n    buf.encodeString(\"codeLocation\");\n    buf.encodeUInt(uint256(self.codeLocation));\n\n    buf.encodeString(\"language\");\n    buf.encodeUInt(uint256(self.language));\n\n    buf.encodeString(\"source\");\n    buf.encodeString(self.source);\n\n    if (self.args.length > 0) {\n      buf.encodeString(\"args\");\n      buf.startArray();\n      for (uint256 i = 0; i < self.args.length; i++) {\n        buf.encodeString(self.args[i]);\n      }\n      buf.endSequence();\n    }\n\n    if (self.secrets.length > 0) {\n      buf.encodeString(\"secretsLocation\");\n      buf.encodeUInt(uint256(self.secretsLocation));\n      buf.encodeString(\"secrets\");\n      buf.encodeBytes(self.secrets);\n    }\n\n    return buf.buf;\n  }\n\n  /**\n   * @notice Initializes a Chainlink Functions Request\n   * @dev Sets the codeLocation and code on the request\n   * @param self The uninitialized request\n   * @param location The user provided source code location\n   * @param language The programming language of the user code\n   * @param source The user provided source code or a url\n   */\n  function initializeRequest(\n    Request memory self,\n    Location location,\n    CodeLanguage language,\n    string memory source\n  ) internal pure {\n    if (bytes(source).length == 0) revert EmptySource();\n\n    self.codeLocation = location;\n    self.language = language;\n    self.source = source;\n  }\n\n  /**\n   * @notice Initializes a Chainlink Functions Request\n   * @dev Simplified version of initializeRequest for PoC\n   * @param self The uninitialized request\n   * @param javaScriptSource The user provided JS code (must not be empty)\n   */\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\n  }\n\n  /**\n   * @notice Adds user encrypted secrets to a Request\n   * @param self The initialized request\n   * @param secrets The user encrypted secrets (must not be empty)\n   */\n  function addInlineSecrets(Request memory self, bytes memory secrets) internal pure {\n    if (secrets.length == 0) revert EmptySecrets();\n\n    self.secretsLocation = Location.Inline;\n    self.secrets = secrets;\n  }\n\n  /**\n   * @notice Adds args for the user run function\n   * @param self The initialized request\n   * @param args The array of args (must not be empty)\n   */\n  function addArgs(Request memory self, string[] memory args) internal pure {\n    if (args.length == 0) revert EmptyArgs();\n\n    self.args = args;\n  }\n}\n"},"contracts/lib/dev/functions/FunctionsClient.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"./Functions.sol\";\nimport \"../interfaces/FunctionsClientInterface.sol\";\nimport \"../interfaces/FunctionsOracleInterface.sol\";\n\n/**\n * @title The Chainlink Functions client contract\n * @notice Contract writers can inherit this contract in order to create Chainlink Functions requests\n */\nabstract contract FunctionsClient is FunctionsClientInterface {\n  FunctionsOracleInterface private s_oracle;\n  mapping(bytes32 => address) private s_pendingRequests;\n\n  event RequestSent(bytes32 indexed id);\n  event RequestFulfilled(bytes32 indexed id);\n\n  error SenderIsNotRegistry();\n  error RequestIsAlreadyPending();\n  error RequestIsNotPending();\n\n  constructor(address oracle) {\n    setOracle(oracle);\n  }\n\n  /**\n   * @inheritdoc FunctionsClientInterface\n   */\n  function getDONPublicKey() external view override returns (bytes memory) {\n    return s_oracle.getDONPublicKey();\n  }\n\n  /**\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\n   * @param req The initialized Functions.Request\n   * @param subscriptionId The subscription ID\n   * @param gasLimit gas limit for the fulfillment callback\n   * @return billedCost Cost in Juels (1e18) of LINK\n   */\n  function estimateCost(\n    Functions.Request memory req,\n    uint64 subscriptionId,\n    uint32 gasLimit,\n    uint256 gasPrice\n  ) public view returns (uint96) {\n    return s_oracle.estimateCost(subscriptionId, Functions.encodeCBOR(req), gasLimit, gasPrice);\n  }\n\n  /**\n   * @notice Sends a Chainlink Functions request to the stored oracle address\n   * @param req The initialized Functions.Request\n   * @param subscriptionId The subscription ID\n   * @param gasLimit gas limit for the fulfillment callback\n   * @return requestId The generated request ID\n   */\n  function sendRequest(\n    Functions.Request memory req,\n    uint64 subscriptionId,\n    uint32 gasLimit,\n    uint256 gasPrice\n  ) internal returns (bytes32) {\n    bytes32 requestId = s_oracle.sendRequest(subscriptionId, Functions.encodeCBOR(req), gasLimit, gasPrice);\n    s_pendingRequests[requestId] = s_oracle.getRegistry();\n    emit RequestSent(requestId);\n    return requestId;\n  }\n\n  /**\n   * @notice User defined function to handle a response\n   * @param requestId The request ID, returned by sendRequest()\n   * @param response Aggregated response from the user code\n   * @param err Aggregated error from the user code or from the execution pipeline\n   * Either response or error parameter will be set, but never both\n   */\n  function fulfillRequest(\n    bytes32 requestId,\n    bytes memory response,\n    bytes memory err\n  ) internal virtual;\n\n  /**\n   * @inheritdoc FunctionsClientInterface\n   */\n  function handleOracleFulfillment(\n    bytes32 requestId,\n    bytes memory response,\n    bytes memory err\n  ) external override recordChainlinkFulfillment(requestId) {\n    fulfillRequest(requestId, response, err);\n  }\n\n  /**\n   * @notice Sets the stored Oracle address\n   * @param oracle The address of Functions Oracle contract\n   */\n  function setOracle(address oracle) internal {\n    s_oracle = FunctionsOracleInterface(oracle);\n  }\n\n  /**\n   * @notice Gets the stored address of the oracle contract\n   * @return The address of the oracle contract\n   */\n  function getChainlinkOracleAddress() internal view returns (address) {\n    return address(s_oracle);\n  }\n\n  /**\n   * @notice Allows for a request which was created on another contract to be fulfilled\n   * on this contract\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\n   * @param requestId The request ID used for the response\n   */\n  function addExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\n    s_pendingRequests[requestId] = oracleAddress;\n  }\n\n  /**\n   * @dev Reverts if the sender is not the oracle that serviced the request.\n   * Emits RequestFulfilled event.\n   * @param requestId The request ID for fulfillment\n   */\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\n    if (msg.sender != s_pendingRequests[requestId]) {\n      revert SenderIsNotRegistry();\n    }\n    delete s_pendingRequests[requestId];\n    emit RequestFulfilled(requestId);\n    _;\n  }\n\n  /**\n   * @dev Reverts if the request is already pending\n   * @param requestId The request ID for fulfillment\n   */\n  modifier notPendingRequest(bytes32 requestId) {\n    if (s_pendingRequests[requestId] != address(0)) {\n      revert RequestIsAlreadyPending();\n    }\n    _;\n  }\n}\n"},"contracts/lib/dev/interfaces/FunctionsBillingRegistryInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\n/**\n * @title Chainlink Functions billing subscription registry interface.\n */\ninterface FunctionsBillingRegistryInterface {\n  struct RequestBilling {\n    // a unique subscription ID allocated by billing system,\n    uint64 subscriptionId;\n    // the client contract that initiated the request to the DON\n    // to use the subscription it must be added as a consumer on the subscription\n    address client;\n    // customer specified gas limit for the fulfillment callback\n    uint32 gasLimit;\n    // the expected gas price used to execute the transaction\n    uint256 gasPrice;\n  }\n\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return uint32 global max for request gas limit\n   * @return address[] list of registered DONs\n   */\n  function getRequestConfig() external view returns (uint32, address[] memory);\n\n  /**\n   * @notice Determine the charged fee that will be paid to the Registry owner\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n   * @param billing The request's billing configuration\n   * @return fee Cost in Juels (1e18) of LINK\n   */\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling memory billing)\n    external\n    view\n    returns (uint96);\n\n  /**\n   * @notice Estimate the total cost to make a request: gas re-imbursement, plus DON fee, plus Registry fee\n   * @param gasLimit Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n   * @param gasPrice The request's billing configuration\n   * @param donFee Fee charged by the DON that is paid to Oracle Node\n   * @param registryFee Fee charged by the DON that is paid to Oracle Node\n   * @return costEstimate Cost in Juels (1e18) of LINK\n   */\n  function estimateCost(\n    uint32 gasLimit,\n    uint256 gasPrice,\n    uint96 donFee,\n    uint96 registryFee\n  ) external view returns (uint96);\n\n  /**\n   * @notice Initiate the billing process for an Functions request\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n   * @param billing Billing configuration for the request\n   * @return requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest.\n   * @dev Only callable by a node that has been approved on the Registry\n   */\n  function startBilling(bytes calldata data, RequestBilling calldata billing) external returns (bytes32);\n\n  /**\n   * @notice Finalize billing process for an Functions request by sending a callback to the Client contract and then charging the subscription\n   * @param requestId identifier for the request that was generated by the Registry in the beginBilling commitment\n   * @param response response data from DON consensus\n   * @param err error from DON consensus\n   * @param transmitter the Oracle who sent the report\n   * @param signers the Oracles who had a part in generating the report\n   * @param signerCount the number of signers on the report\n   * @param reportValidationGas the amount of gas used for the report validation. Cost is split by all fulfillments on the report.\n   * @param initialGas the initial amount of gas that should be used as a baseline to charge the single fulfillment for execution cost\n   * @return success whether the callback was successsful\n   * @dev Only callable by a node that has been approved on the Registry\n   * @dev simulated offchain to determine if sufficient balance is present to fulfill the request\n   */\n  function fulfillAndBill(\n    bytes32 requestId,\n    bytes calldata response,\n    bytes calldata err,\n    address transmitter,\n    address[31] memory signers, // 31 comes from OCR2Abstract.sol's maxNumOracles constant\n    uint8 signerCount,\n    uint256 reportValidationGas,\n    uint256 initialGas\n  ) external returns (bool success);\n\n  /**\n   * @notice Gets subscription owner.\n   * @param subscriptionId - ID of the subscription\n   * @return owner - owner of the subscription.\n   */\n  function getSubscriptionOwner(uint64 subscriptionId) external view returns (address owner);\n}\n"},"contracts/lib/dev/interfaces/FunctionsClientInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\n/**\n * @title Chainlink Functions client interface.\n */\ninterface FunctionsClientInterface {\n  /**\n   * @notice Returns the DON's secp256k1 public key used to encrypt secrets\n   * @dev All Oracles nodes have the corresponding private key\n   * needed to decrypt the secrets encrypted with the public key\n   * @return publicKey DON's public key\n   */\n  function getDONPublicKey() external view returns (bytes memory);\n\n  /**\n   * @notice Chainlink Functions response handler called by the designated transmitter node in an OCR round.\n   * @param requestId The requestId returned by FunctionsClient.sendRequest().\n   * @param response Aggregated response from the user code.\n   * @param err Aggregated error either from the user code or from the execution pipeline.\n   * Either response or error parameter will be set, but never both.\n   */\n  function handleOracleFulfillment(\n    bytes32 requestId,\n    bytes memory response,\n    bytes memory err\n  ) external;\n}\n"},"contracts/lib/dev/interfaces/FunctionsOracleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"./FunctionsBillingRegistryInterface.sol\";\n\n/**\n * @title Chainlink Functions oracle interface.\n */\ninterface FunctionsOracleInterface {\n  /**\n   * @notice Gets the stored billing registry address\n   * @return registryAddress The address of Chainlink Functions billing registry contract\n   */\n  function getRegistry() external view returns (address);\n\n  /**\n   * @notice Sets the stored billing registry address\n   * @param registryAddress The new address of Chainlink Functions billing registry contract\n   */\n  function setRegistry(address registryAddress) external;\n\n  /**\n   * @notice Returns the DON's secp256k1 public key that is used to encrypt secrets\n   * @dev All nodes on the DON have the corresponding private key\n   * needed to decrypt the secrets encrypted with the public key\n   * @return publicKey the DON's public key\n   */\n  function getDONPublicKey() external view returns (bytes memory);\n\n  /**\n   * @notice Sets DON's secp256k1 public key used to encrypt secrets\n   * @dev Used to rotate the key\n   * @param donPublicKey The new public key\n   */\n  function setDONPublicKey(bytes calldata donPublicKey) external;\n\n  /**\n   * @notice Sets a per-node secp256k1 public key used to encrypt secrets for that node\n   * @dev Callable only by contract owner and DON members\n   * @param node node's address\n   * @param publicKey node's public key\n   */\n  function setNodePublicKey(address node, bytes calldata publicKey) external;\n\n  /**\n   * @notice Deletes node's public key\n   * @dev Callable only by contract owner or the node itself\n   * @param node node's address\n   */\n  function deleteNodePublicKey(address node) external;\n\n  /**\n   * @notice Return two arrays of equal size containing DON members' addresses and their corresponding\n   * public keys (or empty byte arrays if per-node key is not defined)\n   */\n  function getAllNodePublicKeys() external view returns (address[] memory, bytes[] memory);\n\n  /**\n   * @notice Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n   * @param billing The request's billing configuration\n   * @return fee Cost in Juels (1e18) of LINK\n   */\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling calldata billing)\n    external\n    view\n    returns (uint96);\n\n  /**\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\n   * @param subscriptionId A unique subscription ID allocated by billing system,\n   * a client can make requests from different contracts referencing the same subscription\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n   * @param gasLimit Gas limit for the fulfillment callback\n   * @return billedCost Cost in Juels (1e18) of LINK\n   */\n  function estimateCost(\n    uint64 subscriptionId,\n    bytes calldata data,\n    uint32 gasLimit,\n    uint256 gasPrice\n  ) external view returns (uint96);\n\n  /**\n   * @notice Sends a request (encoded as data) using the provided subscriptionId\n   * @param subscriptionId A unique subscription ID allocated by billing system,\n   * a client can make requests from different contracts referencing the same subscription\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n   * @param gasLimit Gas limit for the fulfillment callback\n   * @return requestId A unique request identifier (unique per DON)\n   */\n  function sendRequest(\n    uint64 subscriptionId,\n    bytes calldata data,\n    uint32 gasLimit,\n    uint256 gasPrice\n  ) external returns (bytes32);\n}\n"},"contracts/TwitterVerifier.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./lib/dev/functions/FunctionsClient.sol\";\n// import \"@chainlink/contracts/src/v0.8/dev/functions/FunctionsClient.sol\"; // Once published\nimport \"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\";\nimport \"./utils/AddressToString.sol\";\n\n/**\n * @title Functions Copns contract\n * @notice This contract is a demonstration of using Functions.\n * @notice NOT FOR PRODUCTION USE\n */\ncontract TwitterVerifier is FunctionsClient, ConfirmedOwner {\n    using Functions for Functions.Request;\n\n    bytes32 public latestRequestId;\n    bytes public latestResponse;\n    bytes public latestError;\n\n    event OCRResponse(bytes32 indexed requestId, bytes result, bytes err);\n\n    /**\n     * @notice Executes once when a contract is created to initialize state variables\n     *\n     * @param oracle - The FunctionsOracle contract\n     */\n    constructor(\n        address oracle\n    ) FunctionsClient(oracle) ConfirmedOwner(msg.sender) {}\n\n    /**\n     * @notice Send a simple request\n     * @param source JavaScript source code\n     * @param secrets Encrypted secrets payload\n     * @param args List of arguments accessible from within the source code\n     * @param subscriptionId Billing ID\n     */\n    function executeRequest(\n        string calldata source,\n        bytes calldata secrets,\n        string[] calldata args,\n        uint64 subscriptionId,\n        uint32 gasLimit\n    ) public onlyOwner returns (bytes32) {\n        Functions.Request memory req;\n        req.initializeRequest(\n            Functions.Location.Inline,\n            Functions.CodeLanguage.JavaScript,\n            source\n        );\n        if (secrets.length > 0) req.addInlineSecrets(secrets);\n\n        // The following is how we would add some arguments provided in the contract\n        // to the request\n        // In this case, it is not necessary, since the msg.sender will always\n        // be the owner, and not the user\n        // - Turn the sender address into a string\n        // string memory sender = addressToString(msg.sender);\n        // - And add it to the args\n        // string[] memory newArgs = new string[](args.length + 1);\n        // for (uint256 i = 0; i < args.length; i++) {\n        // newArgs[i] = args[i];\n        // }\n        // newArgs[args.length] = sender;\n\n        // req.addArgs(newArgs);\n        req.addArgs(args);\n\n        bytes32 assignedReqID = sendRequest(\n            req,\n            subscriptionId,\n            gasLimit,\n            tx.gasprice\n        );\n        latestRequestId = assignedReqID;\n        return assignedReqID;\n    }\n\n    /**\n     * @notice Callback that is invoked once the DON has resolved the request or hit an error\n     *\n     * @param requestId The request ID, returned by sendRequest()\n     * @param response Aggregated response from the user code\n     * @param err Aggregated error from the user code or from the execution pipeline\n     * Either response or error parameter will be set, but never both\n     */\n    function fulfillRequest(\n        bytes32 requestId,\n        bytes memory response,\n        bytes memory err\n    ) internal override {\n        // revert('test');\n        latestResponse = response;\n        latestError = err;\n        emit OCRResponse(requestId, response, err);\n    }\n\n    function updateOracleAddress(address oracle) public onlyOwner {\n        setOracle(oracle);\n    }\n}\n"},"contracts/utils/AddressToString.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n/**\n * @notice Convert address to string\n * @param _addr The address to convert\n */\n\nfunction addressToString(address _addr) pure returns (string memory) {\n    bytes32 value = bytes32(uint256(uint160(_addr)));\n    bytes memory alphabet = \"0123456789abcdef\";\n    bytes memory str = new bytes(42);\n    str[0] = \"0\";\n    str[1] = \"x\";\n\n    for (uint256 i = 0; i < 20; i++) {\n        str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\n        str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\n    }\n\n    return string(str);\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":1000},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol","exportedSymbols":{"ConfirmedOwner":[19],"ConfirmedOwnerWithProposal":[181],"OwnableInterface":[197]},"id":20,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol","file":"./ConfirmedOwnerWithProposal.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":20,"sourceUnit":182,"src":"57:42:0","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4,"name":"ConfirmedOwnerWithProposal","nodeType":"IdentifierPath","referencedDeclaration":181,"src":"239:26:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"239:26:0"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"101:110:0","text":" @title The ConfirmedOwner contract\n @notice A contract with helpers for basic contract ownership."},"fullyImplemented":true,"id":19,"linearizedBaseContracts":[19,181,197],"name":"ConfirmedOwner","nameLocation":"221:14:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":17,"nodeType":"Block","src":"349:2:0","statements":[]},"id":18,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":10,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"327:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":13,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"345:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":12,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"337:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"337:7:0","typeDescriptions":{}}},"id":14,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"337:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":15,"kind":"baseConstructorSpecifier","modifierName":{"id":9,"name":"ConfirmedOwnerWithProposal","nodeType":"IdentifierPath","referencedDeclaration":181,"src":"300:26:0"},"nodeType":"ModifierInvocation","src":"300:48:0"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":8,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7,"mutability":"mutable","name":"newOwner","nameLocation":"290:8:0","nodeType":"VariableDeclaration","scope":18,"src":"282:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"282:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"281:18:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"349:0:0"},"scope":19,"src":"270:81:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":20,"src":"212:141:0","usedErrors":[]}],"src":"32:322:0"},"id":0},"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol","exportedSymbols":{"ConfirmedOwnerWithProposal":[181],"OwnableInterface":[197]},"id":182,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":21,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol","file":"./interfaces/OwnableInterface.sol","id":22,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":182,"sourceUnit":198,"src":"57:43:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":24,"name":"OwnableInterface","nodeType":"IdentifierPath","referencedDeclaration":197,"src":"252:16:1"},"id":25,"nodeType":"InheritanceSpecifier","src":"252:16:1"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":23,"nodeType":"StructuredDocumentation","src":"102:110:1","text":" @title The ConfirmedOwner contract\n @notice A contract with helpers for basic contract ownership."},"fullyImplemented":true,"id":181,"linearizedBaseContracts":[181,197],"name":"ConfirmedOwnerWithProposal","nameLocation":"222:26:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":27,"mutability":"mutable","name":"s_owner","nameLocation":"289:7:1","nodeType":"VariableDeclaration","scope":181,"src":"273:23:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"273:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":29,"mutability":"mutable","name":"s_pendingOwner","nameLocation":"316:14:1","nodeType":"VariableDeclaration","scope":181,"src":"300:30:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"300:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":35,"name":"OwnershipTransferRequested","nameLocation":"341:26:1","nodeType":"EventDefinition","parameters":{"id":34,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"384:4:1","nodeType":"VariableDeclaration","scope":35,"src":"368:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":30,"name":"address","nodeType":"ElementaryTypeName","src":"368:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":33,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"406:2:1","nodeType":"VariableDeclaration","scope":35,"src":"390:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32,"name":"address","nodeType":"ElementaryTypeName","src":"390:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"367:42:1"},"src":"335:75:1"},{"anonymous":false,"id":41,"name":"OwnershipTransferred","nameLocation":"419:20:1","nodeType":"EventDefinition","parameters":{"id":40,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"456:4:1","nodeType":"VariableDeclaration","scope":41,"src":"440:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":36,"name":"address","nodeType":"ElementaryTypeName","src":"440:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":39,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"478:2:1","nodeType":"VariableDeclaration","scope":41,"src":"462:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":38,"name":"address","nodeType":"ElementaryTypeName","src":"462:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"439:42:1"},"src":"413:69:1"},{"body":{"id":74,"nodeType":"Block","src":"538:179:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":49,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"552:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":52,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"572:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":51,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"564:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":50,"name":"address","nodeType":"ElementaryTypeName","src":"564:7:1","typeDescriptions":{}}},"id":53,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"564:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"552:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","id":55,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"576:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","typeString":"literal_string \"Cannot set owner to zero\""},"value":"Cannot set owner to zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","typeString":"literal_string \"Cannot set owner to zero\""}],"id":48,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"544:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"544:59:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":57,"nodeType":"ExpressionStatement","src":"544:59:1"},{"expression":{"id":60,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":58,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"610:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":59,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"620:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"610:18:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":61,"nodeType":"ExpressionStatement","src":"610:18:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":62,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"638:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"662:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":64,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"654:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":63,"name":"address","nodeType":"ElementaryTypeName","src":"654:7:1","typeDescriptions":{}}},"id":66,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"654:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"638:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":73,"nodeType":"IfStatement","src":"634:79:1","trueBody":{"id":72,"nodeType":"Block","src":"666:47:1","statements":[{"expression":{"arguments":[{"id":69,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":45,"src":"693:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":68,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"674:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"674:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":71,"nodeType":"ExpressionStatement","src":"674:32:1"}]}}]},"id":75,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"newOwner","nameLocation":"506:8:1","nodeType":"VariableDeclaration","scope":75,"src":"498:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42,"name":"address","nodeType":"ElementaryTypeName","src":"498:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":45,"mutability":"mutable","name":"pendingOwner","nameLocation":"524:12:1","nodeType":"VariableDeclaration","scope":75,"src":"516:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":44,"name":"address","nodeType":"ElementaryTypeName","src":"516:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"497:40:1"},"returnParameters":{"id":47,"nodeType":"ParameterList","parameters":[],"src":"538:0:1"},"scope":181,"src":"486:231:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[193],"body":{"id":88,"nodeType":"Block","src":"891:33:1","statements":[{"expression":{"arguments":[{"id":85,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"916:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":84,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"897:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":86,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"897:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":87,"nodeType":"ExpressionStatement","src":"897:22:1"}]},"documentation":{"id":76,"nodeType":"StructuredDocumentation","src":"721:102:1","text":" @notice Allows an owner to begin transferring ownership to a new address,\n pending."},"functionSelector":"f2fde38b","id":89,"implemented":true,"kind":"function","modifiers":[{"id":82,"kind":"modifierInvocation","modifierName":{"id":81,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":180,"src":"881:9:1"},"nodeType":"ModifierInvocation","src":"881:9:1"}],"name":"transferOwnership","nameLocation":"835:17:1","nodeType":"FunctionDefinition","overrides":{"id":80,"nodeType":"OverrideSpecifier","overrides":[],"src":"872:8:1"},"parameters":{"id":79,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"to","nameLocation":"861:2:1","nodeType":"VariableDeclaration","scope":89,"src":"853:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":77,"name":"address","nodeType":"ElementaryTypeName","src":"853:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"852:12:1"},"returnParameters":{"id":83,"nodeType":"ParameterList","parameters":[],"src":"891:0:1"},"scope":181,"src":"826:98:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[196],"body":{"id":124,"nodeType":"Block","src":"1061:220:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":95,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1075:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1075:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":97,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1089:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1075:28:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","id":99,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1105:24:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","typeString":"literal_string \"Must be proposed owner\""},"value":"Must be proposed owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","typeString":"literal_string \"Must be proposed owner\""}],"id":94,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1067:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1067:63:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":101,"nodeType":"ExpressionStatement","src":"1067:63:1"},{"assignments":[103],"declarations":[{"constant":false,"id":103,"mutability":"mutable","name":"oldOwner","nameLocation":"1145:8:1","nodeType":"VariableDeclaration","scope":124,"src":"1137:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":102,"name":"address","nodeType":"ElementaryTypeName","src":"1137:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":105,"initialValue":{"id":104,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1156:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1137:26:1"},{"expression":{"id":109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":106,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1169:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":107,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1179:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1179:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1169:20:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":110,"nodeType":"ExpressionStatement","src":"1169:20:1"},{"expression":{"id":116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":111,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1195:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1220:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1212:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":112,"name":"address","nodeType":"ElementaryTypeName","src":"1212:7:1","typeDescriptions":{}}},"id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1212:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1195:27:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":117,"nodeType":"ExpressionStatement","src":"1195:27:1"},{"eventCall":{"arguments":[{"id":119,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":103,"src":"1255:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":120,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1265:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1265:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":118,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"1234:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1234:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":123,"nodeType":"EmitStatement","src":"1229:47:1"}]},"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"928:85:1","text":" @notice Allows an ownership transfer to be completed by the recipient."},"functionSelector":"79ba5097","id":125,"implemented":true,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"1025:15:1","nodeType":"FunctionDefinition","overrides":{"id":92,"nodeType":"OverrideSpecifier","overrides":[],"src":"1052:8:1"},"parameters":{"id":91,"nodeType":"ParameterList","parameters":[],"src":"1040:2:1"},"returnParameters":{"id":93,"nodeType":"ParameterList","parameters":[],"src":"1061:0:1"},"scope":181,"src":"1016:265:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[188],"body":{"id":134,"nodeType":"Block","src":"1388:25:1","statements":[{"expression":{"id":132,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1401:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":131,"id":133,"nodeType":"Return","src":"1394:14:1"}]},"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"1285:44:1","text":" @notice Get the current owner"},"functionSelector":"8da5cb5b","id":135,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1341:5:1","nodeType":"FunctionDefinition","overrides":{"id":128,"nodeType":"OverrideSpecifier","overrides":[],"src":"1361:8:1"},"parameters":{"id":127,"nodeType":"ParameterList","parameters":[],"src":"1346:2:1"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":135,"src":"1379:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":129,"name":"address","nodeType":"ElementaryTypeName","src":"1379:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1378:9:1"},"scope":181,"src":"1332:81:1","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":158,"nodeType":"Block","src":"1545:140:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":142,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"1559:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":143,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1565:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1565:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1559:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","id":146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1577:25:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","typeString":"literal_string \"Cannot transfer to self\""},"value":"Cannot transfer to self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","typeString":"literal_string \"Cannot transfer to self\""}],"id":141,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1551:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1551:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":148,"nodeType":"ExpressionStatement","src":"1551:52:1"},{"expression":{"id":151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":149,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"1610:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":150,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"1627:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1610:19:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":152,"nodeType":"ExpressionStatement","src":"1610:19:1"},{"eventCall":{"arguments":[{"id":154,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1668:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":155,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"1677:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":153,"name":"OwnershipTransferRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"1641:26:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1641:39:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":157,"nodeType":"EmitStatement","src":"1636:44:1"}]},"documentation":{"id":136,"nodeType":"StructuredDocumentation","src":"1417:77:1","text":" @notice validate, transfer ownership, and emit relevant events"},"id":159,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"1506:18:1","nodeType":"FunctionDefinition","parameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"to","nameLocation":"1533:2:1","nodeType":"VariableDeclaration","scope":159,"src":"1525:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":137,"name":"address","nodeType":"ElementaryTypeName","src":"1525:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1524:12:1"},"returnParameters":{"id":140,"nodeType":"ParameterList","parameters":[],"src":"1545:0:1"},"scope":181,"src":"1497:188:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":171,"nodeType":"Block","src":"1774:67:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":164,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1788:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1788:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":166,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1802:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1788:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","id":168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1811:24:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","typeString":"literal_string \"Only callable by owner\""},"value":"Only callable by owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","typeString":"literal_string \"Only callable by owner\""}],"id":163,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1780:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1780:56:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":170,"nodeType":"ExpressionStatement","src":"1780:56:1"}]},"documentation":{"id":160,"nodeType":"StructuredDocumentation","src":"1689:38:1","text":" @notice validate access"},"id":172,"implemented":true,"kind":"function","modifiers":[],"name":"_validateOwnership","nameLocation":"1739:18:1","nodeType":"FunctionDefinition","parameters":{"id":161,"nodeType":"ParameterList","parameters":[],"src":"1757:2:1"},"returnParameters":{"id":162,"nodeType":"ParameterList","parameters":[],"src":"1774:0:1"},"scope":181,"src":"1730:111:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":179,"nodeType":"Block","src":"1950:38:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":175,"name":"_validateOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"1956:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1956:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":177,"nodeType":"ExpressionStatement","src":"1956:20:1"},{"id":178,"nodeType":"PlaceholderStatement","src":"1982:1:1"}]},"documentation":{"id":173,"nodeType":"StructuredDocumentation","src":"1845:81:1","text":" @notice Reverts if called by anyone other than the contract owner."},"id":180,"name":"onlyOwner","nameLocation":"1938:9:1","nodeType":"ModifierDefinition","parameters":{"id":174,"nodeType":"ParameterList","parameters":[],"src":"1947:2:1"},"src":"1929:59:1","virtual":false,"visibility":"internal"}],"scope":182,"src":"213:1777:1","usedErrors":[]}],"src":"32:1959:1"},"id":1},"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol","exportedSymbols":{"OwnableInterface":[197]},"id":198,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":183,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":197,"linearizedBaseContracts":[197],"name":"OwnableInterface","nameLocation":"67:16:2","nodeType":"ContractDefinition","nodes":[{"functionSelector":"8da5cb5b","id":188,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"97:5:2","nodeType":"FunctionDefinition","parameters":{"id":184,"nodeType":"ParameterList","parameters":[],"src":"102:2:2"},"returnParameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":186,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":188,"src":"123:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"123:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"122:9:2"},"scope":197,"src":"88:44:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f2fde38b","id":193,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"145:17:2","nodeType":"FunctionDefinition","parameters":{"id":191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":190,"mutability":"mutable","name":"recipient","nameLocation":"171:9:2","nodeType":"VariableDeclaration","scope":193,"src":"163:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":189,"name":"address","nodeType":"ElementaryTypeName","src":"163:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"162:19:2"},"returnParameters":{"id":192,"nodeType":"ParameterList","parameters":[],"src":"190:0:2"},"scope":197,"src":"136:55:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"79ba5097","id":196,"implemented":false,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"204:15:2","nodeType":"FunctionDefinition","parameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"219:2:2"},"returnParameters":{"id":195,"nodeType":"ParameterList","parameters":[],"src":"230:0:2"},"scope":197,"src":"195:36:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":198,"src":"57:176:2","usedErrors":[]}],"src":"32:202:2"},"id":2},"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol","exportedSymbols":{"BufferChainlink":[719]},"id":720,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":199,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"57:383:3","text":" @dev A library for working with mutable byte buffers in Solidity.\n Byte buffers are mutable and expandable, and provide a variety of primitives\n for writing to them. At any time you can fetch a bytes object containing the\n current contents of the buffer. The bytes object should not be stored between\n operations, as it may change due to resizing of the buffer."},"fullyImplemented":true,"id":719,"linearizedBaseContracts":[719],"name":"BufferChainlink","nameLocation":"449:15:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"BufferChainlink.buffer","id":205,"members":[{"constant":false,"id":202,"mutability":"mutable","name":"buf","nameLocation":"743:3:3","nodeType":"VariableDeclaration","scope":205,"src":"737:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":201,"name":"bytes","nodeType":"ElementaryTypeName","src":"737:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":204,"mutability":"mutable","name":"capacity","nameLocation":"760:8:3","nodeType":"VariableDeclaration","scope":205,"src":"752:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":203,"name":"uint256","nodeType":"ElementaryTypeName","src":"752:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"buffer","nameLocation":"724:6:3","nodeType":"StructDefinition","scope":719,"src":"717:56:3","visibility":"public"},{"body":{"id":242,"nodeType":"Block","src":"1090:310:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":217,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"1100:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1111:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1100:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1117:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1100:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":232,"nodeType":"IfStatement","src":"1096:71:3","trueBody":{"id":231,"nodeType":"Block","src":"1120:47:3","statements":[{"expression":{"id":229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":222,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"1128:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1140:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":224,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"1146:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1157:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1146:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":227,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1145:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1140:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1128:32:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":230,"nodeType":"ExpressionStatement","src":"1128:32:3"}]}},{"expression":{"id":237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":233,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"1214:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":204,"src":"1214:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":236,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"1229:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1214:23:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":238,"nodeType":"ExpressionStatement","src":"1214:23:3"},{"AST":{"nodeType":"YulBlock","src":"1252:128:3","statements":[{"nodeType":"YulVariableDeclaration","src":"1260:22:3","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1277:4:3","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1271:5:3"},"nodeType":"YulFunctionCall","src":"1271:11:3"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"1264:3:3","type":""}]},{"expression":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"1296:3:3"},{"name":"ptr","nodeType":"YulIdentifier","src":"1301:3:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1289:6:3"},"nodeType":"YulFunctionCall","src":"1289:16:3"},"nodeType":"YulExpressionStatement","src":"1289:16:3"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1319:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"1324:1:3","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1312:6:3"},"nodeType":"YulFunctionCall","src":"1312:14:3"},"nodeType":"YulExpressionStatement","src":"1312:14:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1340:4:3","type":"","value":"0x40"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1350:2:3","type":"","value":"32"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1358:3:3"},{"name":"capacity","nodeType":"YulIdentifier","src":"1363:8:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1354:3:3"},"nodeType":"YulFunctionCall","src":"1354:18:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1346:3:3"},"nodeType":"YulFunctionCall","src":"1346:27:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1333:6:3"},"nodeType":"YulFunctionCall","src":"1333:41:3"},"nodeType":"YulExpressionStatement","src":"1333:41:3"}]},"evmVersion":"london","externalReferences":[{"declaration":209,"isOffset":false,"isSlot":false,"src":"1296:3:3","valueSize":1},{"declaration":211,"isOffset":false,"isSlot":false,"src":"1363:8:3","valueSize":1}],"id":239,"nodeType":"InlineAssembly","src":"1243:137:3"},{"expression":{"id":240,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"1392:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":216,"id":241,"nodeType":"Return","src":"1385:10:3"}]},"documentation":{"id":206,"nodeType":"StructuredDocumentation","src":"777:221:3","text":" @dev Initializes a buffer with an initial capacity.\n @param buf The buffer to initialize.\n @param capacity The number of bytes of space to allocate the buffer.\n @return The buffer, for chaining."},"id":243,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"1010:4:3","nodeType":"FunctionDefinition","parameters":{"id":212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":209,"mutability":"mutable","name":"buf","nameLocation":"1029:3:3","nodeType":"VariableDeclaration","scope":243,"src":"1015:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":208,"nodeType":"UserDefinedTypeName","pathNode":{"id":207,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"1015:6:3"},"referencedDeclaration":205,"src":"1015:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":211,"mutability":"mutable","name":"capacity","nameLocation":"1042:8:3","nodeType":"VariableDeclaration","scope":243,"src":"1034:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":210,"name":"uint256","nodeType":"ElementaryTypeName","src":"1034:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1014:37:3"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":243,"src":"1075:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":214,"nodeType":"UserDefinedTypeName","pathNode":{"id":213,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"1075:6:3"},"referencedDeclaration":205,"src":"1075:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"1074:15:3"},"scope":719,"src":"1001:399:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":271,"nodeType":"Block","src":"1707:90:3","statements":[{"assignments":[254],"declarations":[{"constant":false,"id":254,"mutability":"mutable","name":"buf","nameLocation":"1727:3:3","nodeType":"VariableDeclaration","scope":271,"src":"1713:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":253,"nodeType":"UserDefinedTypeName","pathNode":{"id":252,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"1713:6:3"},"referencedDeclaration":205,"src":"1713:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"id":255,"nodeType":"VariableDeclarationStatement","src":"1713:17:3"},{"expression":{"id":260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":256,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"1736:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":258,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":202,"src":"1736:7:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":259,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"1746:1:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1736:11:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":261,"nodeType":"ExpressionStatement","src":"1736:11:3"},{"expression":{"id":267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":262,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"1753:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":264,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":204,"src":"1753:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":265,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"1768:1:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1768:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1753:23:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":268,"nodeType":"ExpressionStatement","src":"1753:23:3"},{"expression":{"id":269,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"1789:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":251,"id":270,"nodeType":"Return","src":"1782:10:3"}]},"documentation":{"id":244,"nodeType":"StructuredDocumentation","src":"1404:227:3","text":" @dev Initializes a new buffer from an existing bytes object.\n      Changes to the buffer may mutate the original value.\n @param b The bytes object to initialize the buffer with.\n @return A new buffer."},"id":272,"implemented":true,"kind":"function","modifiers":[],"name":"fromBytes","nameLocation":"1643:9:3","nodeType":"FunctionDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":246,"mutability":"mutable","name":"b","nameLocation":"1666:1:3","nodeType":"VariableDeclaration","scope":272,"src":"1653:14:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":245,"name":"bytes","nodeType":"ElementaryTypeName","src":"1653:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1652:16:3"},"returnParameters":{"id":251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":272,"src":"1692:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":249,"nodeType":"UserDefinedTypeName","pathNode":{"id":248,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"1692:6:3"},"referencedDeclaration":205,"src":"1692:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"1691:15:3"},"scope":719,"src":"1634:163:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":295,"nodeType":"Block","src":"1867:90:3","statements":[{"assignments":[281],"declarations":[{"constant":false,"id":281,"mutability":"mutable","name":"oldbuf","nameLocation":"1886:6:3","nodeType":"VariableDeclaration","scope":295,"src":"1873:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":280,"name":"bytes","nodeType":"ElementaryTypeName","src":"1873:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":284,"initialValue":{"expression":{"id":282,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"1895:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":283,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":202,"src":"1895:7:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1873:29:3"},{"expression":{"arguments":[{"id":286,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"1913:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":287,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"1918:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":285,"name":"init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"1908:4:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1908:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":289,"nodeType":"ExpressionStatement","src":"1908:19:3"},{"expression":{"arguments":[{"id":291,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"1940:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":292,"name":"oldbuf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"1945:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":290,"name":"append","nodeType":"Identifier","overloadedDeclarations":[439,462],"referencedDeclaration":462,"src":"1933:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,bytes memory) pure returns (struct BufferChainlink.buffer memory)"}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1933:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":294,"nodeType":"ExpressionStatement","src":"1933:19:3"}]},"id":296,"implemented":true,"kind":"function","modifiers":[],"name":"resize","nameLocation":"1810:6:3","nodeType":"FunctionDefinition","parameters":{"id":278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":275,"mutability":"mutable","name":"buf","nameLocation":"1831:3:3","nodeType":"VariableDeclaration","scope":296,"src":"1817:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":274,"nodeType":"UserDefinedTypeName","pathNode":{"id":273,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"1817:6:3"},"referencedDeclaration":205,"src":"1817:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":277,"mutability":"mutable","name":"capacity","nameLocation":"1844:8:3","nodeType":"VariableDeclaration","scope":296,"src":"1836:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":276,"name":"uint256","nodeType":"ElementaryTypeName","src":"1836:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1816:37:3"},"returnParameters":{"id":279,"nodeType":"ParameterList","parameters":[],"src":"1867:0:3"},"scope":719,"src":"1801:156:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":314,"nodeType":"Block","src":"2027:58:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":305,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"2037:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":306,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"2041:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2037:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":311,"nodeType":"IfStatement","src":"2033:34:3","trueBody":{"id":310,"nodeType":"Block","src":"2044:23:3","statements":[{"expression":{"id":308,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"2059:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":304,"id":309,"nodeType":"Return","src":"2052:8:3"}]}},{"expression":{"id":312,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":300,"src":"2079:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":304,"id":313,"nodeType":"Return","src":"2072:8:3"}]},"id":315,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"1970:3:3","nodeType":"FunctionDefinition","parameters":{"id":301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"a","nameLocation":"1982:1:3","nodeType":"VariableDeclaration","scope":315,"src":"1974:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":297,"name":"uint256","nodeType":"ElementaryTypeName","src":"1974:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":300,"mutability":"mutable","name":"b","nameLocation":"1993:1:3","nodeType":"VariableDeclaration","scope":315,"src":"1985:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":299,"name":"uint256","nodeType":"ElementaryTypeName","src":"1985:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1973:22:3"},"returnParameters":{"id":304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":303,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":315,"src":"2018:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":302,"name":"uint256","nodeType":"ElementaryTypeName","src":"2018:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2017:9:3"},"scope":719,"src":"1961:124:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":328,"nodeType":"Block","src":"2300:97:3","statements":[{"AST":{"nodeType":"YulBlock","src":"2315:62:3","statements":[{"nodeType":"YulVariableDeclaration","src":"2323:24:3","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"2343:3:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2337:5:3"},"nodeType":"YulFunctionCall","src":"2337:10:3"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"2327:6:3","type":""}]},{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"2361:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"2369:1:3","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2354:6:3"},"nodeType":"YulFunctionCall","src":"2354:17:3"},"nodeType":"YulExpressionStatement","src":"2354:17:3"}]},"evmVersion":"london","externalReferences":[{"declaration":319,"isOffset":false,"isSlot":false,"src":"2343:3:3","valueSize":1}],"id":325,"nodeType":"InlineAssembly","src":"2306:71:3"},{"expression":{"id":326,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"2389:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":324,"id":327,"nodeType":"Return","src":"2382:10:3"}]},"documentation":{"id":316,"nodeType":"StructuredDocumentation","src":"2089:133:3","text":" @dev Sets buffer length to 0.\n @param buf The buffer to truncate.\n @return The original buffer, for chaining.."},"id":329,"implemented":true,"kind":"function","modifiers":[],"name":"truncate","nameLocation":"2234:8:3","nodeType":"FunctionDefinition","parameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":319,"mutability":"mutable","name":"buf","nameLocation":"2257:3:3","nodeType":"VariableDeclaration","scope":329,"src":"2243:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":318,"nodeType":"UserDefinedTypeName","pathNode":{"id":317,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"2243:6:3"},"referencedDeclaration":205,"src":"2243:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"2242:19:3"},"returnParameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":329,"src":"2285:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":322,"nodeType":"UserDefinedTypeName","pathNode":{"id":321,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"2285:6:3"},"referencedDeclaration":205,"src":"2285:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"2284:15:3"},"scope":719,"src":"2225:172:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":414,"nodeType":"Block","src":"2882:1073:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":346,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"2896:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":347,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"2903:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2903:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2896:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":345,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2888:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2888:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":351,"nodeType":"ExpressionStatement","src":"2888:27:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":352,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"2926:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":353,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"2932:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2926:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":355,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"2938:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":356,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":204,"src":"2938:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2926:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":372,"nodeType":"IfStatement","src":"2922:90:3","trueBody":{"id":371,"nodeType":"Block","src":"2952:60:3","statements":[{"expression":{"arguments":[{"id":359,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"2967:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":361,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"2976:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":362,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":204,"src":"2976:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":363,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"2990:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":364,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"2996:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2990:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":360,"name":"max","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"2972:3:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2972:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3003:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2972:32:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":358,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"2960:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2960:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":370,"nodeType":"ExpressionStatement","src":"2960:45:3"}]}},{"assignments":[374],"declarations":[{"constant":false,"id":374,"mutability":"mutable","name":"dest","nameLocation":"3026:4:3","nodeType":"VariableDeclaration","scope":414,"src":"3018:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":373,"name":"uint256","nodeType":"ElementaryTypeName","src":"3018:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":375,"nodeType":"VariableDeclarationStatement","src":"3018:12:3"},{"assignments":[377],"declarations":[{"constant":false,"id":377,"mutability":"mutable","name":"src","nameLocation":"3044:3:3","nodeType":"VariableDeclaration","scope":414,"src":"3036:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":376,"name":"uint256","nodeType":"ElementaryTypeName","src":"3036:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":378,"nodeType":"VariableDeclarationStatement","src":"3036:11:3"},{"AST":{"nodeType":"YulBlock","src":"3062:430:3","statements":[{"nodeType":"YulVariableDeclaration","src":"3113:24:3","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"3133:3:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3127:5:3"},"nodeType":"YulFunctionCall","src":"3127:10:3"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"3117:6:3","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3184:27:3","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3204:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3198:5:3"},"nodeType":"YulFunctionCall","src":"3198:13:3"},"variables":[{"name":"buflen","nodeType":"YulTypedName","src":"3188:6:3","type":""}]},{"nodeType":"YulAssignment","src":"3291:33:3","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3307:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"3315:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3303:3:3"},"nodeType":"YulFunctionCall","src":"3303:15:3"},{"name":"off","nodeType":"YulIdentifier","src":"3320:3:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3299:3:3"},"nodeType":"YulFunctionCall","src":"3299:25:3"},"variableNames":[{"name":"dest","nodeType":"YulIdentifier","src":"3291:4:3"}]},{"body":{"nodeType":"YulBlock","src":"3412:47:3","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3429:6:3"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3441:3:3"},{"name":"off","nodeType":"YulIdentifier","src":"3446:3:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3437:3:3"},"nodeType":"YulFunctionCall","src":"3437:13:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3422:6:3"},"nodeType":"YulFunctionCall","src":"3422:29:3"},"nodeType":"YulExpressionStatement","src":"3422:29:3"}]},"condition":{"arguments":[{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3393:3:3"},{"name":"off","nodeType":"YulIdentifier","src":"3398:3:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3389:3:3"},"nodeType":"YulFunctionCall","src":"3389:13:3"},{"name":"buflen","nodeType":"YulIdentifier","src":"3404:6:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3386:2:3"},"nodeType":"YulFunctionCall","src":"3386:25:3"},"nodeType":"YulIf","src":"3383:76:3"},{"nodeType":"YulAssignment","src":"3466:20:3","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3477:4:3"},{"kind":"number","nodeType":"YulLiteral","src":"3483:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3473:3:3"},"nodeType":"YulFunctionCall","src":"3473:13:3"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3466:3:3"}]}]},"evmVersion":"london","externalReferences":[{"declaration":333,"isOffset":false,"isSlot":false,"src":"3133:3:3","valueSize":1},{"declaration":337,"isOffset":false,"isSlot":false,"src":"3477:4:3","valueSize":1},{"declaration":374,"isOffset":false,"isSlot":false,"src":"3291:4:3","valueSize":1},{"declaration":339,"isOffset":false,"isSlot":false,"src":"3393:3:3","valueSize":1},{"declaration":339,"isOffset":false,"isSlot":false,"src":"3441:3:3","valueSize":1},{"declaration":335,"isOffset":false,"isSlot":false,"src":"3320:3:3","valueSize":1},{"declaration":335,"isOffset":false,"isSlot":false,"src":"3398:3:3","valueSize":1},{"declaration":335,"isOffset":false,"isSlot":false,"src":"3446:3:3","valueSize":1},{"declaration":377,"isOffset":false,"isSlot":false,"src":"3466:3:3","valueSize":1}],"id":379,"nodeType":"InlineAssembly","src":"3053:439:3"},{"body":{"id":396,"nodeType":"Block","src":"3573:100:3","statements":[{"AST":{"nodeType":"YulBlock","src":"3590:42:3","statements":[{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"3607:4:3"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3619:3:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3613:5:3"},"nodeType":"YulFunctionCall","src":"3613:10:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3600:6:3"},"nodeType":"YulFunctionCall","src":"3600:24:3"},"nodeType":"YulExpressionStatement","src":"3600:24:3"}]},"evmVersion":"london","externalReferences":[{"declaration":374,"isOffset":false,"isSlot":false,"src":"3607:4:3","valueSize":1},{"declaration":377,"isOffset":false,"isSlot":false,"src":"3619:3:3","valueSize":1}],"id":387,"nodeType":"InlineAssembly","src":"3581:51:3"},{"expression":{"id":390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":388,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":374,"src":"3639:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3647:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3639:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":391,"nodeType":"ExpressionStatement","src":"3639:10:3"},{"expression":{"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":392,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"3657:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3664:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3657:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":395,"nodeType":"ExpressionStatement","src":"3657:9:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":380,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"3551:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3332","id":381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3558:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3551:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":397,"loopExpression":{"expression":{"id":385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":383,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"3562:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3332","id":384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3569:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3562:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":386,"nodeType":"ExpressionStatement","src":"3562:9:3"},"nodeType":"ForStatement","src":"3544:129:3"},{"id":411,"nodeType":"UncheckedBlock","src":"3707:227:3","statements":[{"assignments":[399],"declarations":[{"constant":false,"id":399,"mutability":"mutable","name":"mask","nameLocation":"3733:4:3","nodeType":"VariableDeclaration","scope":411,"src":"3725:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":398,"name":"uint256","nodeType":"ElementaryTypeName","src":"3725:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":409,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3741:3:3","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3747:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":402,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"3752:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3747:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":404,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3746:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3741:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":406,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3740:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3760:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3740:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3725:36:3"},{"AST":{"nodeType":"YulBlock","src":"3778:150:3","statements":[{"nodeType":"YulVariableDeclaration","src":"3788:41:3","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3813:3:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3807:5:3"},"nodeType":"YulFunctionCall","src":"3807:10:3"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"3823:4:3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3819:3:3"},"nodeType":"YulFunctionCall","src":"3819:9:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3803:3:3"},"nodeType":"YulFunctionCall","src":"3803:26:3"},"variables":[{"name":"srcpart","nodeType":"YulTypedName","src":"3792:7:3","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3838:38:3","value":{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"3864:4:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3858:5:3"},"nodeType":"YulFunctionCall","src":"3858:11:3"},{"name":"mask","nodeType":"YulIdentifier","src":"3871:4:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3854:3:3"},"nodeType":"YulFunctionCall","src":"3854:22:3"},"variables":[{"name":"destpart","nodeType":"YulTypedName","src":"3842:8:3","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"3892:4:3"},{"arguments":[{"name":"destpart","nodeType":"YulIdentifier","src":"3901:8:3"},{"name":"srcpart","nodeType":"YulIdentifier","src":"3911:7:3"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3898:2:3"},"nodeType":"YulFunctionCall","src":"3898:21:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3885:6:3"},"nodeType":"YulFunctionCall","src":"3885:35:3"},"nodeType":"YulExpressionStatement","src":"3885:35:3"}]},"evmVersion":"london","externalReferences":[{"declaration":374,"isOffset":false,"isSlot":false,"src":"3864:4:3","valueSize":1},{"declaration":374,"isOffset":false,"isSlot":false,"src":"3892:4:3","valueSize":1},{"declaration":399,"isOffset":false,"isSlot":false,"src":"3823:4:3","valueSize":1},{"declaration":399,"isOffset":false,"isSlot":false,"src":"3871:4:3","valueSize":1},{"declaration":377,"isOffset":false,"isSlot":false,"src":"3813:3:3","valueSize":1}],"id":410,"nodeType":"InlineAssembly","src":"3769:159:3"}]},{"expression":{"id":412,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"3947:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":344,"id":413,"nodeType":"Return","src":"3940:10:3"}]},"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"2401:341:3","text":" @dev Writes a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param off The start offset to write to.\n @param data The data to append.\n @param len The number of bytes to copy.\n @return The original buffer, for chaining."},"id":415,"implemented":true,"kind":"function","modifiers":[],"name":"write","nameLocation":"2754:5:3","nodeType":"FunctionDefinition","parameters":{"id":340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":333,"mutability":"mutable","name":"buf","nameLocation":"2779:3:3","nodeType":"VariableDeclaration","scope":415,"src":"2765:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":332,"nodeType":"UserDefinedTypeName","pathNode":{"id":331,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"2765:6:3"},"referencedDeclaration":205,"src":"2765:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":335,"mutability":"mutable","name":"off","nameLocation":"2796:3:3","nodeType":"VariableDeclaration","scope":415,"src":"2788:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":334,"name":"uint256","nodeType":"ElementaryTypeName","src":"2788:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":337,"mutability":"mutable","name":"data","nameLocation":"2818:4:3","nodeType":"VariableDeclaration","scope":415,"src":"2805:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":336,"name":"bytes","nodeType":"ElementaryTypeName","src":"2805:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":339,"mutability":"mutable","name":"len","nameLocation":"2836:3:3","nodeType":"VariableDeclaration","scope":415,"src":"2828:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":338,"name":"uint256","nodeType":"ElementaryTypeName","src":"2828:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2759:84:3"},"returnParameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":415,"src":"2867:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":342,"nodeType":"UserDefinedTypeName","pathNode":{"id":341,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"2867:6:3"},"referencedDeclaration":205,"src":"2867:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"2866:15:3"},"scope":719,"src":"2745:1210:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":438,"nodeType":"Block","src":"4379:55:3","statements":[{"expression":{"arguments":[{"id":430,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"4398:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"expression":{"expression":{"id":431,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"4403:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":432,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":202,"src":"4403:7:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4403:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":434,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"4419:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":435,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"4425:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":429,"name":"write","nodeType":"Identifier","overloadedDeclarations":[415,575],"referencedDeclaration":415,"src":"4392:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,bytes memory,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4392:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":428,"id":437,"nodeType":"Return","src":"4385:44:3"}]},"documentation":{"id":416,"nodeType":"StructuredDocumentation","src":"3959:296:3","text":" @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @param len The number of bytes to copy.\n @return The original buffer, for chaining."},"id":439,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"4267:6:3","nodeType":"FunctionDefinition","parameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":419,"mutability":"mutable","name":"buf","nameLocation":"4293:3:3","nodeType":"VariableDeclaration","scope":439,"src":"4279:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":418,"nodeType":"UserDefinedTypeName","pathNode":{"id":417,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"4279:6:3"},"referencedDeclaration":205,"src":"4279:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":421,"mutability":"mutable","name":"data","nameLocation":"4315:4:3","nodeType":"VariableDeclaration","scope":439,"src":"4302:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":420,"name":"bytes","nodeType":"ElementaryTypeName","src":"4302:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":423,"mutability":"mutable","name":"len","nameLocation":"4333:3:3","nodeType":"VariableDeclaration","scope":439,"src":"4325:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":422,"name":"uint256","nodeType":"ElementaryTypeName","src":"4325:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4273:67:3"},"returnParameters":{"id":428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":427,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":439,"src":"4364:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":426,"nodeType":"UserDefinedTypeName","pathNode":{"id":425,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"4364:6:3"},"referencedDeclaration":205,"src":"4364:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"4363:15:3"},"scope":719,"src":"4258:176:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":461,"nodeType":"Block","src":"4784:63:3","statements":[{"expression":{"arguments":[{"id":452,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"4803:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"expression":{"expression":{"id":453,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":443,"src":"4808:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":454,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":202,"src":"4808:7:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4808:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":456,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"4824:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":457,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"4830:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4830:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":451,"name":"write","nodeType":"Identifier","overloadedDeclarations":[415,575],"referencedDeclaration":415,"src":"4797:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,bytes memory,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4797:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":450,"id":460,"nodeType":"Return","src":"4790:52:3"}]},"documentation":{"id":440,"nodeType":"StructuredDocumentation","src":"4438:251:3","text":" @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":462,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"4701:6:3","nodeType":"FunctionDefinition","parameters":{"id":446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":443,"mutability":"mutable","name":"buf","nameLocation":"4722:3:3","nodeType":"VariableDeclaration","scope":462,"src":"4708:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":442,"nodeType":"UserDefinedTypeName","pathNode":{"id":441,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"4708:6:3"},"referencedDeclaration":205,"src":"4708:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":445,"mutability":"mutable","name":"data","nameLocation":"4740:4:3","nodeType":"VariableDeclaration","scope":462,"src":"4727:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":444,"name":"bytes","nodeType":"ElementaryTypeName","src":"4727:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4707:38:3"},"returnParameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":462,"src":"4769:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":448,"nodeType":"UserDefinedTypeName","pathNode":{"id":447,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"4769:6:3"},"referencedDeclaration":205,"src":"4769:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"4768:15:3"},"scope":719,"src":"4692:155:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":493,"nodeType":"Block","src":"5266:521:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":476,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"5276:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":477,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"5283:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":478,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":204,"src":"5283:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5276:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":489,"nodeType":"IfStatement","src":"5272:69:3","trueBody":{"id":488,"nodeType":"Block","src":"5297:44:3","statements":[{"expression":{"arguments":[{"id":481,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"5312:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":482,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"5317:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":483,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":204,"src":"5317:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5332:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5317:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":480,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"5305:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5305:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":487,"nodeType":"ExpressionStatement","src":"5305:29:3"}]}},{"AST":{"nodeType":"YulBlock","src":"5356:411:3","statements":[{"nodeType":"YulVariableDeclaration","src":"5407:24:3","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"5427:3:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5421:5:3"},"nodeType":"YulFunctionCall","src":"5421:10:3"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"5411:6:3","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5478:27:3","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5498:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5492:5:3"},"nodeType":"YulFunctionCall","src":"5492:13:3"},"variables":[{"name":"buflen","nodeType":"YulTypedName","src":"5482:6:3","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5576:37:3","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5596:6:3"},{"name":"off","nodeType":"YulIdentifier","src":"5604:3:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5592:3:3"},"nodeType":"YulFunctionCall","src":"5592:16:3"},{"kind":"number","nodeType":"YulLiteral","src":"5610:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5588:3:3"},"nodeType":"YulFunctionCall","src":"5588:25:3"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"5580:4:3","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"5628:4:3"},{"name":"data","nodeType":"YulIdentifier","src":"5634:4:3"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"5620:7:3"},"nodeType":"YulFunctionCall","src":"5620:19:3"},"nodeType":"YulExpressionStatement","src":"5620:19:3"},{"body":{"nodeType":"YulBlock","src":"5713:48:3","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5730:6:3"},{"arguments":[{"name":"buflen","nodeType":"YulIdentifier","src":"5742:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"5750:1:3","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5738:3:3"},"nodeType":"YulFunctionCall","src":"5738:14:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5723:6:3"},"nodeType":"YulFunctionCall","src":"5723:30:3"},"nodeType":"YulExpressionStatement","src":"5723:30:3"}]},"condition":{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"5700:3:3"},{"name":"buflen","nodeType":"YulIdentifier","src":"5705:6:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5697:2:3"},"nodeType":"YulFunctionCall","src":"5697:15:3"},"nodeType":"YulIf","src":"5694:67:3"}]},"evmVersion":"london","externalReferences":[{"declaration":466,"isOffset":false,"isSlot":false,"src":"5427:3:3","valueSize":1},{"declaration":470,"isOffset":false,"isSlot":false,"src":"5634:4:3","valueSize":1},{"declaration":468,"isOffset":false,"isSlot":false,"src":"5604:3:3","valueSize":1},{"declaration":468,"isOffset":false,"isSlot":false,"src":"5700:3:3","valueSize":1}],"id":490,"nodeType":"InlineAssembly","src":"5347:420:3"},{"expression":{"id":491,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"5779:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":475,"id":492,"nodeType":"Return","src":"5772:10:3"}]},"documentation":{"id":463,"nodeType":"StructuredDocumentation","src":"4851:294:3","text":" @dev Writes a byte to the buffer. Resizes if doing so would exceed the\n      capacity of the buffer.\n @param buf The buffer to append to.\n @param off The offset to write the byte at.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":494,"implemented":true,"kind":"function","modifiers":[],"name":"writeUint8","nameLocation":"5157:10:3","nodeType":"FunctionDefinition","parameters":{"id":471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":466,"mutability":"mutable","name":"buf","nameLocation":"5187:3:3","nodeType":"VariableDeclaration","scope":494,"src":"5173:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":465,"nodeType":"UserDefinedTypeName","pathNode":{"id":464,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"5173:6:3"},"referencedDeclaration":205,"src":"5173:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":468,"mutability":"mutable","name":"off","nameLocation":"5204:3:3","nodeType":"VariableDeclaration","scope":494,"src":"5196:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":467,"name":"uint256","nodeType":"ElementaryTypeName","src":"5196:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":470,"mutability":"mutable","name":"data","nameLocation":"5219:4:3","nodeType":"VariableDeclaration","scope":494,"src":"5213:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":469,"name":"uint8","nodeType":"ElementaryTypeName","src":"5213:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"5167:60:3"},"returnParameters":{"id":475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":474,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":494,"src":"5251:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":473,"nodeType":"UserDefinedTypeName","pathNode":{"id":472,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"5251:6:3"},"referencedDeclaration":205,"src":"5251:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"5250:15:3"},"scope":719,"src":"5148:639:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":514,"nodeType":"Block","src":"6130:55:3","statements":[{"expression":{"arguments":[{"id":507,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":498,"src":"6154:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"expression":{"expression":{"id":508,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":498,"src":"6159:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":509,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":202,"src":"6159:7:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6159:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":511,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"6175:4:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":506,"name":"writeUint8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"6143:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$_t_uint8_$returns$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6143:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":505,"id":513,"nodeType":"Return","src":"6136:44:3"}]},"documentation":{"id":495,"nodeType":"StructuredDocumentation","src":"5791:246:3","text":" @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n      capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":515,"implemented":true,"kind":"function","modifiers":[],"name":"appendUint8","nameLocation":"6049:11:3","nodeType":"FunctionDefinition","parameters":{"id":501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":498,"mutability":"mutable","name":"buf","nameLocation":"6075:3:3","nodeType":"VariableDeclaration","scope":515,"src":"6061:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":497,"nodeType":"UserDefinedTypeName","pathNode":{"id":496,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"6061:6:3"},"referencedDeclaration":205,"src":"6061:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":500,"mutability":"mutable","name":"data","nameLocation":"6086:4:3","nodeType":"VariableDeclaration","scope":515,"src":"6080:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":499,"name":"uint8","nodeType":"ElementaryTypeName","src":"6080:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6060:31:3"},"returnParameters":{"id":505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":504,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":515,"src":"6115:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":503,"nodeType":"UserDefinedTypeName","pathNode":{"id":502,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"6115:6:3"},"referencedDeclaration":205,"src":"6115:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"6114:15:3"},"scope":719,"src":"6040:145:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":574,"nodeType":"Block","src":"6677:652:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":531,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"6687:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":532,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"6693:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6687:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":534,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"6699:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":535,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":204,"src":"6699:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6687:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":548,"nodeType":"IfStatement","src":"6683:73:3","trueBody":{"id":547,"nodeType":"Block","src":"6713:43:3","statements":[{"expression":{"arguments":[{"id":538,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"6728:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":539,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"6734:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":540,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"6740:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6734:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":542,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6733:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6747:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6733:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":537,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"6721:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6721:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":546,"nodeType":"ExpressionStatement","src":"6721:28:3"}]}},{"id":571,"nodeType":"UncheckedBlock","src":"6762:547:3","statements":[{"assignments":[550],"declarations":[{"constant":false,"id":550,"mutability":"mutable","name":"mask","nameLocation":"6788:4:3","nodeType":"VariableDeclaration","scope":571,"src":"6780:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":549,"name":"uint256","nodeType":"ElementaryTypeName","src":"6780:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":557,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6796:3:3","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":552,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"6801:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6796:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":554,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6795:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6808:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6795:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6780:29:3"},{"expression":{"id":568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":558,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"6843:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":559,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"6850:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6859:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6864:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":562,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"6869:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6864:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":564,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6863:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6859:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":566,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6858:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6850:24:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6843:31:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":569,"nodeType":"ExpressionStatement","src":"6843:31:3"},{"AST":{"nodeType":"YulBlock","src":"6891:412:3","statements":[{"nodeType":"YulVariableDeclaration","src":"6946:24:3","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"6966:3:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6960:5:3"},"nodeType":"YulFunctionCall","src":"6960:10:3"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"6950:6:3","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7051:38:3","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"7071:6:3"},{"name":"off","nodeType":"YulIdentifier","src":"7079:3:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7067:3:3"},"nodeType":"YulFunctionCall","src":"7067:16:3"},{"name":"len","nodeType":"YulIdentifier","src":"7085:3:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7063:3:3"},"nodeType":"YulFunctionCall","src":"7063:26:3"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"7055:4:3","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"7105:4:3"},{"arguments":[{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"7124:4:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7118:5:3"},"nodeType":"YulFunctionCall","src":"7118:11:3"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"7135:4:3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7131:3:3"},"nodeType":"YulFunctionCall","src":"7131:9:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7114:3:3"},"nodeType":"YulFunctionCall","src":"7114:27:3"},{"name":"data","nodeType":"YulIdentifier","src":"7143:4:3"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7111:2:3"},"nodeType":"YulFunctionCall","src":"7111:37:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7098:6:3"},"nodeType":"YulFunctionCall","src":"7098:51:3"},"nodeType":"YulExpressionStatement","src":"7098:51:3"},{"body":{"nodeType":"YulBlock","src":"7244:51:3","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"7263:6:3"},{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"7275:3:3"},{"name":"len","nodeType":"YulIdentifier","src":"7280:3:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7271:3:3"},"nodeType":"YulFunctionCall","src":"7271:13:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7256:6:3"},"nodeType":"YulFunctionCall","src":"7256:29:3"},"nodeType":"YulExpressionStatement","src":"7256:29:3"}]},"condition":{"arguments":[{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"7218:3:3"},{"name":"len","nodeType":"YulIdentifier","src":"7223:3:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7214:3:3"},"nodeType":"YulFunctionCall","src":"7214:13:3"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"7235:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7229:5:3"},"nodeType":"YulFunctionCall","src":"7229:13:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7211:2:3"},"nodeType":"YulFunctionCall","src":"7211:32:3"},"nodeType":"YulIf","src":"7208:87:3"}]},"evmVersion":"london","externalReferences":[{"declaration":519,"isOffset":false,"isSlot":false,"src":"6966:3:3","valueSize":1},{"declaration":523,"isOffset":false,"isSlot":false,"src":"7143:4:3","valueSize":1},{"declaration":525,"isOffset":false,"isSlot":false,"src":"7085:3:3","valueSize":1},{"declaration":525,"isOffset":false,"isSlot":false,"src":"7223:3:3","valueSize":1},{"declaration":525,"isOffset":false,"isSlot":false,"src":"7280:3:3","valueSize":1},{"declaration":550,"isOffset":false,"isSlot":false,"src":"7135:4:3","valueSize":1},{"declaration":521,"isOffset":false,"isSlot":false,"src":"7079:3:3","valueSize":1},{"declaration":521,"isOffset":false,"isSlot":false,"src":"7218:3:3","valueSize":1},{"declaration":521,"isOffset":false,"isSlot":false,"src":"7275:3:3","valueSize":1}],"id":570,"nodeType":"InlineAssembly","src":"6882:421:3"}]},{"expression":{"id":572,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"7321:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":530,"id":573,"nodeType":"Return","src":"7314:10:3"}]},"documentation":{"id":516,"nodeType":"StructuredDocumentation","src":"6189:354:3","text":" @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n      exceed the capacity of the buffer.\n @param buf The buffer to append to.\n @param off The offset to write at.\n @param data The data to append.\n @param len The number of bytes to write (left-aligned).\n @return The original buffer, for chaining."},"id":575,"implemented":true,"kind":"function","modifiers":[],"name":"write","nameLocation":"6555:5:3","nodeType":"FunctionDefinition","parameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":519,"mutability":"mutable","name":"buf","nameLocation":"6580:3:3","nodeType":"VariableDeclaration","scope":575,"src":"6566:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":518,"nodeType":"UserDefinedTypeName","pathNode":{"id":517,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"6566:6:3"},"referencedDeclaration":205,"src":"6566:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":521,"mutability":"mutable","name":"off","nameLocation":"6597:3:3","nodeType":"VariableDeclaration","scope":575,"src":"6589:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":520,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":523,"mutability":"mutable","name":"data","nameLocation":"6614:4:3","nodeType":"VariableDeclaration","scope":575,"src":"6606:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":522,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6606:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":525,"mutability":"mutable","name":"len","nameLocation":"6632:3:3","nodeType":"VariableDeclaration","scope":575,"src":"6624:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":524,"name":"uint256","nodeType":"ElementaryTypeName","src":"6624:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6560:79:3"},"returnParameters":{"id":530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":529,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":575,"src":"6662:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":528,"nodeType":"UserDefinedTypeName","pathNode":{"id":527,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"6662:6:3"},"referencedDeclaration":205,"src":"6662:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"6661:15:3"},"scope":719,"src":"6546:783:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":599,"nodeType":"Block","src":"7746:52:3","statements":[{"expression":{"arguments":[{"id":590,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"7765:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":591,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"7770:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":594,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"7783:4:3","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7775:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":592,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7775:7:3","typeDescriptions":{}}},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7775:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3230","id":596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7790:2:3","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"id":589,"name":"write","nodeType":"Identifier","overloadedDeclarations":[415,575],"referencedDeclaration":575,"src":"7759:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,bytes32,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7759:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":588,"id":598,"nodeType":"Return","src":"7752:41:3"}]},"documentation":{"id":576,"nodeType":"StructuredDocumentation","src":"7333:288:3","text":" @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n      capacity of the buffer.\n @param buf The buffer to append to.\n @param off The offset to write at.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":600,"implemented":true,"kind":"function","modifiers":[],"name":"writeBytes20","nameLocation":"7633:12:3","nodeType":"FunctionDefinition","parameters":{"id":584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":579,"mutability":"mutable","name":"buf","nameLocation":"7665:3:3","nodeType":"VariableDeclaration","scope":600,"src":"7651:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":578,"nodeType":"UserDefinedTypeName","pathNode":{"id":577,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"7651:6:3"},"referencedDeclaration":205,"src":"7651:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":581,"mutability":"mutable","name":"off","nameLocation":"7682:3:3","nodeType":"VariableDeclaration","scope":600,"src":"7674:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":580,"name":"uint256","nodeType":"ElementaryTypeName","src":"7674:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":583,"mutability":"mutable","name":"data","nameLocation":"7699:4:3","nodeType":"VariableDeclaration","scope":600,"src":"7691:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":582,"name":"bytes20","nodeType":"ElementaryTypeName","src":"7691:7:3","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"7645:62:3"},"returnParameters":{"id":588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":600,"src":"7731:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":586,"nodeType":"UserDefinedTypeName","pathNode":{"id":585,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"7731:6:3"},"referencedDeclaration":205,"src":"7731:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"7730:15:3"},"scope":719,"src":"7624:174:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":624,"nodeType":"Block","src":"8149:63:3","statements":[{"expression":{"arguments":[{"id":613,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"8168:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"expression":{"expression":{"id":614,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"8173:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":615,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":202,"src":"8173:7:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8173:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":619,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"8197:4:3","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8189:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":617,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8189:7:3","typeDescriptions":{}}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8189:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3230","id":621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8204:2:3","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"id":612,"name":"write","nodeType":"Identifier","overloadedDeclarations":[415,575],"referencedDeclaration":575,"src":"8162:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,bytes32,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8162:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":611,"id":623,"nodeType":"Return","src":"8155:52:3"}]},"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"7802:250:3","text":" @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chhaining."},"id":625,"implemented":true,"kind":"function","modifiers":[],"name":"appendBytes20","nameLocation":"8064:13:3","nodeType":"FunctionDefinition","parameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"buf","nameLocation":"8092:3:3","nodeType":"VariableDeclaration","scope":625,"src":"8078:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":603,"nodeType":"UserDefinedTypeName","pathNode":{"id":602,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"8078:6:3"},"referencedDeclaration":205,"src":"8078:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"data","nameLocation":"8105:4:3","nodeType":"VariableDeclaration","scope":625,"src":"8097:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":605,"name":"bytes20","nodeType":"ElementaryTypeName","src":"8097:7:3","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"8077:33:3"},"returnParameters":{"id":611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":625,"src":"8134:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":609,"nodeType":"UserDefinedTypeName","pathNode":{"id":608,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"8134:6:3"},"referencedDeclaration":205,"src":"8134:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"8133:15:3"},"scope":719,"src":"8055:157:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":646,"nodeType":"Block","src":"8562:54:3","statements":[{"expression":{"arguments":[{"id":638,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"8581:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"expression":{"expression":{"id":639,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"8586:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":640,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":202,"src":"8586:7:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8586:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":642,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"8602:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3332","id":643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8608:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"id":637,"name":"write","nodeType":"Identifier","overloadedDeclarations":[415,575],"referencedDeclaration":575,"src":"8575:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,bytes32,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8575:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":636,"id":645,"nodeType":"Return","src":"8568:43:3"}]},"documentation":{"id":626,"nodeType":"StructuredDocumentation","src":"8216:249:3","text":" @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":647,"implemented":true,"kind":"function","modifiers":[],"name":"appendBytes32","nameLocation":"8477:13:3","nodeType":"FunctionDefinition","parameters":{"id":632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":629,"mutability":"mutable","name":"buf","nameLocation":"8505:3:3","nodeType":"VariableDeclaration","scope":647,"src":"8491:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":628,"nodeType":"UserDefinedTypeName","pathNode":{"id":627,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"8491:6:3"},"referencedDeclaration":205,"src":"8491:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":631,"mutability":"mutable","name":"data","nameLocation":"8518:4:3","nodeType":"VariableDeclaration","scope":647,"src":"8510:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":630,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8490:33:3"},"returnParameters":{"id":636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":635,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":647,"src":"8547:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":634,"nodeType":"UserDefinedTypeName","pathNode":{"id":633,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"8547:6:3"},"referencedDeclaration":205,"src":"8547:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"8546:15:3"},"scope":719,"src":"8468:148:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":693,"nodeType":"Block","src":"9108:541:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":663,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"9118:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":664,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"9124:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9118:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":666,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"9130:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":667,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":204,"src":"9130:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9118:24:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":680,"nodeType":"IfStatement","src":"9114:73:3","trueBody":{"id":679,"nodeType":"Block","src":"9144:43:3","statements":[{"expression":{"arguments":[{"id":670,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"9159:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":671,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"9165:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":672,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"9171:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9165:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":674,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9164:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9178:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9164:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":669,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"9152:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9152:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":678,"nodeType":"ExpressionStatement","src":"9152:28:3"}]}},{"assignments":[682],"declarations":[{"constant":false,"id":682,"mutability":"mutable","name":"mask","nameLocation":"9201:4:3","nodeType":"VariableDeclaration","scope":693,"src":"9193:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":681,"name":"uint256","nodeType":"ElementaryTypeName","src":"9193:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":689,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9209:3:3","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":684,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"9214:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9209:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":686,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9208:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9221:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9208:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9193:29:3"},{"AST":{"nodeType":"YulBlock","src":"9237:392:3","statements":[{"nodeType":"YulVariableDeclaration","src":"9288:24:3","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"9308:3:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9302:5:3"},"nodeType":"YulFunctionCall","src":"9302:10:3"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"9292:6:3","type":""}]},{"nodeType":"YulVariableDeclaration","src":"9389:38:3","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"9409:6:3"},{"name":"off","nodeType":"YulIdentifier","src":"9417:3:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9405:3:3"},"nodeType":"YulFunctionCall","src":"9405:16:3"},{"name":"len","nodeType":"YulIdentifier","src":"9423:3:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9401:3:3"},"nodeType":"YulFunctionCall","src":"9401:26:3"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"9393:4:3","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"9441:4:3"},{"arguments":[{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"9460:4:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9454:5:3"},"nodeType":"YulFunctionCall","src":"9454:11:3"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"9471:4:3"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9467:3:3"},"nodeType":"YulFunctionCall","src":"9467:9:3"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9450:3:3"},"nodeType":"YulFunctionCall","src":"9450:27:3"},{"name":"data","nodeType":"YulIdentifier","src":"9479:4:3"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"9447:2:3"},"nodeType":"YulFunctionCall","src":"9447:37:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9434:6:3"},"nodeType":"YulFunctionCall","src":"9434:51:3"},"nodeType":"YulExpressionStatement","src":"9434:51:3"},{"body":{"nodeType":"YulBlock","src":"9576:47:3","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"9593:6:3"},{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"9605:3:3"},{"name":"len","nodeType":"YulIdentifier","src":"9610:3:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9601:3:3"},"nodeType":"YulFunctionCall","src":"9601:13:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9586:6:3"},"nodeType":"YulFunctionCall","src":"9586:29:3"},"nodeType":"YulExpressionStatement","src":"9586:29:3"}]},"condition":{"arguments":[{"arguments":[{"name":"off","nodeType":"YulIdentifier","src":"9550:3:3"},{"name":"len","nodeType":"YulIdentifier","src":"9555:3:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9546:3:3"},"nodeType":"YulFunctionCall","src":"9546:13:3"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"9567:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9561:5:3"},"nodeType":"YulFunctionCall","src":"9561:13:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9543:2:3"},"nodeType":"YulFunctionCall","src":"9543:32:3"},"nodeType":"YulIf","src":"9540:83:3"}]},"evmVersion":"london","externalReferences":[{"declaration":651,"isOffset":false,"isSlot":false,"src":"9308:3:3","valueSize":1},{"declaration":655,"isOffset":false,"isSlot":false,"src":"9479:4:3","valueSize":1},{"declaration":657,"isOffset":false,"isSlot":false,"src":"9423:3:3","valueSize":1},{"declaration":657,"isOffset":false,"isSlot":false,"src":"9555:3:3","valueSize":1},{"declaration":657,"isOffset":false,"isSlot":false,"src":"9610:3:3","valueSize":1},{"declaration":682,"isOffset":false,"isSlot":false,"src":"9471:4:3","valueSize":1},{"declaration":653,"isOffset":false,"isSlot":false,"src":"9417:3:3","valueSize":1},{"declaration":653,"isOffset":false,"isSlot":false,"src":"9550:3:3","valueSize":1},{"declaration":653,"isOffset":false,"isSlot":false,"src":"9605:3:3","valueSize":1}],"id":690,"nodeType":"InlineAssembly","src":"9228:401:3"},{"expression":{"id":691,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"9641:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":662,"id":692,"nodeType":"Return","src":"9634:10:3"}]},"documentation":{"id":648,"nodeType":"StructuredDocumentation","src":"8620:351:3","text":" @dev Writes an integer to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param off The offset to write at.\n @param data The data to append.\n @param len The number of bytes to write (right-aligned).\n @return The original buffer, for chaining."},"id":694,"implemented":true,"kind":"function","modifiers":[],"name":"writeInt","nameLocation":"8983:8:3","nodeType":"FunctionDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":651,"mutability":"mutable","name":"buf","nameLocation":"9011:3:3","nodeType":"VariableDeclaration","scope":694,"src":"8997:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":650,"nodeType":"UserDefinedTypeName","pathNode":{"id":649,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"8997:6:3"},"referencedDeclaration":205,"src":"8997:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"off","nameLocation":"9028:3:3","nodeType":"VariableDeclaration","scope":694,"src":"9020:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":652,"name":"uint256","nodeType":"ElementaryTypeName","src":"9020:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":655,"mutability":"mutable","name":"data","nameLocation":"9045:4:3","nodeType":"VariableDeclaration","scope":694,"src":"9037:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":654,"name":"uint256","nodeType":"ElementaryTypeName","src":"9037:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":657,"mutability":"mutable","name":"len","nameLocation":"9063:3:3","nodeType":"VariableDeclaration","scope":694,"src":"9055:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":656,"name":"uint256","nodeType":"ElementaryTypeName","src":"9055:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8991:79:3"},"returnParameters":{"id":662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":661,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":694,"src":"9093:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":660,"nodeType":"UserDefinedTypeName","pathNode":{"id":659,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"9093:6:3"},"referencedDeclaration":205,"src":"9093:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"9092:15:3"},"scope":719,"src":"8974:675:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":717,"nodeType":"Block","src":"10013:58:3","statements":[{"expression":{"arguments":[{"id":709,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"10035:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"expression":{"expression":{"id":710,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"10040:3:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":711,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":202,"src":"10040:7:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"10040:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":713,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"10056:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":714,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":702,"src":"10062:3:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":708,"name":"writeInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"10026:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,uint256,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10026:40:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"functionReturnParameters":707,"id":716,"nodeType":"Return","src":"10019:47:3"}]},"documentation":{"id":695,"nodeType":"StructuredDocumentation","src":"9653:238:3","text":" @dev Appends a byte to the end of the buffer. Resizes if doing so would\n exceed the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer."},"id":718,"implemented":true,"kind":"function","modifiers":[],"name":"appendInt","nameLocation":"9903:9:3","nodeType":"FunctionDefinition","parameters":{"id":703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"buf","nameLocation":"9932:3:3","nodeType":"VariableDeclaration","scope":718,"src":"9918:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":697,"nodeType":"UserDefinedTypeName","pathNode":{"id":696,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"9918:6:3"},"referencedDeclaration":205,"src":"9918:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":700,"mutability":"mutable","name":"data","nameLocation":"9949:4:3","nodeType":"VariableDeclaration","scope":718,"src":"9941:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":699,"name":"uint256","nodeType":"ElementaryTypeName","src":"9941:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":702,"mutability":"mutable","name":"len","nameLocation":"9967:3:3","nodeType":"VariableDeclaration","scope":718,"src":"9959:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":701,"name":"uint256","nodeType":"ElementaryTypeName","src":"9959:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9912:62:3"},"returnParameters":{"id":707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":718,"src":"9998:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":705,"nodeType":"UserDefinedTypeName","pathNode":{"id":704,"name":"buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"9998:6:3"},"referencedDeclaration":205,"src":"9998:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"9997:15:3"},"scope":719,"src":"9894:177:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":720,"src":"441:9632:3","usedErrors":[]}],"src":"32:10042:3"},"id":3},"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol","exportedSymbols":{"BufferChainlink":[719],"CBORChainlink":[1166]},"id":1167,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":721,"literals":["solidity",">=","0.4",".19"],"nodeType":"PragmaDirective","src":"32:25:4"},{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol","file":"./BufferChainlink.sol","id":723,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1167,"sourceUnit":720,"src":"59:54:4","symbolAliases":[{"foreign":{"id":722,"name":"BufferChainlink","nodeType":"Identifier","overloadedDeclarations":[],"src":"67:15:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1166,"linearizedBaseContracts":[1166],"name":"CBORChainlink","nameLocation":"123:13:4","nodeType":"ContractDefinition","nodes":[{"id":727,"libraryName":{"id":724,"name":"BufferChainlink","nodeType":"IdentifierPath","referencedDeclaration":719,"src":"147:15:4"},"nodeType":"UsingForDirective","src":"141:49:4","typeName":{"id":726,"nodeType":"UserDefinedTypeName","pathNode":{"id":725,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"167:22:4"},"referencedDeclaration":205,"src":"167:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}}},{"constant":true,"id":730,"mutability":"constant","name":"MAJOR_TYPE_INT","nameLocation":"217:14:4","nodeType":"VariableDeclaration","scope":1166,"src":"194:41:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":728,"name":"uint8","nodeType":"ElementaryTypeName","src":"194:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"30","id":729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"234:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"private"},{"constant":true,"id":733,"mutability":"constant","name":"MAJOR_TYPE_NEGATIVE_INT","nameLocation":"262:23:4","nodeType":"VariableDeclaration","scope":1166,"src":"239:50:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":731,"name":"uint8","nodeType":"ElementaryTypeName","src":"239:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"31","id":732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"288:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":736,"mutability":"constant","name":"MAJOR_TYPE_BYTES","nameLocation":"316:16:4","nodeType":"VariableDeclaration","scope":1166,"src":"293:43:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":734,"name":"uint8","nodeType":"ElementaryTypeName","src":"293:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"32","id":735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"335:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":true,"id":739,"mutability":"constant","name":"MAJOR_TYPE_STRING","nameLocation":"363:17:4","nodeType":"VariableDeclaration","scope":1166,"src":"340:44:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":737,"name":"uint8","nodeType":"ElementaryTypeName","src":"340:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"33","id":738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"383:1:4","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":742,"mutability":"constant","name":"MAJOR_TYPE_ARRAY","nameLocation":"411:16:4","nodeType":"VariableDeclaration","scope":1166,"src":"388:43:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":740,"name":"uint8","nodeType":"ElementaryTypeName","src":"388:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"34","id":741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"430:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"private"},{"constant":true,"id":745,"mutability":"constant","name":"MAJOR_TYPE_MAP","nameLocation":"458:14:4","nodeType":"VariableDeclaration","scope":1166,"src":"435:41:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":743,"name":"uint8","nodeType":"ElementaryTypeName","src":"435:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"35","id":744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"475:1:4","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"private"},{"constant":true,"id":748,"mutability":"constant","name":"MAJOR_TYPE_TAG","nameLocation":"503:14:4","nodeType":"VariableDeclaration","scope":1166,"src":"480:41:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":746,"name":"uint8","nodeType":"ElementaryTypeName","src":"480:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"36","id":747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"520:1:4","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"visibility":"private"},{"constant":true,"id":751,"mutability":"constant","name":"MAJOR_TYPE_CONTENT_FREE","nameLocation":"548:23:4","nodeType":"VariableDeclaration","scope":1166,"src":"525:50:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":749,"name":"uint8","nodeType":"ElementaryTypeName","src":"525:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"37","id":750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"574:1:4","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"visibility":"private"},{"constant":true,"id":754,"mutability":"constant","name":"TAG_TYPE_BIGNUM","nameLocation":"603:15:4","nodeType":"VariableDeclaration","scope":1166,"src":"580:42:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":752,"name":"uint8","nodeType":"ElementaryTypeName","src":"580:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"32","id":753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"621:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":true,"id":757,"mutability":"constant","name":"TAG_TYPE_NEGATIVE_BIGNUM","nameLocation":"649:24:4","nodeType":"VariableDeclaration","scope":1166,"src":"626:51:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":755,"name":"uint8","nodeType":"ElementaryTypeName","src":"626:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"33","id":756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"676:1:4","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"body":{"id":886,"nodeType":"Block","src":"785:522:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":767,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"794:5:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"3233","id":768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"803:2:4","typeDescriptions":{"typeIdentifier":"t_rational_23_by_1","typeString":"int_const 23"},"value":"23"},"src":"794:11:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":785,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"876:5:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30784646","id":786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"885:4:4","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xFF"},"src":"876:13:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":810,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"988:5:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"307846464646","id":811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"997:6:4","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"value":"0xFFFF"},"src":"988:15:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":835,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"1102:5:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30784646464646464646","id":836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1111:10:4","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xFFFFFFFF"},"src":"1102:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":881,"nodeType":"Block","src":"1216:87:4","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":865,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"1247:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1256:1:4","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1247:10:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":868,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1246:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3237","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1261:2:4","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"1246:17:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1240:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":863,"name":"uint8","nodeType":"ElementaryTypeName","src":"1240:5:4","typeDescriptions":{}}},"id":871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1240:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":860,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"1224:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":862,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":515,"src":"1224:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1224:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":873,"nodeType":"ExpressionStatement","src":"1224:41:4"},{"expression":{"arguments":[{"id":877,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"1287:5:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"38","id":878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1294:1:4","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"}],"expression":{"id":874,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"1273:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":876,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":718,"src":"1273:13:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1273:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":880,"nodeType":"ExpressionStatement","src":"1273:23:4"}]},"id":882,"nodeType":"IfStatement","src":"1098:205:4","trueBody":{"id":859,"nodeType":"Block","src":"1123:87:4","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":843,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"1154:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1163:1:4","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1154:10:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":846,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1153:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3236","id":847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1168:2:4","typeDescriptions":{"typeIdentifier":"t_rational_26_by_1","typeString":"int_const 26"},"value":"26"},"src":"1153:17:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":842,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1147:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":841,"name":"uint8","nodeType":"ElementaryTypeName","src":"1147:5:4","typeDescriptions":{}}},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1147:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":838,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"1131:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":840,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":515,"src":"1131:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1131:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":851,"nodeType":"ExpressionStatement","src":"1131:41:4"},{"expression":{"arguments":[{"id":855,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"1194:5:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"34","id":856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1201:1:4","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}],"expression":{"id":852,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"1180:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":854,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":718,"src":"1180:13:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1180:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":858,"nodeType":"ExpressionStatement","src":"1180:23:4"}]}},"id":883,"nodeType":"IfStatement","src":"984:319:4","trueBody":{"id":834,"nodeType":"Block","src":"1005:87:4","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":818,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"1036:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:4","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1036:10:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":821,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1035:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3235","id":822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:2:4","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"25"},"src":"1035:17:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1029:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":816,"name":"uint8","nodeType":"ElementaryTypeName","src":"1029:5:4","typeDescriptions":{}}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1029:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":813,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"1013:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":815,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":515,"src":"1013:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1013:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":826,"nodeType":"ExpressionStatement","src":"1013:41:4"},{"expression":{"arguments":[{"id":830,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"1076:5:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"32","id":831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1083:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"id":827,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"1062:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":829,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":718,"src":"1062:13:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1062:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":833,"nodeType":"ExpressionStatement","src":"1062:23:4"}]}},"id":884,"nodeType":"IfStatement","src":"872:431:4","trueBody":{"id":809,"nodeType":"Block","src":"891:87:4","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":793,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"922:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"931:1:4","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"922:10:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":796,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"921:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3234","id":797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:2:4","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"921:17:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":791,"name":"uint8","nodeType":"ElementaryTypeName","src":"915:5:4","typeDescriptions":{}}},"id":799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"915:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":788,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"899:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":790,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":515,"src":"899:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"899:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":801,"nodeType":"ExpressionStatement","src":"899:41:4"},{"expression":{"arguments":[{"id":805,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"962:5:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"31","id":806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"969:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":802,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"948:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":804,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":718,"src":"948:13:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"948:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":808,"nodeType":"ExpressionStatement","src":"948:23:4"}]}},"id":885,"nodeType":"IfStatement","src":"791:512:4","trueBody":{"id":784,"nodeType":"Block","src":"807:59:4","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":775,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"838:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"847:1:4","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"838:10:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":778,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"837:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":779,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"852:5:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"837:20:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"831:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":773,"name":"uint8","nodeType":"ElementaryTypeName","src":"831:5:4","typeDescriptions":{}}},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"831:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":770,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"815:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":772,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":515,"src":"815:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"815:44:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":783,"nodeType":"ExpressionStatement","src":"815:44:4"}]}}]},"id":887,"implemented":true,"kind":"function","modifiers":[],"name":"encodeFixedNumeric","nameLocation":"691:18:4","nodeType":"FunctionDefinition","parameters":{"id":765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":760,"mutability":"mutable","name":"buf","nameLocation":"740:3:4","nodeType":"VariableDeclaration","scope":887,"src":"710:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":759,"nodeType":"UserDefinedTypeName","pathNode":{"id":758,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"710:22:4"},"referencedDeclaration":205,"src":"710:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":762,"mutability":"mutable","name":"major","nameLocation":"751:5:4","nodeType":"VariableDeclaration","scope":887,"src":"745:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":761,"name":"uint8","nodeType":"ElementaryTypeName","src":"745:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":764,"mutability":"mutable","name":"value","nameLocation":"765:5:4","nodeType":"VariableDeclaration","scope":887,"src":"758:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":763,"name":"uint64","nodeType":"ElementaryTypeName","src":"758:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"709:62:4"},"returnParameters":{"id":766,"nodeType":"ParameterList","parameters":[],"src":"785:0:4"},"scope":1166,"src":"682:625:4","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":909,"nodeType":"Block","src":"1408:52:4","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":900,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"1437:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1446:1:4","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1437:10:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":903,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1436:12:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3331","id":904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1451:2:4","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"1436:17:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1430:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":898,"name":"uint8","nodeType":"ElementaryTypeName","src":"1430:5:4","typeDescriptions":{}}},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1430:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":895,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":890,"src":"1414:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":897,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":515,"src":"1414:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1414:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":908,"nodeType":"ExpressionStatement","src":"1414:41:4"}]},"id":910,"implemented":true,"kind":"function","modifiers":[],"name":"encodeIndefiniteLengthType","nameLocation":"1320:26:4","nodeType":"FunctionDefinition","parameters":{"id":893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":890,"mutability":"mutable","name":"buf","nameLocation":"1377:3:4","nodeType":"VariableDeclaration","scope":910,"src":"1347:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":889,"nodeType":"UserDefinedTypeName","pathNode":{"id":888,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"1347:22:4"},"referencedDeclaration":205,"src":"1347:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":892,"mutability":"mutable","name":"major","nameLocation":"1388:5:4","nodeType":"VariableDeclaration","scope":910,"src":"1382:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":891,"name":"uint8","nodeType":"ElementaryTypeName","src":"1382:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"1346:48:4"},"returnParameters":{"id":894,"nodeType":"ParameterList","parameters":[],"src":"1408:0:4"},"scope":1166,"src":"1311:149:4","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":938,"nodeType":"Block","src":"1545:155:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":918,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"1554:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307846464646464646464646464646464646","id":919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1562:18:4","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"value":"0xFFFFFFFFFFFFFFFF"},"src":"1554:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":936,"nodeType":"Block","src":"1627:69:4","statements":[{"expression":{"arguments":[{"id":928,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"1654:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":929,"name":"MAJOR_TYPE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"1659:14:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"id":932,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"1682:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1675:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":930,"name":"uint64","nodeType":"ElementaryTypeName","src":"1675:6:4","typeDescriptions":{}}},"id":933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1675:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":927,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"1635:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8,uint64) pure"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1635:54:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":935,"nodeType":"ExpressionStatement","src":"1635:54:4"}]},"id":937,"nodeType":"IfStatement","src":"1551:145:4","trueBody":{"id":926,"nodeType":"Block","src":"1582:39:4","statements":[{"expression":{"arguments":[{"id":922,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"1603:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":923,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"1608:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":921,"name":"encodeBigNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"1590:12:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1590:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":925,"nodeType":"ExpressionStatement","src":"1590:24:4"}]}}]},"id":939,"implemented":true,"kind":"function","modifiers":[],"name":"encodeUInt","nameLocation":"1473:10:4","nodeType":"FunctionDefinition","parameters":{"id":916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":913,"mutability":"mutable","name":"buf","nameLocation":"1514:3:4","nodeType":"VariableDeclaration","scope":939,"src":"1484:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":912,"nodeType":"UserDefinedTypeName","pathNode":{"id":911,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"1484:22:4"},"referencedDeclaration":205,"src":"1484:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":915,"mutability":"mutable","name":"value","nameLocation":"1524:5:4","nodeType":"VariableDeclaration","scope":939,"src":"1519:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":914,"name":"uint","nodeType":"ElementaryTypeName","src":"1519:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1483:47:4"},"returnParameters":{"id":917,"nodeType":"ParameterList","parameters":[],"src":"1545:0:4"},"scope":1166,"src":"1464:236:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1004,"nodeType":"Block","src":"1783:367:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"1792:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":949,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1800:20:4","subExpression":{"hexValue":"30783130303030303030303030303030303030","id":948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1801:19:4","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"value":"0x10000000000000000"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_18446744073709551616_by_1","typeString":"int_const -18446744073709551616"}},"src":"1792:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":957,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"1876:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307846464646464646464646464646464646","id":958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1884:18:4","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551615_by_1","typeString":"int_const 18446744073709551615"},"value":"0xFFFFFFFFFFFFFFFF"},"src":"1876:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":969,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"1958:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1967:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1958:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1000,"nodeType":"Block","src":"2054:92:4","statements":[{"expression":{"arguments":[{"id":986,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"2081:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":987,"name":"MAJOR_TYPE_NEGATIVE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"2086:23:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2126:2:4","subExpression":{"hexValue":"31","id":992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2127:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":994,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"2131:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2126:10:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":991,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2118:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":990,"name":"uint256","nodeType":"ElementaryTypeName","src":"2118:7:4","typeDescriptions":{}}},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2118:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2111:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":988,"name":"uint64","nodeType":"ElementaryTypeName","src":"2111:6:4","typeDescriptions":{}}},"id":997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2111:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":985,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"2062:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8,uint64) pure"}},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2062:77:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":999,"nodeType":"ExpressionStatement","src":"2062:77:4"}]},"id":1001,"nodeType":"IfStatement","src":"1955:191:4","trueBody":{"id":984,"nodeType":"Block","src":"1970:78:4","statements":[{"expression":{"arguments":[{"id":973,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"1997:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":974,"name":"MAJOR_TYPE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"2002:14:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"arguments":[{"id":979,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"2033:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":978,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2025:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":977,"name":"uint256","nodeType":"ElementaryTypeName","src":"2025:7:4","typeDescriptions":{}}},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2025:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2018:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":975,"name":"uint64","nodeType":"ElementaryTypeName","src":"2018:6:4","typeDescriptions":{}}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2018:22:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":972,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"1978:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8,uint64) pure"}},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1978:63:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":983,"nodeType":"ExpressionStatement","src":"1978:63:4"}]}},"id":1002,"nodeType":"IfStatement","src":"1873:273:4","trueBody":{"id":968,"nodeType":"Block","src":"1904:45:4","statements":[{"expression":{"arguments":[{"id":961,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"1925:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"arguments":[{"id":964,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"1935:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1930:4:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":962,"name":"uint","nodeType":"ElementaryTypeName","src":"1930:4:4","typeDescriptions":{}}},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1930:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":960,"name":"encodeBigNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"1912:12:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1912:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":967,"nodeType":"ExpressionStatement","src":"1912:30:4"}]}},"id":1003,"nodeType":"IfStatement","src":"1789:357:4","trueBody":{"id":956,"nodeType":"Block","src":"1822:45:4","statements":[{"expression":{"arguments":[{"id":952,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":942,"src":"1849:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":953,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"1854:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":951,"name":"encodeSignedBigNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"1830:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_int256_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,int256) pure"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1830:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":955,"nodeType":"ExpressionStatement","src":"1830:30:4"}]}}]},"id":1005,"implemented":true,"kind":"function","modifiers":[],"name":"encodeInt","nameLocation":"1713:9:4","nodeType":"FunctionDefinition","parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":942,"mutability":"mutable","name":"buf","nameLocation":"1753:3:4","nodeType":"VariableDeclaration","scope":1005,"src":"1723:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":941,"nodeType":"UserDefinedTypeName","pathNode":{"id":940,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"1723:22:4"},"referencedDeclaration":205,"src":"1723:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"value","nameLocation":"1762:5:4","nodeType":"VariableDeclaration","scope":1005,"src":"1758:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":943,"name":"int","nodeType":"ElementaryTypeName","src":"1758:3:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1722:46:4"},"returnParameters":{"id":946,"nodeType":"ParameterList","parameters":[],"src":"1783:0:4"},"scope":1166,"src":"1704:446:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1029,"nodeType":"Block","src":"2244:97:4","statements":[{"expression":{"arguments":[{"id":1014,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"2269:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":1015,"name":"MAJOR_TYPE_BYTES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":736,"src":"2274:16:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"expression":{"id":1018,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"2299:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2299:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1017,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2292:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1016,"name":"uint64","nodeType":"ElementaryTypeName","src":"2292:6:4","typeDescriptions":{}}},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2292:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1013,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"2250:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8,uint64) pure"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2250:63:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1022,"nodeType":"ExpressionStatement","src":"2250:63:4"},{"expression":{"arguments":[{"id":1026,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"2330:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1023,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"2319:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1025,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"append","nodeType":"MemberAccess","referencedDeclaration":462,"src":"2319:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,bytes memory) pure returns (struct BufferChainlink.buffer memory)"}},"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2319:17:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1028,"nodeType":"ExpressionStatement","src":"2319:17:4"}]},"id":1030,"implemented":true,"kind":"function","modifiers":[],"name":"encodeBytes","nameLocation":"2163:11:4","nodeType":"FunctionDefinition","parameters":{"id":1011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1008,"mutability":"mutable","name":"buf","nameLocation":"2205:3:4","nodeType":"VariableDeclaration","scope":1030,"src":"2175:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1007,"nodeType":"UserDefinedTypeName","pathNode":{"id":1006,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"2175:22:4"},"referencedDeclaration":205,"src":"2175:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1010,"mutability":"mutable","name":"value","nameLocation":"2223:5:4","nodeType":"VariableDeclaration","scope":1030,"src":"2210:18:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1009,"name":"bytes","nodeType":"ElementaryTypeName","src":"2210:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2174:55:4"},"returnParameters":{"id":1012,"nodeType":"ParameterList","parameters":[],"src":"2244:0:4"},"scope":1166,"src":"2154:187:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1060,"nodeType":"Block","src":"2428:115:4","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1048,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1045,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":1043,"name":"MAJOR_TYPE_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"2457:14:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":1044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2475:1:4","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"2457:19:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1046,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2456:21:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1047,"name":"TAG_TYPE_BIGNUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"2480:15:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2456:39:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2450:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1041,"name":"uint8","nodeType":"ElementaryTypeName","src":"2450:5:4","typeDescriptions":{}}},"id":1049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2450:46:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":1038,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"2434:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1040,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":515,"src":"2434:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2434:63:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1051,"nodeType":"ExpressionStatement","src":"2434:63:4"},{"expression":{"arguments":[{"id":1053,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"2515:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"arguments":[{"id":1056,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"2531:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1054,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2520:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"2520:10:4","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2520:17:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1052,"name":"encodeBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"2503:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,bytes memory) pure"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2503:35:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1059,"nodeType":"ExpressionStatement","src":"2503:35:4"}]},"id":1061,"implemented":true,"kind":"function","modifiers":[],"name":"encodeBigNum","nameLocation":"2354:12:4","nodeType":"FunctionDefinition","parameters":{"id":1036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1033,"mutability":"mutable","name":"buf","nameLocation":"2397:3:4","nodeType":"VariableDeclaration","scope":1061,"src":"2367:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1032,"nodeType":"UserDefinedTypeName","pathNode":{"id":1031,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"2367:22:4"},"referencedDeclaration":205,"src":"2367:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1035,"mutability":"mutable","name":"value","nameLocation":"2407:5:4","nodeType":"VariableDeclaration","scope":1061,"src":"2402:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1034,"name":"uint","nodeType":"ElementaryTypeName","src":"2402:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2366:47:4"},"returnParameters":{"id":1037,"nodeType":"ParameterList","parameters":[],"src":"2428:0:4"},"scope":1166,"src":"2345:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1097,"nodeType":"Block","src":"2635:138:4","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1079,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1076,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":1074,"name":"MAJOR_TYPE_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"2664:14:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":1075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2682:1:4","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"2664:19:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1077,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2663:21:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1078,"name":"TAG_TYPE_NEGATIVE_BIGNUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"2687:24:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2663:48:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1073,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2657:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1072,"name":"uint8","nodeType":"ElementaryTypeName","src":"2657:5:4","typeDescriptions":{}}},"id":1080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2657:55:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":1069,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1064,"src":"2641:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1071,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":515,"src":"2641:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure returns (struct BufferChainlink.buffer memory)"}},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2641:72:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1082,"nodeType":"ExpressionStatement","src":"2641:72:4"},{"expression":{"arguments":[{"id":1084,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1064,"src":"2731:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2755:2:4","subExpression":{"hexValue":"31","id":1089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2756:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1091,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"2760:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2755:10:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1087,"name":"uint256","nodeType":"ElementaryTypeName","src":"2747:7:4","typeDescriptions":{}}},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2747:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1085,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2736:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"2736:10:4","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2736:31:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1083,"name":"encodeBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"2719:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,bytes memory) pure"}},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2719:49:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1096,"nodeType":"ExpressionStatement","src":"2719:49:4"}]},"id":1098,"implemented":true,"kind":"function","modifiers":[],"name":"encodeSignedBigNum","nameLocation":"2556:18:4","nodeType":"FunctionDefinition","parameters":{"id":1067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1064,"mutability":"mutable","name":"buf","nameLocation":"2605:3:4","nodeType":"VariableDeclaration","scope":1098,"src":"2575:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1063,"nodeType":"UserDefinedTypeName","pathNode":{"id":1062,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"2575:22:4"},"referencedDeclaration":205,"src":"2575:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1066,"mutability":"mutable","name":"input","nameLocation":"2614:5:4","nodeType":"VariableDeclaration","scope":1098,"src":"2610:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1065,"name":"int","nodeType":"ElementaryTypeName","src":"2610:3:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2574:46:4"},"returnParameters":{"id":1068,"nodeType":"ParameterList","parameters":[],"src":"2635:0:4"},"scope":1166,"src":"2547:226:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1128,"nodeType":"Block","src":"2869:112:4","statements":[{"expression":{"arguments":[{"id":1107,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"2894:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":1108,"name":"MAJOR_TYPE_STRING","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"2899:17:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"expression":{"arguments":[{"id":1113,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"2931:5:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2925:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1111,"name":"bytes","nodeType":"ElementaryTypeName","src":"2925:5:4","typeDescriptions":{}}},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2925:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2925:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1110,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2918:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1109,"name":"uint64","nodeType":"ElementaryTypeName","src":"2918:6:4","typeDescriptions":{}}},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2918:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1106,"name":"encodeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"2875:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8,uint64) pure"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2875:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1118,"nodeType":"ExpressionStatement","src":"2875:71:4"},{"expression":{"arguments":[{"arguments":[{"id":1124,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"2969:5:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1123,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2963:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1122,"name":"bytes","nodeType":"ElementaryTypeName","src":"2963:5:4","typeDescriptions":{}}},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2963:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1119,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"2952:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1121,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"append","nodeType":"MemberAccess","referencedDeclaration":462,"src":"2952:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$205_memory_ptr_$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,bytes memory) pure returns (struct BufferChainlink.buffer memory)"}},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2952:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1127,"nodeType":"ExpressionStatement","src":"2952:24:4"}]},"id":1129,"implemented":true,"kind":"function","modifiers":[],"name":"encodeString","nameLocation":"2786:12:4","nodeType":"FunctionDefinition","parameters":{"id":1104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"buf","nameLocation":"2829:3:4","nodeType":"VariableDeclaration","scope":1129,"src":"2799:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1100,"nodeType":"UserDefinedTypeName","pathNode":{"id":1099,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"2799:22:4"},"referencedDeclaration":205,"src":"2799:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"},{"constant":false,"id":1103,"mutability":"mutable","name":"value","nameLocation":"2848:5:4","nodeType":"VariableDeclaration","scope":1129,"src":"2834:19:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1102,"name":"string","nodeType":"ElementaryTypeName","src":"2834:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2798:56:4"},"returnParameters":{"id":1105,"nodeType":"ParameterList","parameters":[],"src":"2869:0:4"},"scope":1166,"src":"2777:204:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1140,"nodeType":"Block","src":"3054:60:4","statements":[{"expression":{"arguments":[{"id":1136,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"3087:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":1137,"name":"MAJOR_TYPE_ARRAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"3092:16:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1135,"name":"encodeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"3060:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure"}},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3060:49:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1139,"nodeType":"ExpressionStatement","src":"3060:49:4"}]},"id":1141,"implemented":true,"kind":"function","modifiers":[],"name":"startArray","nameLocation":"2994:10:4","nodeType":"FunctionDefinition","parameters":{"id":1133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1132,"mutability":"mutable","name":"buf","nameLocation":"3035:3:4","nodeType":"VariableDeclaration","scope":1141,"src":"3005:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1131,"nodeType":"UserDefinedTypeName","pathNode":{"id":1130,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"3005:22:4"},"referencedDeclaration":205,"src":"3005:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"3004:35:4"},"returnParameters":{"id":1134,"nodeType":"ParameterList","parameters":[],"src":"3054:0:4"},"scope":1166,"src":"2985:129:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1152,"nodeType":"Block","src":"3185:58:4","statements":[{"expression":{"arguments":[{"id":1148,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"3218:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":1149,"name":"MAJOR_TYPE_MAP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"3223:14:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1147,"name":"encodeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"3191:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure"}},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3191:47:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1151,"nodeType":"ExpressionStatement","src":"3191:47:4"}]},"id":1153,"implemented":true,"kind":"function","modifiers":[],"name":"startMap","nameLocation":"3127:8:4","nodeType":"FunctionDefinition","parameters":{"id":1145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1144,"mutability":"mutable","name":"buf","nameLocation":"3166:3:4","nodeType":"VariableDeclaration","scope":1153,"src":"3136:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1143,"nodeType":"UserDefinedTypeName","pathNode":{"id":1142,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"3136:22:4"},"referencedDeclaration":205,"src":"3136:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"3135:35:4"},"returnParameters":{"id":1146,"nodeType":"ParameterList","parameters":[],"src":"3185:0:4"},"scope":1166,"src":"3118:125:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1164,"nodeType":"Block","src":"3317:67:4","statements":[{"expression":{"arguments":[{"id":1160,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"3350:3:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":1161,"name":"MAJOR_TYPE_CONTENT_FREE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":751,"src":"3355:23:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1159,"name":"encodeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"3323:26:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct BufferChainlink.buffer memory,uint8) pure"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3323:56:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1163,"nodeType":"ExpressionStatement","src":"3323:56:4"}]},"id":1165,"implemented":true,"kind":"function","modifiers":[],"name":"endSequence","nameLocation":"3256:11:4","nodeType":"FunctionDefinition","parameters":{"id":1157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1156,"mutability":"mutable","name":"buf","nameLocation":"3298:3:4","nodeType":"VariableDeclaration","scope":1165,"src":"3268:33:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1155,"nodeType":"UserDefinedTypeName","pathNode":{"id":1154,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"3268:22:4"},"referencedDeclaration":205,"src":"3268:22:4","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"src":"3267:35:4"},"returnParameters":{"id":1158,"nodeType":"ParameterList","parameters":[],"src":"3317:0:4"},"scope":1166,"src":"3247:137:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1167,"src":"115:3271:4","usedErrors":[]}],"src":"32:3355:4"},"id":4},"contracts/TwitterVerifier.sol":{"ast":{"absolutePath":"contracts/TwitterVerifier.sol","exportedSymbols":{"BufferChainlink":[719],"CBORChainlink":[1166],"ConfirmedOwner":[19],"ConfirmedOwnerWithProposal":[181],"Functions":[1636],"FunctionsBillingRegistryInterface":[1969],"FunctionsClient":[1879],"FunctionsClientInterface":[1989],"FunctionsOracleInterface":[2081],"OwnableInterface":[197],"TwitterVerifier":[1318],"addressToString":[2187]},"id":1319,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1168,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"32:23:5"},{"absolutePath":"contracts/lib/dev/functions/FunctionsClient.sol","file":"./lib/dev/functions/FunctionsClient.sol","id":1169,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1319,"sourceUnit":1880,"src":"57:49:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol","file":"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol","id":1170,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1319,"sourceUnit":20,"src":"202:58:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/utils/AddressToString.sol","file":"./utils/AddressToString.sol","id":1171,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1319,"sourceUnit":2188,"src":"261:37:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1173,"name":"FunctionsClient","nodeType":"IdentifierPath","referencedDeclaration":1879,"src":"469:15:5"},"id":1174,"nodeType":"InheritanceSpecifier","src":"469:15:5"},{"baseName":{"id":1175,"name":"ConfirmedOwner","nodeType":"IdentifierPath","referencedDeclaration":19,"src":"486:14:5"},"id":1176,"nodeType":"InheritanceSpecifier","src":"486:14:5"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1172,"nodeType":"StructuredDocumentation","src":"300:140:5","text":" @title Functions Copns contract\n @notice This contract is a demonstration of using Functions.\n @notice NOT FOR PRODUCTION USE"},"fullyImplemented":true,"id":1318,"linearizedBaseContracts":[1318,19,181,197,1879,1989],"name":"TwitterVerifier","nameLocation":"450:15:5","nodeType":"ContractDefinition","nodes":[{"id":1180,"libraryName":{"id":1177,"name":"Functions","nodeType":"IdentifierPath","referencedDeclaration":1636,"src":"513:9:5"},"nodeType":"UsingForDirective","src":"507:38:5","typeName":{"id":1179,"nodeType":"UserDefinedTypeName","pathNode":{"id":1178,"name":"Functions.Request","nodeType":"IdentifierPath","referencedDeclaration":1354,"src":"527:17:5"},"referencedDeclaration":1354,"src":"527:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_storage_ptr","typeString":"struct Functions.Request"}}},{"constant":false,"functionSelector":"1aa46f59","id":1182,"mutability":"mutable","name":"latestRequestId","nameLocation":"566:15:5","nodeType":"VariableDeclaration","scope":1318,"src":"551:30:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1181,"name":"bytes32","nodeType":"ElementaryTypeName","src":"551:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"bef3a2f0","id":1184,"mutability":"mutable","name":"latestResponse","nameLocation":"600:14:5","nodeType":"VariableDeclaration","scope":1318,"src":"587:27:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes"},"typeName":{"id":1183,"name":"bytes","nodeType":"ElementaryTypeName","src":"587:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"public"},{"constant":false,"functionSelector":"fffeb84e","id":1186,"mutability":"mutable","name":"latestError","nameLocation":"633:11:5","nodeType":"VariableDeclaration","scope":1318,"src":"620:24:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes"},"typeName":{"id":1185,"name":"bytes","nodeType":"ElementaryTypeName","src":"620:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"public"},{"anonymous":false,"id":1194,"name":"OCRResponse","nameLocation":"657:11:5","nodeType":"EventDefinition","parameters":{"id":1193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1188,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"685:9:5","nodeType":"VariableDeclaration","scope":1194,"src":"669:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1187,"name":"bytes32","nodeType":"ElementaryTypeName","src":"669:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1190,"indexed":false,"mutability":"mutable","name":"result","nameLocation":"702:6:5","nodeType":"VariableDeclaration","scope":1194,"src":"696:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1189,"name":"bytes","nodeType":"ElementaryTypeName","src":"696:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1192,"indexed":false,"mutability":"mutable","name":"err","nameLocation":"716:3:5","nodeType":"VariableDeclaration","scope":1194,"src":"710:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1191,"name":"bytes","nodeType":"ElementaryTypeName","src":"710:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"668:52:5"},"src":"651:70:5"},{"body":{"id":1207,"nodeType":"Block","src":"981:2:5","statements":[]},"documentation":{"id":1195,"nodeType":"StructuredDocumentation","src":"727:156:5","text":" @notice Executes once when a contract is created to initialize state variables\n @param oracle - The FunctionsOracle contract"},"id":1208,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1200,"name":"oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"946:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1201,"kind":"baseConstructorSpecifier","modifierName":{"id":1199,"name":"FunctionsClient","nodeType":"IdentifierPath","referencedDeclaration":1879,"src":"930:15:5"},"nodeType":"ModifierInvocation","src":"930:23:5"},{"arguments":[{"expression":{"id":1203,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"969:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"969:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1205,"kind":"baseConstructorSpecifier","modifierName":{"id":1202,"name":"ConfirmedOwner","nodeType":"IdentifierPath","referencedDeclaration":19,"src":"954:14:5"},"nodeType":"ModifierInvocation","src":"954:26:5"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1197,"mutability":"mutable","name":"oracle","nameLocation":"917:6:5","nodeType":"VariableDeclaration","scope":1208,"src":"909:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1196,"name":"address","nodeType":"ElementaryTypeName","src":"909:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"899:30:5"},"returnParameters":{"id":1206,"nodeType":"ParameterList","parameters":[],"src":"981:0:5"},"scope":1318,"src":"888:95:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1278,"nodeType":"Block","src":"1467:1129:5","statements":[{"assignments":[1231],"declarations":[{"constant":false,"id":1231,"mutability":"mutable","name":"req","nameLocation":"1502:3:5","nodeType":"VariableDeclaration","scope":1278,"src":"1477:28:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request"},"typeName":{"id":1230,"nodeType":"UserDefinedTypeName","pathNode":{"id":1229,"name":"Functions.Request","nodeType":"IdentifierPath","referencedDeclaration":1354,"src":"1477:17:5"},"referencedDeclaration":1354,"src":"1477:17:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_storage_ptr","typeString":"struct Functions.Request"}},"visibility":"internal"}],"id":1232,"nodeType":"VariableDeclarationStatement","src":"1477:28:5"},{"expression":{"arguments":[{"expression":{"expression":{"id":1236,"name":"Functions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"1550:9:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Functions_$1636_$","typeString":"type(library Functions)"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"Location","nodeType":"MemberAccess","referencedDeclaration":1335,"src":"1550:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Location_$1335_$","typeString":"type(enum Functions.Location)"}},"id":1238,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Inline","nodeType":"MemberAccess","referencedDeclaration":1333,"src":"1550:25:5","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}},{"expression":{"expression":{"id":1239,"name":"Functions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"1589:9:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Functions_$1636_$","typeString":"type(library Functions)"}},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"CodeLanguage","nodeType":"MemberAccess","referencedDeclaration":1337,"src":"1589:22:5","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CodeLanguage_$1337_$","typeString":"type(enum Functions.CodeLanguage)"}},"id":1241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"JavaScript","nodeType":"MemberAccess","referencedDeclaration":1336,"src":"1589:33:5","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$1337","typeString":"enum Functions.CodeLanguage"}},{"id":1242,"name":"source","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"1636:6:5","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"},{"typeIdentifier":"t_enum$_CodeLanguage_$1337","typeString":"enum Functions.CodeLanguage"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"expression":{"id":1233,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"1515:3:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"initializeRequest","nodeType":"MemberAccess","referencedDeclaration":1560,"src":"1515:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$1354_memory_ptr_$_t_enum$_Location_$1335_$_t_enum$_CodeLanguage_$1337_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_Request_$1354_memory_ptr_$","typeString":"function (struct Functions.Request memory,enum Functions.Location,enum Functions.CodeLanguage,string memory) pure"}},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1515:137:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1244,"nodeType":"ExpressionStatement","src":"1515:137:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1245,"name":"secrets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"1666:7:5","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1666:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1683:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1666:18:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1255,"nodeType":"IfStatement","src":"1662:53:5","trueBody":{"expression":{"arguments":[{"id":1252,"name":"secrets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"1707:7:5","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":1249,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"1686:3:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1251,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"addInlineSecrets","nodeType":"MemberAccess","referencedDeclaration":1610,"src":"1686:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$1354_memory_ptr_$_t_bytes_memory_ptr_$returns$__$bound_to$_t_struct$_Request_$1354_memory_ptr_$","typeString":"function (struct Functions.Request memory,bytes memory) pure"}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1686:29:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1254,"nodeType":"ExpressionStatement","src":"1686:29:5"}},{"expression":{"arguments":[{"id":1259,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"2365:4:5","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string calldata[] calldata"}],"expression":{"id":1256,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"2353:3:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1258,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"addArgs","nodeType":"MemberAccess","referencedDeclaration":1635,"src":"2353:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$1354_memory_ptr_$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$returns$__$bound_to$_t_struct$_Request_$1354_memory_ptr_$","typeString":"function (struct Functions.Request memory,string memory[] memory) pure"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2353:17:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1261,"nodeType":"ExpressionStatement","src":"2353:17:5"},{"assignments":[1263],"declarations":[{"constant":false,"id":1263,"mutability":"mutable","name":"assignedReqID","nameLocation":"2389:13:5","nodeType":"VariableDeclaration","scope":1278,"src":"2381:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1262,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2381:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1271,"initialValue":{"arguments":[{"id":1265,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"2430:3:5","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},{"id":1266,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"2447:14:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":1267,"name":"gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1220,"src":"2475:8:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"expression":{"id":1268,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"2497:2:5","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"gasprice","nodeType":"MemberAccess","src":"2497:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1264,"name":"sendRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"2405:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Request_$1354_memory_ptr_$_t_uint64_$_t_uint32_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct Functions.Request memory,uint64,uint32,uint256) returns (bytes32)"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2405:113:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2381:137:5"},{"expression":{"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1272,"name":"latestRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"2528:15:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1273,"name":"assignedReqID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"2546:13:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2528:31:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1275,"nodeType":"ExpressionStatement","src":"2528:31:5"},{"expression":{"id":1276,"name":"assignedReqID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"2576:13:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1226,"id":1277,"nodeType":"Return","src":"2569:20:5"}]},"documentation":{"id":1209,"nodeType":"StructuredDocumentation","src":"989:256:5","text":" @notice Send a simple request\n @param source JavaScript source code\n @param secrets Encrypted secrets payload\n @param args List of arguments accessible from within the source code\n @param subscriptionId Billing ID"},"functionSelector":"27714589","id":1279,"implemented":true,"kind":"function","modifiers":[{"id":1223,"kind":"modifierInvocation","modifierName":{"id":1222,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":180,"src":"1439:9:5"},"nodeType":"ModifierInvocation","src":"1439:9:5"}],"name":"executeRequest","nameLocation":"1259:14:5","nodeType":"FunctionDefinition","parameters":{"id":1221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1211,"mutability":"mutable","name":"source","nameLocation":"1299:6:5","nodeType":"VariableDeclaration","scope":1279,"src":"1283:22:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":1210,"name":"string","nodeType":"ElementaryTypeName","src":"1283:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1213,"mutability":"mutable","name":"secrets","nameLocation":"1330:7:5","nodeType":"VariableDeclaration","scope":1279,"src":"1315:22:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1212,"name":"bytes","nodeType":"ElementaryTypeName","src":"1315:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1216,"mutability":"mutable","name":"args","nameLocation":"1365:4:5","nodeType":"VariableDeclaration","scope":1279,"src":"1347:22:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_string_calldata_ptr_$dyn_calldata_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":1214,"name":"string","nodeType":"ElementaryTypeName","src":"1347:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":1215,"nodeType":"ArrayTypeName","src":"1347:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":1218,"mutability":"mutable","name":"subscriptionId","nameLocation":"1386:14:5","nodeType":"VariableDeclaration","scope":1279,"src":"1379:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1217,"name":"uint64","nodeType":"ElementaryTypeName","src":"1379:6:5","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1220,"mutability":"mutable","name":"gasLimit","nameLocation":"1417:8:5","nodeType":"VariableDeclaration","scope":1279,"src":"1410:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1219,"name":"uint32","nodeType":"ElementaryTypeName","src":"1410:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1273:158:5"},"returnParameters":{"id":1226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1279,"src":"1458:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1224,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1458:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1457:9:5"},"scope":1318,"src":"1250:1346:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1767],"body":{"id":1304,"nodeType":"Block","src":"3134:148:5","statements":[{"expression":{"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1290,"name":"latestResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"3171:14:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1291,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"3188:8:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"3171:25:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":1293,"nodeType":"ExpressionStatement","src":"3171:25:5"},{"expression":{"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1294,"name":"latestError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1186,"src":"3206:11:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1295,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"3220:3:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"3206:17:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":1297,"nodeType":"ExpressionStatement","src":"3206:17:5"},{"eventCall":{"arguments":[{"id":1299,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"3250:9:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1300,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"3261:8:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1301,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"3271:3:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1298,"name":"OCRResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"3238:11:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory,bytes memory)"}},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3238:37:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1303,"nodeType":"EmitStatement","src":"3233:42:5"}]},"documentation":{"id":1280,"nodeType":"StructuredDocumentation","src":"2602:395:5","text":" @notice Callback that is invoked once the DON has resolved the request or hit an error\n @param requestId The request ID, returned by sendRequest()\n @param response Aggregated response from the user code\n @param err Aggregated error from the user code or from the execution pipeline\n Either response or error parameter will be set, but never both"},"id":1305,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRequest","nameLocation":"3011:14:5","nodeType":"FunctionDefinition","overrides":{"id":1288,"nodeType":"OverrideSpecifier","overrides":[],"src":"3125:8:5"},"parameters":{"id":1287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1282,"mutability":"mutable","name":"requestId","nameLocation":"3043:9:5","nodeType":"VariableDeclaration","scope":1305,"src":"3035:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1281,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3035:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1284,"mutability":"mutable","name":"response","nameLocation":"3075:8:5","nodeType":"VariableDeclaration","scope":1305,"src":"3062:21:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1283,"name":"bytes","nodeType":"ElementaryTypeName","src":"3062:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1286,"mutability":"mutable","name":"err","nameLocation":"3106:3:5","nodeType":"VariableDeclaration","scope":1305,"src":"3093:16:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1285,"name":"bytes","nodeType":"ElementaryTypeName","src":"3093:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3025:90:5"},"returnParameters":{"id":1289,"nodeType":"ParameterList","parameters":[],"src":"3134:0:5"},"scope":1318,"src":"3002:280:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1316,"nodeType":"Block","src":"3350:34:5","statements":[{"expression":{"arguments":[{"id":1313,"name":"oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"3370:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1312,"name":"setOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"3360:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3360:17:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1315,"nodeType":"ExpressionStatement","src":"3360:17:5"}]},"functionSelector":"f7023bb6","id":1317,"implemented":true,"kind":"function","modifiers":[{"id":1310,"kind":"modifierInvocation","modifierName":{"id":1309,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":180,"src":"3340:9:5"},"nodeType":"ModifierInvocation","src":"3340:9:5"}],"name":"updateOracleAddress","nameLocation":"3297:19:5","nodeType":"FunctionDefinition","parameters":{"id":1308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1307,"mutability":"mutable","name":"oracle","nameLocation":"3325:6:5","nodeType":"VariableDeclaration","scope":1317,"src":"3317:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1306,"name":"address","nodeType":"ElementaryTypeName","src":"3317:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3316:16:5"},"returnParameters":{"id":1311,"nodeType":"ParameterList","parameters":[],"src":"3350:0:5"},"scope":1318,"src":"3288:96:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":1319,"src":"441:2945:5","usedErrors":[1356,1360,1362,1661,1663,1665]}],"src":"32:3355:5"},"id":5},"contracts/lib/dev/functions/Functions.sol":{"ast":{"absolutePath":"contracts/lib/dev/functions/Functions.sol","exportedSymbols":{"BufferChainlink":[719],"CBORChainlink":[1166],"Functions":[1636]},"id":1637,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1320,"literals":["solidity","^","0.8",".6"],"nodeType":"PragmaDirective","src":"32:23:6"},{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol","file":"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol","id":1322,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1637,"sourceUnit":1167,"src":"57:85:6","symbolAliases":[{"foreign":{"id":1321,"name":"CBORChainlink","nodeType":"Identifier","overloadedDeclarations":[],"src":"65:13:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol","file":"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol","id":1324,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1637,"sourceUnit":720,"src":"143:89:6","symbolAliases":[{"foreign":{"id":1323,"name":"BufferChainlink","nodeType":"Identifier","overloadedDeclarations":[],"src":"151:15:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1325,"nodeType":"StructuredDocumentation","src":"234:49:6","text":" @title Library for Chainlink Functions"},"fullyImplemented":true,"id":1636,"linearizedBaseContracts":[1636],"name":"Functions","nameLocation":"292:9:6","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1328,"mutability":"constant","name":"DEFAULT_BUFFER_SIZE","nameLocation":"332:19:6","nodeType":"VariableDeclaration","scope":1636,"src":"306:51:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1326,"name":"uint256","nodeType":"ElementaryTypeName","src":"306:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323536","id":1327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"354:3:6","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"visibility":"internal"},{"id":1332,"libraryName":{"id":1329,"name":"CBORChainlink","nodeType":"IdentifierPath","referencedDeclaration":1166,"src":"368:13:6"},"nodeType":"UsingForDirective","src":"362:47:6","typeName":{"id":1331,"nodeType":"UserDefinedTypeName","pathNode":{"id":1330,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"386:22:6"},"referencedDeclaration":205,"src":"386:22:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}}},{"canonicalName":"Functions.Location","id":1335,"members":[{"id":1333,"name":"Inline","nameLocation":"433:6:6","nodeType":"EnumValue","src":"433:6:6"},{"id":1334,"name":"Remote","nameLocation":"445:6:6","nodeType":"EnumValue","src":"445:6:6"}],"name":"Location","nameLocation":"418:8:6","nodeType":"EnumDefinition","src":"413:42:6"},{"canonicalName":"Functions.CodeLanguage","id":1337,"members":[{"id":1336,"name":"JavaScript","nameLocation":"483:10:6","nodeType":"EnumValue","src":"483:10:6"}],"name":"CodeLanguage","nameLocation":"464:12:6","nodeType":"EnumDefinition","src":"459:90:6"},{"canonicalName":"Functions.Request","id":1354,"members":[{"constant":false,"id":1340,"mutability":"mutable","name":"codeLocation","nameLocation":"583:12:6","nodeType":"VariableDeclaration","scope":1354,"src":"574:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"},"typeName":{"id":1339,"nodeType":"UserDefinedTypeName","pathNode":{"id":1338,"name":"Location","nodeType":"IdentifierPath","referencedDeclaration":1335,"src":"574:8:6"},"referencedDeclaration":1335,"src":"574:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}},"visibility":"internal"},{"constant":false,"id":1343,"mutability":"mutable","name":"secretsLocation","nameLocation":"610:15:6","nodeType":"VariableDeclaration","scope":1354,"src":"601:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"},"typeName":{"id":1342,"nodeType":"UserDefinedTypeName","pathNode":{"id":1341,"name":"Location","nodeType":"IdentifierPath","referencedDeclaration":1335,"src":"601:8:6"},"referencedDeclaration":1335,"src":"601:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}},"visibility":"internal"},{"constant":false,"id":1346,"mutability":"mutable","name":"language","nameLocation":"644:8:6","nodeType":"VariableDeclaration","scope":1354,"src":"631:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$1337","typeString":"enum Functions.CodeLanguage"},"typeName":{"id":1345,"nodeType":"UserDefinedTypeName","pathNode":{"id":1344,"name":"CodeLanguage","nodeType":"IdentifierPath","referencedDeclaration":1337,"src":"631:12:6"},"referencedDeclaration":1337,"src":"631:12:6","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$1337","typeString":"enum Functions.CodeLanguage"}},"visibility":"internal"},{"constant":false,"id":1348,"mutability":"mutable","name":"source","nameLocation":"665:6:6","nodeType":"VariableDeclaration","scope":1354,"src":"658:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1347,"name":"string","nodeType":"ElementaryTypeName","src":"658:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1350,"mutability":"mutable","name":"secrets","nameLocation":"745:7:6","nodeType":"VariableDeclaration","scope":1354,"src":"739:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1349,"name":"bytes","nodeType":"ElementaryTypeName","src":"739:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1353,"mutability":"mutable","name":"args","nameLocation":"840:4:6","nodeType":"VariableDeclaration","scope":1354,"src":"831:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":1351,"name":"string","nodeType":"ElementaryTypeName","src":"831:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":1352,"nodeType":"ArrayTypeName","src":"831:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"name":"Request","nameLocation":"560:7:6","nodeType":"StructDefinition","scope":1636,"src":"553:296:6","visibility":"public"},{"id":1356,"name":"EmptySource","nameLocation":"859:11:6","nodeType":"ErrorDefinition","parameters":{"id":1355,"nodeType":"ParameterList","parameters":[],"src":"870:2:6"},"src":"853:20:6"},{"id":1358,"name":"EmptyUrl","nameLocation":"882:8:6","nodeType":"ErrorDefinition","parameters":{"id":1357,"nodeType":"ParameterList","parameters":[],"src":"890:2:6"},"src":"876:17:6"},{"id":1360,"name":"EmptySecrets","nameLocation":"902:12:6","nodeType":"ErrorDefinition","parameters":{"id":1359,"nodeType":"ParameterList","parameters":[],"src":"914:2:6"},"src":"896:21:6"},{"id":1362,"name":"EmptyArgs","nameLocation":"926:9:6","nodeType":"ErrorDefinition","parameters":{"id":1361,"nodeType":"ParameterList","parameters":[],"src":"935:2:6"},"src":"920:18:6"},{"body":{"id":1514,"nodeType":"Block","src":"1156:784:6","statements":[{"assignments":[1375],"declarations":[{"constant":false,"id":1375,"mutability":"mutable","name":"buf","nameLocation":"1192:3:6","nodeType":"VariableDeclaration","scope":1514,"src":"1162:33:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer"},"typeName":{"id":1374,"nodeType":"UserDefinedTypeName","pathNode":{"id":1373,"name":"BufferChainlink.buffer","nodeType":"IdentifierPath","referencedDeclaration":205,"src":"1162:22:6"},"referencedDeclaration":205,"src":"1162:22:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_storage_ptr","typeString":"struct BufferChainlink.buffer"}},"visibility":"internal"}],"id":1376,"nodeType":"VariableDeclarationStatement","src":"1162:33:6"},{"expression":{"arguments":[{"id":1380,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1222:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},{"id":1381,"name":"DEFAULT_BUFFER_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"1227:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1377,"name":"BufferChainlink","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"1201:15:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BufferChainlink_$719_$","typeString":"type(library BufferChainlink)"}},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"init","nodeType":"MemberAccess","referencedDeclaration":243,"src":"1201:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure returns (struct BufferChainlink.buffer memory)"}},"id":1382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1201:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1383,"nodeType":"ExpressionStatement","src":"1201:46:6"},{"expression":{"arguments":[{"hexValue":"636f64654c6f636174696f6e","id":1387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1271:14:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_82e791741c7274b123c7599c398a59441cc81a8ed229387daff72172292ba931","typeString":"literal_string \"codeLocation\""},"value":"codeLocation"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_82e791741c7274b123c7599c398a59441cc81a8ed229387daff72172292ba931","typeString":"literal_string \"codeLocation\""}],"expression":{"id":1384,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1254:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1386,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":1129,"src":"1254:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1254:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1389,"nodeType":"ExpressionStatement","src":"1254:32:6"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":1395,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"1315:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1396,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"codeLocation","nodeType":"MemberAccess","referencedDeclaration":1340,"src":"1315:17:6","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}],"id":1394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1307:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1393,"name":"uint256","nodeType":"ElementaryTypeName","src":"1307:7:6","typeDescriptions":{}}},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1307:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1390,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1292:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1392,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"encodeUInt","nodeType":"MemberAccess","referencedDeclaration":939,"src":"1292:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":1398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1292:42:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1399,"nodeType":"ExpressionStatement","src":"1292:42:6"},{"expression":{"arguments":[{"hexValue":"6c616e6775616765","id":1403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1358:10:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_829231cb167e02f32beea96e7533af0ebdf9e1f7ccf9a7270e717c48fe6f0e8e","typeString":"literal_string \"language\""},"value":"language"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_829231cb167e02f32beea96e7533af0ebdf9e1f7ccf9a7270e717c48fe6f0e8e","typeString":"literal_string \"language\""}],"expression":{"id":1400,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1341:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1402,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":1129,"src":"1341:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":1404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1341:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1405,"nodeType":"ExpressionStatement","src":"1341:28:6"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":1411,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"1398:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1412,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"language","nodeType":"MemberAccess","referencedDeclaration":1346,"src":"1398:13:6","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$1337","typeString":"enum Functions.CodeLanguage"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_CodeLanguage_$1337","typeString":"enum Functions.CodeLanguage"}],"id":1410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1390:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1409,"name":"uint256","nodeType":"ElementaryTypeName","src":"1390:7:6","typeDescriptions":{}}},"id":1413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1390:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1406,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1375:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"encodeUInt","nodeType":"MemberAccess","referencedDeclaration":939,"src":"1375:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1375:38:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1415,"nodeType":"ExpressionStatement","src":"1375:38:6"},{"expression":{"arguments":[{"hexValue":"736f75726365","id":1419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1437:8:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_f7e3126f87228afb82c9b18537eed25aaeb8171a78814781c26ed2cfeff27e69","typeString":"literal_string \"source\""},"value":"source"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f7e3126f87228afb82c9b18537eed25aaeb8171a78814781c26ed2cfeff27e69","typeString":"literal_string \"source\""}],"expression":{"id":1416,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1420:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1418,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":1129,"src":"1420:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1420:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1421,"nodeType":"ExpressionStatement","src":"1420:26:6"},{"expression":{"arguments":[{"expression":{"id":1425,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"1469:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"source","nodeType":"MemberAccess","referencedDeclaration":1348,"src":"1469:11:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1422,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1452:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1424,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":1129,"src":"1452:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1452:29:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1428,"nodeType":"ExpressionStatement","src":"1452:29:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1429,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"1492:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1430,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"args","nodeType":"MemberAccess","referencedDeclaration":1353,"src":"1492:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1492:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1511:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1492:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1474,"nodeType":"IfStatement","src":"1488:217:6","trueBody":{"id":1473,"nodeType":"Block","src":"1514:191:6","statements":[{"expression":{"arguments":[{"hexValue":"61726773","id":1437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1539:6:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_e5edaa566e23eea054bbd292b7924839b5627321873e67e30cd0052468eaf099","typeString":"literal_string \"args\""},"value":"args"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e5edaa566e23eea054bbd292b7924839b5627321873e67e30cd0052468eaf099","typeString":"literal_string \"args\""}],"expression":{"id":1434,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1522:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1436,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":1129,"src":"1522:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1522:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1439,"nodeType":"ExpressionStatement","src":"1522:24:6"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1440,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1554:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"startArray","nodeType":"MemberAccess","referencedDeclaration":1141,"src":"1554:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory) pure"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1554:16:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1444,"nodeType":"ExpressionStatement","src":"1554:16:6"},{"body":{"id":1466,"nodeType":"Block","src":"1625:49:6","statements":[{"expression":{"arguments":[{"baseExpression":{"expression":{"id":1460,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"1652:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1461,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"args","nodeType":"MemberAccess","referencedDeclaration":1353,"src":"1652:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":1463,"indexExpression":{"id":1462,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"1662:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1652:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1457,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1635:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1459,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":1129,"src":"1635:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1635:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1465,"nodeType":"ExpressionStatement","src":"1635:30:6"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1449,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"1598:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":1450,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"1602:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1451,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"args","nodeType":"MemberAccess","referencedDeclaration":1353,"src":"1602:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1602:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1598:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1467,"initializationExpression":{"assignments":[1446],"declarations":[{"constant":false,"id":1446,"mutability":"mutable","name":"i","nameLocation":"1591:1:6","nodeType":"VariableDeclaration","scope":1467,"src":"1583:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1445,"name":"uint256","nodeType":"ElementaryTypeName","src":"1583:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1448,"initialValue":{"hexValue":"30","id":1447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1595:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1583:13:6"},"loopExpression":{"expression":{"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1620:3:6","subExpression":{"id":1454,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"1620:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1456,"nodeType":"ExpressionStatement","src":"1620:3:6"},"nodeType":"ForStatement","src":"1578:96:6"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1468,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1681:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1470,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"endSequence","nodeType":"MemberAccess","referencedDeclaration":1165,"src":"1681:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory) pure"}},"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1681:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1472,"nodeType":"ExpressionStatement","src":"1681:17:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1475,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"1715:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1476,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"secrets","nodeType":"MemberAccess","referencedDeclaration":1350,"src":"1715:12:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1715:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1715:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1510,"nodeType":"IfStatement","src":"1711:204:6","trueBody":{"id":1509,"nodeType":"Block","src":"1740:175:6","statements":[{"expression":{"arguments":[{"hexValue":"736563726574734c6f636174696f6e","id":1483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1765:17:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc4236fa30b862c671ead413b1a0f61e653ce5b99e29091ee0dc6fc114ee9cc8","typeString":"literal_string \"secretsLocation\""},"value":"secretsLocation"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_fc4236fa30b862c671ead413b1a0f61e653ce5b99e29091ee0dc6fc114ee9cc8","typeString":"literal_string \"secretsLocation\""}],"expression":{"id":1480,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1748:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1482,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":1129,"src":"1748:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1748:35:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1485,"nodeType":"ExpressionStatement","src":"1748:35:6"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":1491,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"1814:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1492,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"secretsLocation","nodeType":"MemberAccess","referencedDeclaration":1343,"src":"1814:20:6","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}],"id":1490,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1806:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1489,"name":"uint256","nodeType":"ElementaryTypeName","src":"1806:7:6","typeDescriptions":{}}},"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1806:29:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1486,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1791:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1488,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"encodeUInt","nodeType":"MemberAccess","referencedDeclaration":939,"src":"1791:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_uint256_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,uint256) pure"}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1791:45:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1495,"nodeType":"ExpressionStatement","src":"1791:45:6"},{"expression":{"arguments":[{"hexValue":"73656372657473","id":1499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1861:9:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_d66480a2fe9622f21e4ac7cf8871545e676a686cade1079d79e2fb1df6a4f3ac","typeString":"literal_string \"secrets\""},"value":"secrets"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d66480a2fe9622f21e4ac7cf8871545e676a686cade1079d79e2fb1df6a4f3ac","typeString":"literal_string \"secrets\""}],"expression":{"id":1496,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1844:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1498,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"encodeString","nodeType":"MemberAccess","referencedDeclaration":1129,"src":"1844:16:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_string_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,string memory) pure"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1844:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1501,"nodeType":"ExpressionStatement","src":"1844:27:6"},{"expression":{"arguments":[{"expression":{"id":1505,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"1895:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1506,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"secrets","nodeType":"MemberAccess","referencedDeclaration":1350,"src":"1895:12:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1502,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1879:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1504,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"encodeBytes","nodeType":"MemberAccess","referencedDeclaration":1030,"src":"1879:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$205_memory_ptr_$_t_bytes_memory_ptr_$returns$__$bound_to$_t_struct$_buffer_$205_memory_ptr_$","typeString":"function (struct BufferChainlink.buffer memory,bytes memory) pure"}},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1879:29:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1508,"nodeType":"ExpressionStatement","src":"1879:29:6"}]}},{"expression":{"expression":{"id":1511,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"1928:3:6","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$205_memory_ptr","typeString":"struct BufferChainlink.buffer memory"}},"id":1512,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":202,"src":"1928:7:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1370,"id":1513,"nodeType":"Return","src":"1921:14:6"}]},"documentation":{"id":1363,"nodeType":"StructuredDocumentation","src":"942:133:6","text":" @notice Encodes a Request to CBOR encoded bytes\n @param self The request to encode\n @return CBOR encoded bytes"},"id":1515,"implemented":true,"kind":"function","modifiers":[],"name":"encodeCBOR","nameLocation":"1087:10:6","nodeType":"FunctionDefinition","parameters":{"id":1367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1366,"mutability":"mutable","name":"self","nameLocation":"1113:4:6","nodeType":"VariableDeclaration","scope":1515,"src":"1098:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request"},"typeName":{"id":1365,"nodeType":"UserDefinedTypeName","pathNode":{"id":1364,"name":"Request","nodeType":"IdentifierPath","referencedDeclaration":1354,"src":"1098:7:6"},"referencedDeclaration":1354,"src":"1098:7:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_storage_ptr","typeString":"struct Functions.Request"}},"visibility":"internal"}],"src":"1097:21:6"},"returnParameters":{"id":1370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1369,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1515,"src":"1142:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1368,"name":"bytes","nodeType":"ElementaryTypeName","src":"1142:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1141:14:6"},"scope":1636,"src":"1078:862:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1559,"nodeType":"Block","src":"2437:153:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1532,"name":"source","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"2453:6:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1531,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2447:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1530,"name":"bytes","nodeType":"ElementaryTypeName","src":"2447:5:6","typeDescriptions":{}}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2447:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2447:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2471:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2447:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1540,"nodeType":"IfStatement","src":"2443:51:6","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1537,"name":"EmptySource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"2481:11:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2481:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1539,"nodeType":"RevertStatement","src":"2474:20:6"}},{"expression":{"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1541,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"2501:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1543,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"codeLocation","nodeType":"MemberAccess","referencedDeclaration":1340,"src":"2501:17:6","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1544,"name":"location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"2521:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}},"src":"2501:28:6","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}},"id":1546,"nodeType":"ExpressionStatement","src":"2501:28:6"},{"expression":{"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1547,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"2535:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1549,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"language","nodeType":"MemberAccess","referencedDeclaration":1346,"src":"2535:13:6","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$1337","typeString":"enum Functions.CodeLanguage"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1550,"name":"language","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"2551:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$1337","typeString":"enum Functions.CodeLanguage"}},"src":"2535:24:6","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$1337","typeString":"enum Functions.CodeLanguage"}},"id":1552,"nodeType":"ExpressionStatement","src":"2535:24:6"},{"expression":{"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1553,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1519,"src":"2565:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1555,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"source","nodeType":"MemberAccess","referencedDeclaration":1348,"src":"2565:11:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1556,"name":"source","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"2579:6:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2565:20:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":1558,"nodeType":"ExpressionStatement","src":"2565:20:6"}]},"documentation":{"id":1516,"nodeType":"StructuredDocumentation","src":"1944:344:6","text":" @notice Initializes a Chainlink Functions Request\n @dev Sets the codeLocation and code on the request\n @param self The uninitialized request\n @param location The user provided source code location\n @param language The programming language of the user code\n @param source The user provided source code or a url"},"id":1560,"implemented":true,"kind":"function","modifiers":[],"name":"initializeRequest","nameLocation":"2300:17:6","nodeType":"FunctionDefinition","parameters":{"id":1528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"self","nameLocation":"2338:4:6","nodeType":"VariableDeclaration","scope":1560,"src":"2323:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request"},"typeName":{"id":1518,"nodeType":"UserDefinedTypeName","pathNode":{"id":1517,"name":"Request","nodeType":"IdentifierPath","referencedDeclaration":1354,"src":"2323:7:6"},"referencedDeclaration":1354,"src":"2323:7:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_storage_ptr","typeString":"struct Functions.Request"}},"visibility":"internal"},{"constant":false,"id":1522,"mutability":"mutable","name":"location","nameLocation":"2357:8:6","nodeType":"VariableDeclaration","scope":1560,"src":"2348:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"},"typeName":{"id":1521,"nodeType":"UserDefinedTypeName","pathNode":{"id":1520,"name":"Location","nodeType":"IdentifierPath","referencedDeclaration":1335,"src":"2348:8:6"},"referencedDeclaration":1335,"src":"2348:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}},"visibility":"internal"},{"constant":false,"id":1525,"mutability":"mutable","name":"language","nameLocation":"2384:8:6","nodeType":"VariableDeclaration","scope":1560,"src":"2371:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$1337","typeString":"enum Functions.CodeLanguage"},"typeName":{"id":1524,"nodeType":"UserDefinedTypeName","pathNode":{"id":1523,"name":"CodeLanguage","nodeType":"IdentifierPath","referencedDeclaration":1337,"src":"2371:12:6"},"referencedDeclaration":1337,"src":"2371:12:6","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$1337","typeString":"enum Functions.CodeLanguage"}},"visibility":"internal"},{"constant":false,"id":1527,"mutability":"mutable","name":"source","nameLocation":"2412:6:6","nodeType":"VariableDeclaration","scope":1560,"src":"2398:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1526,"name":"string","nodeType":"ElementaryTypeName","src":"2398:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2317:105:6"},"returnParameters":{"id":1529,"nodeType":"ParameterList","parameters":[],"src":"2437:0:6"},"scope":1636,"src":"2291:299:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1578,"nodeType":"Block","src":"2950:94:6","statements":[{"expression":{"arguments":[{"id":1570,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"2974:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},{"expression":{"id":1571,"name":"Location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1335,"src":"2980:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Location_$1335_$","typeString":"type(enum Functions.Location)"}},"id":1572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Inline","nodeType":"MemberAccess","referencedDeclaration":1333,"src":"2980:15:6","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}},{"expression":{"id":1573,"name":"CodeLanguage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1337,"src":"2997:12:6","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CodeLanguage_$1337_$","typeString":"type(enum Functions.CodeLanguage)"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"JavaScript","nodeType":"MemberAccess","referencedDeclaration":1336,"src":"2997:23:6","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$1337","typeString":"enum Functions.CodeLanguage"}},{"id":1575,"name":"javaScriptSource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"3022:16:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"},{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"},{"typeIdentifier":"t_enum$_CodeLanguage_$1337","typeString":"enum Functions.CodeLanguage"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1569,"name":"initializeRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"2956:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$1354_memory_ptr_$_t_enum$_Location_$1335_$_t_enum$_CodeLanguage_$1337_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct Functions.Request memory,enum Functions.Location,enum Functions.CodeLanguage,string memory) pure"}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2956:83:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1577,"nodeType":"ExpressionStatement","src":"2956:83:6"}]},"documentation":{"id":1561,"nodeType":"StructuredDocumentation","src":"2594:240:6","text":" @notice Initializes a Chainlink Functions Request\n @dev Simplified version of initializeRequest for PoC\n @param self The uninitialized request\n @param javaScriptSource The user provided JS code (must not be empty)"},"id":1579,"implemented":true,"kind":"function","modifiers":[],"name":"initializeRequestForInlineJavaScript","nameLocation":"2846:36:6","nodeType":"FunctionDefinition","parameters":{"id":1567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1564,"mutability":"mutable","name":"self","nameLocation":"2898:4:6","nodeType":"VariableDeclaration","scope":1579,"src":"2883:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request"},"typeName":{"id":1563,"nodeType":"UserDefinedTypeName","pathNode":{"id":1562,"name":"Request","nodeType":"IdentifierPath","referencedDeclaration":1354,"src":"2883:7:6"},"referencedDeclaration":1354,"src":"2883:7:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_storage_ptr","typeString":"struct Functions.Request"}},"visibility":"internal"},{"constant":false,"id":1566,"mutability":"mutable","name":"javaScriptSource","nameLocation":"2918:16:6","nodeType":"VariableDeclaration","scope":1579,"src":"2904:30:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1565,"name":"string","nodeType":"ElementaryTypeName","src":"2904:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2882:53:6"},"returnParameters":{"id":1568,"nodeType":"ParameterList","parameters":[],"src":"2950:0:6"},"scope":1636,"src":"2837:207:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1609,"nodeType":"Block","src":"3305:130:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1588,"name":"secrets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"3315:7:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3315:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3333:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3315:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1595,"nodeType":"IfStatement","src":"3311:46:6","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1592,"name":"EmptySecrets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"3343:12:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3343:14:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1594,"nodeType":"RevertStatement","src":"3336:21:6"}},{"expression":{"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1596,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"3364:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1598,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"secretsLocation","nodeType":"MemberAccess","referencedDeclaration":1343,"src":"3364:20:6","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1599,"name":"Location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1335,"src":"3387:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Location_$1335_$","typeString":"type(enum Functions.Location)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Inline","nodeType":"MemberAccess","referencedDeclaration":1333,"src":"3387:15:6","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}},"src":"3364:38:6","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$1335","typeString":"enum Functions.Location"}},"id":1602,"nodeType":"ExpressionStatement","src":"3364:38:6"},{"expression":{"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1603,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"3408:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1605,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"secrets","nodeType":"MemberAccess","referencedDeclaration":1350,"src":"3408:12:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1606,"name":"secrets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"3423:7:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"3408:22:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1608,"nodeType":"ExpressionStatement","src":"3408:22:6"}]},"documentation":{"id":1580,"nodeType":"StructuredDocumentation","src":"3048:171:6","text":" @notice Adds user encrypted secrets to a Request\n @param self The initialized request\n @param secrets The user encrypted secrets (must not be empty)"},"id":1610,"implemented":true,"kind":"function","modifiers":[],"name":"addInlineSecrets","nameLocation":"3231:16:6","nodeType":"FunctionDefinition","parameters":{"id":1586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1583,"mutability":"mutable","name":"self","nameLocation":"3263:4:6","nodeType":"VariableDeclaration","scope":1610,"src":"3248:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request"},"typeName":{"id":1582,"nodeType":"UserDefinedTypeName","pathNode":{"id":1581,"name":"Request","nodeType":"IdentifierPath","referencedDeclaration":1354,"src":"3248:7:6"},"referencedDeclaration":1354,"src":"3248:7:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_storage_ptr","typeString":"struct Functions.Request"}},"visibility":"internal"},{"constant":false,"id":1585,"mutability":"mutable","name":"secrets","nameLocation":"3282:7:6","nodeType":"VariableDeclaration","scope":1610,"src":"3269:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1584,"name":"bytes","nodeType":"ElementaryTypeName","src":"3269:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3247:43:6"},"returnParameters":{"id":1587,"nodeType":"ParameterList","parameters":[],"src":"3305:0:6"},"scope":1636,"src":"3222:213:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1634,"nodeType":"Block","src":"3670:74:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1620,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"3680:4:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3680:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3695:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3680:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1627,"nodeType":"IfStatement","src":"3676:40:6","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1624,"name":"EmptyArgs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1362,"src":"3705:9:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3705:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1626,"nodeType":"RevertStatement","src":"3698:18:6"}},{"expression":{"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1628,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"3723:4:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}},"id":1630,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"args","nodeType":"MemberAccess","referencedDeclaration":1353,"src":"3723:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1631,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"3735:4:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"src":"3723:16:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":1633,"nodeType":"ExpressionStatement","src":"3723:16:6"}]},"documentation":{"id":1611,"nodeType":"StructuredDocumentation","src":"3439:154:6","text":" @notice Adds args for the user run function\n @param self The initialized request\n @param args The array of args (must not be empty)"},"id":1635,"implemented":true,"kind":"function","modifiers":[],"name":"addArgs","nameLocation":"3605:7:6","nodeType":"FunctionDefinition","parameters":{"id":1618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1614,"mutability":"mutable","name":"self","nameLocation":"3628:4:6","nodeType":"VariableDeclaration","scope":1635,"src":"3613:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request"},"typeName":{"id":1613,"nodeType":"UserDefinedTypeName","pathNode":{"id":1612,"name":"Request","nodeType":"IdentifierPath","referencedDeclaration":1354,"src":"3613:7:6"},"referencedDeclaration":1354,"src":"3613:7:6","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_storage_ptr","typeString":"struct Functions.Request"}},"visibility":"internal"},{"constant":false,"id":1617,"mutability":"mutable","name":"args","nameLocation":"3650:4:6","nodeType":"VariableDeclaration","scope":1635,"src":"3634:20:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":1615,"name":"string","nodeType":"ElementaryTypeName","src":"3634:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":1616,"nodeType":"ArrayTypeName","src":"3634:8:6","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"3612:43:6"},"returnParameters":{"id":1619,"nodeType":"ParameterList","parameters":[],"src":"3670:0:6"},"scope":1636,"src":"3596:148:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1637,"src":"284:3462:6","usedErrors":[1356,1358,1360,1362]}],"src":"32:3715:6"},"id":6},"contracts/lib/dev/functions/FunctionsClient.sol":{"ast":{"absolutePath":"contracts/lib/dev/functions/FunctionsClient.sol","exportedSymbols":{"BufferChainlink":[719],"CBORChainlink":[1166],"Functions":[1636],"FunctionsBillingRegistryInterface":[1969],"FunctionsClient":[1879],"FunctionsClientInterface":[1989],"FunctionsOracleInterface":[2081]},"id":1880,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1638,"literals":["solidity","^","0.8",".6"],"nodeType":"PragmaDirective","src":"32:23:7"},{"absolutePath":"contracts/lib/dev/functions/Functions.sol","file":"./Functions.sol","id":1639,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1880,"sourceUnit":1637,"src":"57:25:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/lib/dev/interfaces/FunctionsClientInterface.sol","file":"../interfaces/FunctionsClientInterface.sol","id":1640,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1880,"sourceUnit":1990,"src":"83:52:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/lib/dev/interfaces/FunctionsOracleInterface.sol","file":"../interfaces/FunctionsOracleInterface.sol","id":1641,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1880,"sourceUnit":2082,"src":"136:52:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1643,"name":"FunctionsClientInterface","nodeType":"IdentifierPath","referencedDeclaration":1989,"src":"387:24:7"},"id":1644,"nodeType":"InheritanceSpecifier","src":"387:24:7"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1642,"nodeType":"StructuredDocumentation","src":"190:159:7","text":" @title The Chainlink Functions client contract\n @notice Contract writers can inherit this contract in order to create Chainlink Functions requests"},"fullyImplemented":false,"id":1879,"linearizedBaseContracts":[1879,1989],"name":"FunctionsClient","nameLocation":"368:15:7","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1647,"mutability":"mutable","name":"s_oracle","nameLocation":"449:8:7","nodeType":"VariableDeclaration","scope":1879,"src":"416:41:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_FunctionsOracleInterface_$2081","typeString":"contract FunctionsOracleInterface"},"typeName":{"id":1646,"nodeType":"UserDefinedTypeName","pathNode":{"id":1645,"name":"FunctionsOracleInterface","nodeType":"IdentifierPath","referencedDeclaration":2081,"src":"416:24:7"},"referencedDeclaration":2081,"src":"416:24:7","typeDescriptions":{"typeIdentifier":"t_contract$_FunctionsOracleInterface_$2081","typeString":"contract FunctionsOracleInterface"}},"visibility":"private"},{"constant":false,"id":1651,"mutability":"mutable","name":"s_pendingRequests","nameLocation":"497:17:7","nodeType":"VariableDeclaration","scope":1879,"src":"461:53:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"},"typeName":{"id":1650,"keyType":{"id":1648,"name":"bytes32","nodeType":"ElementaryTypeName","src":"469:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"461:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"},"valueType":{"id":1649,"name":"address","nodeType":"ElementaryTypeName","src":"480:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"anonymous":false,"id":1655,"name":"RequestSent","nameLocation":"525:11:7","nodeType":"EventDefinition","parameters":{"id":1654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1653,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"553:2:7","nodeType":"VariableDeclaration","scope":1655,"src":"537:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1652,"name":"bytes32","nodeType":"ElementaryTypeName","src":"537:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"536:20:7"},"src":"519:38:7"},{"anonymous":false,"id":1659,"name":"RequestFulfilled","nameLocation":"566:16:7","nodeType":"EventDefinition","parameters":{"id":1658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1657,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"599:2:7","nodeType":"VariableDeclaration","scope":1659,"src":"583:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1656,"name":"bytes32","nodeType":"ElementaryTypeName","src":"583:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"582:20:7"},"src":"560:43:7"},{"id":1661,"name":"SenderIsNotRegistry","nameLocation":"613:19:7","nodeType":"ErrorDefinition","parameters":{"id":1660,"nodeType":"ParameterList","parameters":[],"src":"632:2:7"},"src":"607:28:7"},{"id":1663,"name":"RequestIsAlreadyPending","nameLocation":"644:23:7","nodeType":"ErrorDefinition","parameters":{"id":1662,"nodeType":"ParameterList","parameters":[],"src":"667:2:7"},"src":"638:32:7"},{"id":1665,"name":"RequestIsNotPending","nameLocation":"679:19:7","nodeType":"ErrorDefinition","parameters":{"id":1664,"nodeType":"ParameterList","parameters":[],"src":"698:2:7"},"src":"673:28:7"},{"body":{"id":1674,"nodeType":"Block","src":"733:28:7","statements":[{"expression":{"arguments":[{"id":1671,"name":"oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"749:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1670,"name":"setOracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"739:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"739:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1673,"nodeType":"ExpressionStatement","src":"739:17:7"}]},"id":1675,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1667,"mutability":"mutable","name":"oracle","nameLocation":"725:6:7","nodeType":"VariableDeclaration","scope":1675,"src":"717:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1666,"name":"address","nodeType":"ElementaryTypeName","src":"717:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"716:16:7"},"returnParameters":{"id":1669,"nodeType":"ParameterList","parameters":[],"src":"733:0:7"},"scope":1879,"src":"705:56:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1978],"body":{"id":1686,"nodeType":"Block","src":"892:44:7","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1682,"name":"s_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"905:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_FunctionsOracleInterface_$2081","typeString":"contract FunctionsOracleInterface"}},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getDONPublicKey","nodeType":"MemberAccess","referencedDeclaration":2011,"src":"905:24:7","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes_memory_ptr_$","typeString":"function () view external returns (bytes memory)"}},"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"905:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1681,"id":1685,"nodeType":"Return","src":"898:33:7"}]},"documentation":{"id":1676,"nodeType":"StructuredDocumentation","src":"765:51:7","text":" @inheritdoc FunctionsClientInterface"},"functionSelector":"d328a91e","id":1687,"implemented":true,"kind":"function","modifiers":[],"name":"getDONPublicKey","nameLocation":"828:15:7","nodeType":"FunctionDefinition","overrides":{"id":1678,"nodeType":"OverrideSpecifier","overrides":[],"src":"860:8:7"},"parameters":{"id":1677,"nodeType":"ParameterList","parameters":[],"src":"843:2:7"},"returnParameters":{"id":1681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1680,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1687,"src":"878:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1679,"name":"bytes","nodeType":"ElementaryTypeName","src":"878:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"877:14:7"},"scope":1879,"src":"819:117:7","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1713,"nodeType":"Block","src":"1468:102:7","statements":[{"expression":{"arguments":[{"id":1704,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"1503:14:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"arguments":[{"id":1707,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"1540:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}],"expression":{"id":1705,"name":"Functions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"1519:9:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Functions_$1636_$","typeString":"type(library Functions)"}},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"encodeCBOR","nodeType":"MemberAccess","referencedDeclaration":1515,"src":"1519:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$1354_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (struct Functions.Request memory) pure returns (bytes memory)"}},"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1519:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1709,"name":"gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1695,"src":"1546:8:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":1710,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1697,"src":"1556:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1702,"name":"s_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"1481:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_FunctionsOracleInterface_$2081","typeString":"contract FunctionsOracleInterface"}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"estimateCost","nodeType":"MemberAccess","referencedDeclaration":2066,"src":"1481:21:7","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint64_$_t_bytes_memory_ptr_$_t_uint32_$_t_uint256_$returns$_t_uint96_$","typeString":"function (uint64,bytes memory,uint32,uint256) view external returns (uint96)"}},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1481:84:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":1701,"id":1712,"nodeType":"Return","src":"1474:91:7"}]},"documentation":{"id":1688,"nodeType":"StructuredDocumentation","src":"940:366:7","text":" @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\n @param req The initialized Functions.Request\n @param subscriptionId The subscription ID\n @param gasLimit gas limit for the fulfillment callback\n @return billedCost Cost in Juels (1e18) of LINK"},"functionSelector":"d4b39175","id":1714,"implemented":true,"kind":"function","modifiers":[],"name":"estimateCost","nameLocation":"1318:12:7","nodeType":"FunctionDefinition","parameters":{"id":1698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1691,"mutability":"mutable","name":"req","nameLocation":"1361:3:7","nodeType":"VariableDeclaration","scope":1714,"src":"1336:28:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request"},"typeName":{"id":1690,"nodeType":"UserDefinedTypeName","pathNode":{"id":1689,"name":"Functions.Request","nodeType":"IdentifierPath","referencedDeclaration":1354,"src":"1336:17:7"},"referencedDeclaration":1354,"src":"1336:17:7","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_storage_ptr","typeString":"struct Functions.Request"}},"visibility":"internal"},{"constant":false,"id":1693,"mutability":"mutable","name":"subscriptionId","nameLocation":"1377:14:7","nodeType":"VariableDeclaration","scope":1714,"src":"1370:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1692,"name":"uint64","nodeType":"ElementaryTypeName","src":"1370:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1695,"mutability":"mutable","name":"gasLimit","nameLocation":"1404:8:7","nodeType":"VariableDeclaration","scope":1714,"src":"1397:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1694,"name":"uint32","nodeType":"ElementaryTypeName","src":"1397:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1697,"mutability":"mutable","name":"gasPrice","nameLocation":"1426:8:7","nodeType":"VariableDeclaration","scope":1714,"src":"1418:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1696,"name":"uint256","nodeType":"ElementaryTypeName","src":"1418:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1330:108:7"},"returnParameters":{"id":1701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1700,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1714,"src":"1460:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1699,"name":"uint96","nodeType":"ElementaryTypeName","src":"1460:6:7","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"1459:8:7"},"scope":1879,"src":"1309:261:7","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1756,"nodeType":"Block","src":"2025:228:7","statements":[{"assignments":[1730],"declarations":[{"constant":false,"id":1730,"mutability":"mutable","name":"requestId","nameLocation":"2039:9:7","nodeType":"VariableDeclaration","scope":1756,"src":"2031:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1729,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2031:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1741,"initialValue":{"arguments":[{"id":1733,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"2072:14:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"arguments":[{"id":1736,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"2109:3:7","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request memory"}],"expression":{"id":1734,"name":"Functions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"2088:9:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Functions_$1636_$","typeString":"type(library Functions)"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"encodeCBOR","nodeType":"MemberAccess","referencedDeclaration":1515,"src":"2088:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$1354_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (struct Functions.Request memory) pure returns (bytes memory)"}},"id":1737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2088:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1738,"name":"gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1722,"src":"2115:8:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":1739,"name":"gasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"2125:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1731,"name":"s_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"2051:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_FunctionsOracleInterface_$2081","typeString":"contract FunctionsOracleInterface"}},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sendRequest","nodeType":"MemberAccess","referencedDeclaration":2080,"src":"2051:20:7","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint64_$_t_bytes_memory_ptr_$_t_uint32_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint64,bytes memory,uint32,uint256) external returns (bytes32)"}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2051:83:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2031:103:7"},{"expression":{"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1742,"name":"s_pendingRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"2140:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":1744,"indexExpression":{"id":1743,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"2158:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2140:28:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1745,"name":"s_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"2171:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_FunctionsOracleInterface_$2081","typeString":"contract FunctionsOracleInterface"}},"id":1746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getRegistry","nodeType":"MemberAccess","referencedDeclaration":1999,"src":"2171:20:7","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2171:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2140:53:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1749,"nodeType":"ExpressionStatement","src":"2140:53:7"},{"eventCall":{"arguments":[{"id":1751,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"2216:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1750,"name":"RequestSent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"2204:11:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2204:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1753,"nodeType":"EmitStatement","src":"2199:27:7"},{"expression":{"id":1754,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"2239:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1728,"id":1755,"nodeType":"Return","src":"2232:16:7"}]},"documentation":{"id":1715,"nodeType":"StructuredDocumentation","src":"1574:292:7","text":" @notice Sends a Chainlink Functions request to the stored oracle address\n @param req The initialized Functions.Request\n @param subscriptionId The subscription ID\n @param gasLimit gas limit for the fulfillment callback\n @return requestId The generated request ID"},"id":1757,"implemented":true,"kind":"function","modifiers":[],"name":"sendRequest","nameLocation":"1878:11:7","nodeType":"FunctionDefinition","parameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1718,"mutability":"mutable","name":"req","nameLocation":"1920:3:7","nodeType":"VariableDeclaration","scope":1757,"src":"1895:28:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_memory_ptr","typeString":"struct Functions.Request"},"typeName":{"id":1717,"nodeType":"UserDefinedTypeName","pathNode":{"id":1716,"name":"Functions.Request","nodeType":"IdentifierPath","referencedDeclaration":1354,"src":"1895:17:7"},"referencedDeclaration":1354,"src":"1895:17:7","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$1354_storage_ptr","typeString":"struct Functions.Request"}},"visibility":"internal"},{"constant":false,"id":1720,"mutability":"mutable","name":"subscriptionId","nameLocation":"1936:14:7","nodeType":"VariableDeclaration","scope":1757,"src":"1929:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1719,"name":"uint64","nodeType":"ElementaryTypeName","src":"1929:6:7","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1722,"mutability":"mutable","name":"gasLimit","nameLocation":"1963:8:7","nodeType":"VariableDeclaration","scope":1757,"src":"1956:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1721,"name":"uint32","nodeType":"ElementaryTypeName","src":"1956:6:7","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1724,"mutability":"mutable","name":"gasPrice","nameLocation":"1985:8:7","nodeType":"VariableDeclaration","scope":1757,"src":"1977:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1723,"name":"uint256","nodeType":"ElementaryTypeName","src":"1977:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1889:108:7"},"returnParameters":{"id":1728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1727,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1757,"src":"2016:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1726,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:9:7"},"scope":1879,"src":"1869:384:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":1758,"nodeType":"StructuredDocumentation","src":"2257:340:7","text":" @notice User defined function to handle a response\n @param requestId The request ID, returned by sendRequest()\n @param response Aggregated response from the user code\n @param err Aggregated error from the user code or from the execution pipeline\n Either response or error parameter will be set, but never both"},"id":1767,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRequest","nameLocation":"2609:14:7","nodeType":"FunctionDefinition","parameters":{"id":1765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1760,"mutability":"mutable","name":"requestId","nameLocation":"2637:9:7","nodeType":"VariableDeclaration","scope":1767,"src":"2629:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1759,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2629:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1762,"mutability":"mutable","name":"response","nameLocation":"2665:8:7","nodeType":"VariableDeclaration","scope":1767,"src":"2652:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1761,"name":"bytes","nodeType":"ElementaryTypeName","src":"2652:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1764,"mutability":"mutable","name":"err","nameLocation":"2692:3:7","nodeType":"VariableDeclaration","scope":1767,"src":"2679:16:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1763,"name":"bytes","nodeType":"ElementaryTypeName","src":"2679:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2623:76:7"},"returnParameters":{"id":1766,"nodeType":"ParameterList","parameters":[],"src":"2716:0:7"},"scope":1879,"src":"2600:117:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[1988],"body":{"id":1787,"nodeType":"Block","src":"2940:51:7","statements":[{"expression":{"arguments":[{"id":1782,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"2961:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1783,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"2972:8:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1784,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"2982:3:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1781,"name":"fulfillRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"2946:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory,bytes memory)"}},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2946:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1786,"nodeType":"ExpressionStatement","src":"2946:40:7"}]},"documentation":{"id":1768,"nodeType":"StructuredDocumentation","src":"2721:51:7","text":" @inheritdoc FunctionsClientInterface"},"functionSelector":"0ca76175","id":1788,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1778,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"2929:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1779,"kind":"modifierInvocation","modifierName":{"id":1777,"name":"recordChainlinkFulfillment","nodeType":"IdentifierPath","referencedDeclaration":1858,"src":"2902:26:7"},"nodeType":"ModifierInvocation","src":"2902:37:7"}],"name":"handleOracleFulfillment","nameLocation":"2784:23:7","nodeType":"FunctionDefinition","overrides":{"id":1776,"nodeType":"OverrideSpecifier","overrides":[],"src":"2893:8:7"},"parameters":{"id":1775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1770,"mutability":"mutable","name":"requestId","nameLocation":"2821:9:7","nodeType":"VariableDeclaration","scope":1788,"src":"2813:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1769,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2813:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1772,"mutability":"mutable","name":"response","nameLocation":"2849:8:7","nodeType":"VariableDeclaration","scope":1788,"src":"2836:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1771,"name":"bytes","nodeType":"ElementaryTypeName","src":"2836:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1774,"mutability":"mutable","name":"err","nameLocation":"2876:3:7","nodeType":"VariableDeclaration","scope":1788,"src":"2863:16:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1773,"name":"bytes","nodeType":"ElementaryTypeName","src":"2863:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2807:76:7"},"returnParameters":{"id":1780,"nodeType":"ParameterList","parameters":[],"src":"2940:0:7"},"scope":1879,"src":"2775:216:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1800,"nodeType":"Block","src":"3155:54:7","statements":[{"expression":{"id":1798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1794,"name":"s_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"3161:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_FunctionsOracleInterface_$2081","typeString":"contract FunctionsOracleInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1796,"name":"oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"3197:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1795,"name":"FunctionsOracleInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"3172:24:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FunctionsOracleInterface_$2081_$","typeString":"type(contract FunctionsOracleInterface)"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3172:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_FunctionsOracleInterface_$2081","typeString":"contract FunctionsOracleInterface"}},"src":"3161:43:7","typeDescriptions":{"typeIdentifier":"t_contract$_FunctionsOracleInterface_$2081","typeString":"contract FunctionsOracleInterface"}},"id":1799,"nodeType":"ExpressionStatement","src":"3161:43:7"}]},"documentation":{"id":1789,"nodeType":"StructuredDocumentation","src":"2995:113:7","text":" @notice Sets the stored Oracle address\n @param oracle The address of Functions Oracle contract"},"id":1801,"implemented":true,"kind":"function","modifiers":[],"name":"setOracle","nameLocation":"3120:9:7","nodeType":"FunctionDefinition","parameters":{"id":1792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1791,"mutability":"mutable","name":"oracle","nameLocation":"3138:6:7","nodeType":"VariableDeclaration","scope":1801,"src":"3130:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1790,"name":"address","nodeType":"ElementaryTypeName","src":"3130:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3129:16:7"},"returnParameters":{"id":1793,"nodeType":"ParameterList","parameters":[],"src":"3155:0:7"},"scope":1879,"src":"3111:98:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1812,"nodeType":"Block","src":"3402:35:7","statements":[{"expression":{"arguments":[{"id":1809,"name":"s_oracle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"3423:8:7","typeDescriptions":{"typeIdentifier":"t_contract$_FunctionsOracleInterface_$2081","typeString":"contract FunctionsOracleInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_FunctionsOracleInterface_$2081","typeString":"contract FunctionsOracleInterface"}],"id":1808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3415:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1807,"name":"address","nodeType":"ElementaryTypeName","src":"3415:7:7","typeDescriptions":{}}},"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3415:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1806,"id":1811,"nodeType":"Return","src":"3408:24:7"}]},"documentation":{"id":1802,"nodeType":"StructuredDocumentation","src":"3213:117:7","text":" @notice Gets the stored address of the oracle contract\n @return The address of the oracle contract"},"id":1813,"implemented":true,"kind":"function","modifiers":[],"name":"getChainlinkOracleAddress","nameLocation":"3342:25:7","nodeType":"FunctionDefinition","parameters":{"id":1803,"nodeType":"ParameterList","parameters":[],"src":"3367:2:7"},"returnParameters":{"id":1806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1805,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1813,"src":"3393:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1804,"name":"address","nodeType":"ElementaryTypeName","src":"3393:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3392:9:7"},"scope":1879,"src":"3333:104:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1830,"nodeType":"Block","src":"3821:55:7","statements":[{"expression":{"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1824,"name":"s_pendingRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"3827:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":1826,"indexExpression":{"id":1825,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"3845:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3827:28:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1827,"name":"oracleAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1816,"src":"3858:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3827:44:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1829,"nodeType":"ExpressionStatement","src":"3827:44:7"}]},"documentation":{"id":1814,"nodeType":"StructuredDocumentation","src":"3441:269:7","text":" @notice Allows for a request which was created on another contract to be fulfilled\n on this contract\n @param oracleAddress The address of the oracle contract that will fulfill the request\n @param requestId The request ID used for the response"},"id":1831,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":1821,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"3810:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1822,"kind":"modifierInvocation","modifierName":{"id":1820,"name":"notPendingRequest","nodeType":"IdentifierPath","referencedDeclaration":1878,"src":"3792:17:7"},"nodeType":"ModifierInvocation","src":"3792:28:7"}],"name":"addExternalRequest","nameLocation":"3722:18:7","nodeType":"FunctionDefinition","parameters":{"id":1819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1816,"mutability":"mutable","name":"oracleAddress","nameLocation":"3749:13:7","nodeType":"VariableDeclaration","scope":1831,"src":"3741:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1815,"name":"address","nodeType":"ElementaryTypeName","src":"3741:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1818,"mutability":"mutable","name":"requestId","nameLocation":"3772:9:7","nodeType":"VariableDeclaration","scope":1831,"src":"3764:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1817,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3764:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3740:42:7"},"returnParameters":{"id":1823,"nodeType":"ParameterList","parameters":[],"src":"3821:0:7"},"scope":1879,"src":"3713:163:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1857,"nodeType":"Block","src":"4112:187:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1836,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4122:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4122:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"id":1838,"name":"s_pendingRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"4136:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":1840,"indexExpression":{"id":1839,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"4154:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4136:28:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4122:42:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1846,"nodeType":"IfStatement","src":"4118:91:7","trueBody":{"id":1845,"nodeType":"Block","src":"4166:43:7","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1842,"name":"SenderIsNotRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"4181:19:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4181:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1844,"nodeType":"RevertStatement","src":"4174:28:7"}]}},{"expression":{"id":1850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4214:35:7","subExpression":{"baseExpression":{"id":1847,"name":"s_pendingRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"4221:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":1849,"indexExpression":{"id":1848,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"4239:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4221:28:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1851,"nodeType":"ExpressionStatement","src":"4214:35:7"},{"eventCall":{"arguments":[{"id":1853,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"4277:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1852,"name":"RequestFulfilled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"4260:16:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4260:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1855,"nodeType":"EmitStatement","src":"4255:32:7"},{"id":1856,"nodeType":"PlaceholderStatement","src":"4293:1:7"}]},"documentation":{"id":1832,"nodeType":"StructuredDocumentation","src":"3880:174:7","text":" @dev Reverts if the sender is not the oracle that serviced the request.\n Emits RequestFulfilled event.\n @param requestId The request ID for fulfillment"},"id":1858,"name":"recordChainlinkFulfillment","nameLocation":"4066:26:7","nodeType":"ModifierDefinition","parameters":{"id":1835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1834,"mutability":"mutable","name":"requestId","nameLocation":"4101:9:7","nodeType":"VariableDeclaration","scope":1858,"src":"4093:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1833,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4093:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4092:19:7"},"src":"4057:242:7","virtual":false,"visibility":"internal"},{"body":{"id":1877,"nodeType":"Block","src":"4466:112:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1863,"name":"s_pendingRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"4476:17:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_address_$","typeString":"mapping(bytes32 => address)"}},"id":1865,"indexExpression":{"id":1864,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"4494:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4476:28:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4516:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1867,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4508:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1866,"name":"address","nodeType":"ElementaryTypeName","src":"4508:7:7","typeDescriptions":{}}},"id":1869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4508:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4476:42:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1875,"nodeType":"IfStatement","src":"4472:95:7","trueBody":{"id":1874,"nodeType":"Block","src":"4520:47:7","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1871,"name":"RequestIsAlreadyPending","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"4535:23:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4535:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1873,"nodeType":"RevertStatement","src":"4528:32:7"}]}},{"id":1876,"nodeType":"PlaceholderStatement","src":"4572:1:7"}]},"documentation":{"id":1859,"nodeType":"StructuredDocumentation","src":"4303:114:7","text":" @dev Reverts if the request is already pending\n @param requestId The request ID for fulfillment"},"id":1878,"name":"notPendingRequest","nameLocation":"4429:17:7","nodeType":"ModifierDefinition","parameters":{"id":1862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1861,"mutability":"mutable","name":"requestId","nameLocation":"4455:9:7","nodeType":"VariableDeclaration","scope":1878,"src":"4447:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1860,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4447:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4446:19:7"},"src":"4420:158:7","virtual":false,"visibility":"internal"}],"scope":1880,"src":"350:4230:7","usedErrors":[1661,1663,1665]}],"src":"32:4549:7"},"id":7},"contracts/lib/dev/interfaces/FunctionsBillingRegistryInterface.sol":{"ast":{"absolutePath":"contracts/lib/dev/interfaces/FunctionsBillingRegistryInterface.sol","exportedSymbols":{"FunctionsBillingRegistryInterface":[1969]},"id":1970,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1881,"literals":["solidity","^","0.8",".6"],"nodeType":"PragmaDirective","src":"32:23:8"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1882,"nodeType":"StructuredDocumentation","src":"57:78:8","text":" @title Chainlink Functions billing subscription registry interface."},"fullyImplemented":false,"id":1969,"linearizedBaseContracts":[1969],"name":"FunctionsBillingRegistryInterface","nameLocation":"146:33:8","nodeType":"ContractDefinition","nodes":[{"canonicalName":"FunctionsBillingRegistryInterface.RequestBilling","id":1891,"members":[{"constant":false,"id":1884,"mutability":"mutable","name":"subscriptionId","nameLocation":"280:14:8","nodeType":"VariableDeclaration","scope":1891,"src":"273:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1883,"name":"uint64","nodeType":"ElementaryTypeName","src":"273:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1886,"mutability":"mutable","name":"client","nameLocation":"455:6:8","nodeType":"VariableDeclaration","scope":1891,"src":"447:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1885,"name":"address","nodeType":"ElementaryTypeName","src":"447:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1888,"mutability":"mutable","name":"gasLimit","nameLocation":"539:8:8","nodeType":"VariableDeclaration","scope":1891,"src":"532:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1887,"name":"uint32","nodeType":"ElementaryTypeName","src":"532:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1890,"mutability":"mutable","name":"gasPrice","nameLocation":"623:8:8","nodeType":"VariableDeclaration","scope":1891,"src":"615:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1889,"name":"uint256","nodeType":"ElementaryTypeName","src":"615:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"RequestBilling","nameLocation":"191:14:8","nodeType":"StructDefinition","scope":1969,"src":"184:452:8","visibility":"public"},{"documentation":{"id":1892,"nodeType":"StructuredDocumentation","src":"640:169:8","text":" @notice Get configuration relevant for making requests\n @return uint32 global max for request gas limit\n @return address[] list of registered DONs"},"functionSelector":"00012291","id":1900,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"821:16:8","nodeType":"FunctionDefinition","parameters":{"id":1893,"nodeType":"ParameterList","parameters":[],"src":"837:2:8"},"returnParameters":{"id":1899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1900,"src":"863:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1894,"name":"uint32","nodeType":"ElementaryTypeName","src":"863:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1898,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1900,"src":"871:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1896,"name":"address","nodeType":"ElementaryTypeName","src":"871:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1897,"nodeType":"ArrayTypeName","src":"871:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"862:26:8"},"scope":1969,"src":"812:77:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1901,"nodeType":"StructuredDocumentation","src":"893:293:8","text":" @notice Determine the charged fee that will be paid to the Registry owner\n @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n @param billing The request's billing configuration\n @return fee Cost in Juels (1e18) of LINK"},"functionSelector":"f1e14a21","id":1911,"implemented":false,"kind":"function","modifiers":[],"name":"getRequiredFee","nameLocation":"1198:14:8","nodeType":"FunctionDefinition","parameters":{"id":1907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1903,"mutability":"mutable","name":"data","nameLocation":"1228:4:8","nodeType":"VariableDeclaration","scope":1911,"src":"1213:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1902,"name":"bytes","nodeType":"ElementaryTypeName","src":"1213:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1906,"mutability":"mutable","name":"billing","nameLocation":"1290:7:8","nodeType":"VariableDeclaration","scope":1911,"src":"1234:63:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBilling_$1891_memory_ptr","typeString":"struct FunctionsBillingRegistryInterface.RequestBilling"},"typeName":{"id":1905,"nodeType":"UserDefinedTypeName","pathNode":{"id":1904,"name":"FunctionsBillingRegistryInterface.RequestBilling","nodeType":"IdentifierPath","referencedDeclaration":1891,"src":"1234:48:8"},"referencedDeclaration":1891,"src":"1234:48:8","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBilling_$1891_storage_ptr","typeString":"struct FunctionsBillingRegistryInterface.RequestBilling"}},"visibility":"internal"}],"src":"1212:86:8"},"returnParameters":{"id":1910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1909,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1911,"src":"1334:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1908,"name":"uint96","nodeType":"ElementaryTypeName","src":"1334:6:8","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"1333:8:8"},"scope":1969,"src":"1189:153:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1912,"nodeType":"StructuredDocumentation","src":"1346:481:8","text":" @notice Estimate the total cost to make a request: gas re-imbursement, plus DON fee, plus Registry fee\n @param gasLimit Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n @param gasPrice The request's billing configuration\n @param donFee Fee charged by the DON that is paid to Oracle Node\n @param registryFee Fee charged by the DON that is paid to Oracle Node\n @return costEstimate Cost in Juels (1e18) of LINK"},"functionSelector":"a1a6d041","id":1925,"implemented":false,"kind":"function","modifiers":[],"name":"estimateCost","nameLocation":"1839:12:8","nodeType":"FunctionDefinition","parameters":{"id":1921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1914,"mutability":"mutable","name":"gasLimit","nameLocation":"1864:8:8","nodeType":"VariableDeclaration","scope":1925,"src":"1857:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1913,"name":"uint32","nodeType":"ElementaryTypeName","src":"1857:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1916,"mutability":"mutable","name":"gasPrice","nameLocation":"1886:8:8","nodeType":"VariableDeclaration","scope":1925,"src":"1878:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1915,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1918,"mutability":"mutable","name":"donFee","nameLocation":"1907:6:8","nodeType":"VariableDeclaration","scope":1925,"src":"1900:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1917,"name":"uint96","nodeType":"ElementaryTypeName","src":"1900:6:8","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":1920,"mutability":"mutable","name":"registryFee","nameLocation":"1926:11:8","nodeType":"VariableDeclaration","scope":1925,"src":"1919:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1919,"name":"uint96","nodeType":"ElementaryTypeName","src":"1919:6:8","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"1851:90:8"},"returnParameters":{"id":1924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1925,"src":"1965:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1922,"name":"uint96","nodeType":"ElementaryTypeName","src":"1965:6:8","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"1964:8:8"},"scope":1969,"src":"1830:143:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1926,"nodeType":"StructuredDocumentation","src":"1977:435:8","text":" @notice Initiate the billing process for an Functions request\n @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n @param billing Billing configuration for the request\n @return requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest.\n @dev Only callable by a node that has been approved on the Registry"},"functionSelector":"a9d03c05","id":1936,"implemented":false,"kind":"function","modifiers":[],"name":"startBilling","nameLocation":"2424:12:8","nodeType":"FunctionDefinition","parameters":{"id":1932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1928,"mutability":"mutable","name":"data","nameLocation":"2452:4:8","nodeType":"VariableDeclaration","scope":1936,"src":"2437:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1927,"name":"bytes","nodeType":"ElementaryTypeName","src":"2437:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1931,"mutability":"mutable","name":"billing","nameLocation":"2482:7:8","nodeType":"VariableDeclaration","scope":1936,"src":"2458:31:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBilling_$1891_calldata_ptr","typeString":"struct FunctionsBillingRegistryInterface.RequestBilling"},"typeName":{"id":1930,"nodeType":"UserDefinedTypeName","pathNode":{"id":1929,"name":"RequestBilling","nodeType":"IdentifierPath","referencedDeclaration":1891,"src":"2458:14:8"},"referencedDeclaration":1891,"src":"2458:14:8","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBilling_$1891_storage_ptr","typeString":"struct FunctionsBillingRegistryInterface.RequestBilling"}},"visibility":"internal"}],"src":"2436:54:8"},"returnParameters":{"id":1935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1936,"src":"2509:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1933,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2509:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2508:9:8"},"scope":1969,"src":"2415:103:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1937,"nodeType":"StructuredDocumentation","src":"2522:1044:8","text":" @notice Finalize billing process for an Functions request by sending a callback to the Client contract and then charging the subscription\n @param requestId identifier for the request that was generated by the Registry in the beginBilling commitment\n @param response response data from DON consensus\n @param err error from DON consensus\n @param transmitter the Oracle who sent the report\n @param signers the Oracles who had a part in generating the report\n @param signerCount the number of signers on the report\n @param reportValidationGas the amount of gas used for the report validation. Cost is split by all fulfillments on the report.\n @param initialGas the initial amount of gas that should be used as a baseline to charge the single fulfillment for execution cost\n @return success whether the callback was successsful\n @dev Only callable by a node that has been approved on the Registry\n @dev simulated offchain to determine if sufficient balance is present to fulfill the request"},"functionSelector":"0739e4f1","id":1960,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillAndBill","nameLocation":"3578:14:8","nodeType":"FunctionDefinition","parameters":{"id":1956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1939,"mutability":"mutable","name":"requestId","nameLocation":"3606:9:8","nodeType":"VariableDeclaration","scope":1960,"src":"3598:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1938,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3598:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1941,"mutability":"mutable","name":"response","nameLocation":"3636:8:8","nodeType":"VariableDeclaration","scope":1960,"src":"3621:23:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1940,"name":"bytes","nodeType":"ElementaryTypeName","src":"3621:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1943,"mutability":"mutable","name":"err","nameLocation":"3665:3:8","nodeType":"VariableDeclaration","scope":1960,"src":"3650:18:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1942,"name":"bytes","nodeType":"ElementaryTypeName","src":"3650:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1945,"mutability":"mutable","name":"transmitter","nameLocation":"3682:11:8","nodeType":"VariableDeclaration","scope":1960,"src":"3674:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1944,"name":"address","nodeType":"ElementaryTypeName","src":"3674:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1949,"mutability":"mutable","name":"signers","nameLocation":"3718:7:8","nodeType":"VariableDeclaration","scope":1960,"src":"3699:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$31_memory_ptr","typeString":"address[31]"},"typeName":{"baseType":{"id":1946,"name":"address","nodeType":"ElementaryTypeName","src":"3699:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1948,"length":{"hexValue":"3331","id":1947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3707:2:8","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"nodeType":"ArrayTypeName","src":"3699:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$31_storage_ptr","typeString":"address[31]"}},"visibility":"internal"},{"constant":false,"id":1951,"mutability":"mutable","name":"signerCount","nameLocation":"3796:11:8","nodeType":"VariableDeclaration","scope":1960,"src":"3790:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1950,"name":"uint8","nodeType":"ElementaryTypeName","src":"3790:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1953,"mutability":"mutable","name":"reportValidationGas","nameLocation":"3821:19:8","nodeType":"VariableDeclaration","scope":1960,"src":"3813:27:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1952,"name":"uint256","nodeType":"ElementaryTypeName","src":"3813:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1955,"mutability":"mutable","name":"initialGas","nameLocation":"3854:10:8","nodeType":"VariableDeclaration","scope":1960,"src":"3846:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1954,"name":"uint256","nodeType":"ElementaryTypeName","src":"3846:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3592:276:8"},"returnParameters":{"id":1959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1958,"mutability":"mutable","name":"success","nameLocation":"3892:7:8","nodeType":"VariableDeclaration","scope":1960,"src":"3887:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1957,"name":"bool","nodeType":"ElementaryTypeName","src":"3887:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3886:14:8"},"scope":1969,"src":"3569:332:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1961,"nodeType":"StructuredDocumentation","src":"3905:147:8","text":" @notice Gets subscription owner.\n @param subscriptionId - ID of the subscription\n @return owner - owner of the subscription."},"functionSelector":"b2a489ff","id":1968,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscriptionOwner","nameLocation":"4064:20:8","nodeType":"FunctionDefinition","parameters":{"id":1964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"mutability":"mutable","name":"subscriptionId","nameLocation":"4092:14:8","nodeType":"VariableDeclaration","scope":1968,"src":"4085:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1962,"name":"uint64","nodeType":"ElementaryTypeName","src":"4085:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4084:23:8"},"returnParameters":{"id":1967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1966,"mutability":"mutable","name":"owner","nameLocation":"4139:5:8","nodeType":"VariableDeclaration","scope":1968,"src":"4131:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1965,"name":"address","nodeType":"ElementaryTypeName","src":"4131:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4130:15:8"},"scope":1969,"src":"4055:91:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1970,"src":"136:4012:8","usedErrors":[]}],"src":"32:4117:8"},"id":8},"contracts/lib/dev/interfaces/FunctionsClientInterface.sol":{"ast":{"absolutePath":"contracts/lib/dev/interfaces/FunctionsClientInterface.sol","exportedSymbols":{"FunctionsClientInterface":[1989]},"id":1990,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1971,"literals":["solidity","^","0.8",".6"],"nodeType":"PragmaDirective","src":"32:23:9"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1972,"nodeType":"StructuredDocumentation","src":"57:55:9","text":" @title Chainlink Functions client interface."},"fullyImplemented":false,"id":1989,"linearizedBaseContracts":[1989],"name":"FunctionsClientInterface","nameLocation":"123:24:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1973,"nodeType":"StructuredDocumentation","src":"152:253:9","text":" @notice Returns the DON's secp256k1 public key used to encrypt secrets\n @dev All Oracles nodes have the corresponding private key\n needed to decrypt the secrets encrypted with the public key\n @return publicKey DON's public key"},"functionSelector":"d328a91e","id":1978,"implemented":false,"kind":"function","modifiers":[],"name":"getDONPublicKey","nameLocation":"417:15:9","nodeType":"FunctionDefinition","parameters":{"id":1974,"nodeType":"ParameterList","parameters":[],"src":"432:2:9"},"returnParameters":{"id":1977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1976,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1978,"src":"458:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1975,"name":"bytes","nodeType":"ElementaryTypeName","src":"458:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"457:14:9"},"scope":1989,"src":"408:64:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1979,"nodeType":"StructuredDocumentation","src":"476:418:9","text":" @notice Chainlink Functions response handler called by the designated transmitter node in an OCR round.\n @param requestId The requestId returned by FunctionsClient.sendRequest().\n @param response Aggregated response from the user code.\n @param err Aggregated error either from the user code or from the execution pipeline.\n Either response or error parameter will be set, but never both."},"functionSelector":"0ca76175","id":1988,"implemented":false,"kind":"function","modifiers":[],"name":"handleOracleFulfillment","nameLocation":"906:23:9","nodeType":"FunctionDefinition","parameters":{"id":1986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1981,"mutability":"mutable","name":"requestId","nameLocation":"943:9:9","nodeType":"VariableDeclaration","scope":1988,"src":"935:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1980,"name":"bytes32","nodeType":"ElementaryTypeName","src":"935:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1983,"mutability":"mutable","name":"response","nameLocation":"971:8:9","nodeType":"VariableDeclaration","scope":1988,"src":"958:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1982,"name":"bytes","nodeType":"ElementaryTypeName","src":"958:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1985,"mutability":"mutable","name":"err","nameLocation":"998:3:9","nodeType":"VariableDeclaration","scope":1988,"src":"985:16:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1984,"name":"bytes","nodeType":"ElementaryTypeName","src":"985:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"929:76:9"},"returnParameters":{"id":1987,"nodeType":"ParameterList","parameters":[],"src":"1014:0:9"},"scope":1989,"src":"897:118:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1990,"src":"113:904:9","usedErrors":[]}],"src":"32:986:9"},"id":9},"contracts/lib/dev/interfaces/FunctionsOracleInterface.sol":{"ast":{"absolutePath":"contracts/lib/dev/interfaces/FunctionsOracleInterface.sol","exportedSymbols":{"FunctionsBillingRegistryInterface":[1969],"FunctionsOracleInterface":[2081]},"id":2082,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1991,"literals":["solidity","^","0.8",".6"],"nodeType":"PragmaDirective","src":"32:23:10"},{"absolutePath":"contracts/lib/dev/interfaces/FunctionsBillingRegistryInterface.sol","file":"./FunctionsBillingRegistryInterface.sol","id":1992,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2082,"sourceUnit":1970,"src":"57:49:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1993,"nodeType":"StructuredDocumentation","src":"108:55:10","text":" @title Chainlink Functions oracle interface."},"fullyImplemented":false,"id":2081,"linearizedBaseContracts":[2081],"name":"FunctionsOracleInterface","nameLocation":"174:24:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1994,"nodeType":"StructuredDocumentation","src":"203:153:10","text":" @notice Gets the stored billing registry address\n @return registryAddress The address of Chainlink Functions billing registry contract"},"functionSelector":"5ab1bd53","id":1999,"implemented":false,"kind":"function","modifiers":[],"name":"getRegistry","nameLocation":"368:11:10","nodeType":"FunctionDefinition","parameters":{"id":1995,"nodeType":"ParameterList","parameters":[],"src":"379:2:10"},"returnParameters":{"id":1998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1997,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1999,"src":"405:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1996,"name":"address","nodeType":"ElementaryTypeName","src":"405:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"404:9:10"},"scope":2081,"src":"359:55:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2000,"nodeType":"StructuredDocumentation","src":"418:156:10","text":" @notice Sets the stored billing registry address\n @param registryAddress The new address of Chainlink Functions billing registry contract"},"functionSelector":"a91ee0dc","id":2005,"implemented":false,"kind":"function","modifiers":[],"name":"setRegistry","nameLocation":"586:11:10","nodeType":"FunctionDefinition","parameters":{"id":2003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2002,"mutability":"mutable","name":"registryAddress","nameLocation":"606:15:10","nodeType":"VariableDeclaration","scope":2005,"src":"598:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2001,"name":"address","nodeType":"ElementaryTypeName","src":"598:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"597:25:10"},"returnParameters":{"id":2004,"nodeType":"ParameterList","parameters":[],"src":"631:0:10"},"scope":2081,"src":"577:55:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2006,"nodeType":"StructuredDocumentation","src":"636:268:10","text":" @notice Returns the DON's secp256k1 public key that is used to encrypt secrets\n @dev All nodes on the DON have the corresponding private key\n needed to decrypt the secrets encrypted with the public key\n @return publicKey the DON's public key"},"functionSelector":"d328a91e","id":2011,"implemented":false,"kind":"function","modifiers":[],"name":"getDONPublicKey","nameLocation":"916:15:10","nodeType":"FunctionDefinition","parameters":{"id":2007,"nodeType":"ParameterList","parameters":[],"src":"931:2:10"},"returnParameters":{"id":2010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2009,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2011,"src":"957:12:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2008,"name":"bytes","nodeType":"ElementaryTypeName","src":"957:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"956:14:10"},"scope":2081,"src":"907:64:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2012,"nodeType":"StructuredDocumentation","src":"975:155:10","text":" @notice Sets DON's secp256k1 public key used to encrypt secrets\n @dev Used to rotate the key\n @param donPublicKey The new public key"},"functionSelector":"7f15e166","id":2017,"implemented":false,"kind":"function","modifiers":[],"name":"setDONPublicKey","nameLocation":"1142:15:10","nodeType":"FunctionDefinition","parameters":{"id":2015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2014,"mutability":"mutable","name":"donPublicKey","nameLocation":"1173:12:10","nodeType":"VariableDeclaration","scope":2017,"src":"1158:27:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2013,"name":"bytes","nodeType":"ElementaryTypeName","src":"1158:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1157:29:10"},"returnParameters":{"id":2016,"nodeType":"ParameterList","parameters":[],"src":"1195:0:10"},"scope":2081,"src":"1133:63:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2018,"nodeType":"StructuredDocumentation","src":"1200:227:10","text":" @notice Sets a per-node secp256k1 public key used to encrypt secrets for that node\n @dev Callable only by contract owner and DON members\n @param node node's address\n @param publicKey node's public key"},"functionSelector":"80756031","id":2025,"implemented":false,"kind":"function","modifiers":[],"name":"setNodePublicKey","nameLocation":"1439:16:10","nodeType":"FunctionDefinition","parameters":{"id":2023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2020,"mutability":"mutable","name":"node","nameLocation":"1464:4:10","nodeType":"VariableDeclaration","scope":2025,"src":"1456:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2019,"name":"address","nodeType":"ElementaryTypeName","src":"1456:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2022,"mutability":"mutable","name":"publicKey","nameLocation":"1485:9:10","nodeType":"VariableDeclaration","scope":2025,"src":"1470:24:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2021,"name":"bytes","nodeType":"ElementaryTypeName","src":"1470:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1455:40:10"},"returnParameters":{"id":2024,"nodeType":"ParameterList","parameters":[],"src":"1504:0:10"},"scope":2081,"src":"1430:75:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2026,"nodeType":"StructuredDocumentation","src":"1509:141:10","text":" @notice Deletes node's public key\n @dev Callable only by contract owner or the node itself\n @param node node's address"},"functionSelector":"26ceabac","id":2031,"implemented":false,"kind":"function","modifiers":[],"name":"deleteNodePublicKey","nameLocation":"1662:19:10","nodeType":"FunctionDefinition","parameters":{"id":2029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2028,"mutability":"mutable","name":"node","nameLocation":"1690:4:10","nodeType":"VariableDeclaration","scope":2031,"src":"1682:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2027,"name":"address","nodeType":"ElementaryTypeName","src":"1682:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1681:14:10"},"returnParameters":{"id":2030,"nodeType":"ParameterList","parameters":[],"src":"1704:0:10"},"scope":2081,"src":"1653:52:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2032,"nodeType":"StructuredDocumentation","src":"1709:183:10","text":" @notice Return two arrays of equal size containing DON members' addresses and their corresponding\n public keys (or empty byte arrays if per-node key is not defined)"},"functionSelector":"53398987","id":2041,"implemented":false,"kind":"function","modifiers":[],"name":"getAllNodePublicKeys","nameLocation":"1904:20:10","nodeType":"FunctionDefinition","parameters":{"id":2033,"nodeType":"ParameterList","parameters":[],"src":"1924:2:10"},"returnParameters":{"id":2040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2036,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2041,"src":"1950:16:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2034,"name":"address","nodeType":"ElementaryTypeName","src":"1950:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2035,"nodeType":"ArrayTypeName","src":"1950:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2039,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2041,"src":"1968:14:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2037,"name":"bytes","nodeType":"ElementaryTypeName","src":"1968:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2038,"nodeType":"ArrayTypeName","src":"1968:7:10","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"1949:34:10"},"scope":2081,"src":"1895:89:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2042,"nodeType":"StructuredDocumentation","src":"1988:340:10","text":" @notice Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request\n @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n @param billing The request's billing configuration\n @return fee Cost in Juels (1e18) of LINK"},"functionSelector":"f1e14a21","id":2052,"implemented":false,"kind":"function","modifiers":[],"name":"getRequiredFee","nameLocation":"2340:14:10","nodeType":"FunctionDefinition","parameters":{"id":2048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2044,"mutability":"mutable","name":"data","nameLocation":"2370:4:10","nodeType":"VariableDeclaration","scope":2052,"src":"2355:19:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2043,"name":"bytes","nodeType":"ElementaryTypeName","src":"2355:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2047,"mutability":"mutable","name":"billing","nameLocation":"2434:7:10","nodeType":"VariableDeclaration","scope":2052,"src":"2376:65:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBilling_$1891_calldata_ptr","typeString":"struct FunctionsBillingRegistryInterface.RequestBilling"},"typeName":{"id":2046,"nodeType":"UserDefinedTypeName","pathNode":{"id":2045,"name":"FunctionsBillingRegistryInterface.RequestBilling","nodeType":"IdentifierPath","referencedDeclaration":1891,"src":"2376:48:10"},"referencedDeclaration":1891,"src":"2376:48:10","typeDescriptions":{"typeIdentifier":"t_struct$_RequestBilling_$1891_storage_ptr","typeString":"struct FunctionsBillingRegistryInterface.RequestBilling"}},"visibility":"internal"}],"src":"2354:88:10"},"returnParameters":{"id":2051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2050,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2052,"src":"2478:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":2049,"name":"uint96","nodeType":"ElementaryTypeName","src":"2478:6:10","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"2477:8:10"},"scope":2081,"src":"2331:155:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2053,"nodeType":"StructuredDocumentation","src":"2490:544:10","text":" @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\n @param subscriptionId A unique subscription ID allocated by billing system,\n a client can make requests from different contracts referencing the same subscription\n @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n @param gasLimit Gas limit for the fulfillment callback\n @return billedCost Cost in Juels (1e18) of LINK"},"functionSelector":"d227d245","id":2066,"implemented":false,"kind":"function","modifiers":[],"name":"estimateCost","nameLocation":"3046:12:10","nodeType":"FunctionDefinition","parameters":{"id":2062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"subscriptionId","nameLocation":"3071:14:10","nodeType":"VariableDeclaration","scope":2066,"src":"3064:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2054,"name":"uint64","nodeType":"ElementaryTypeName","src":"3064:6:10","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2057,"mutability":"mutable","name":"data","nameLocation":"3106:4:10","nodeType":"VariableDeclaration","scope":2066,"src":"3091:19:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2056,"name":"bytes","nodeType":"ElementaryTypeName","src":"3091:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2059,"mutability":"mutable","name":"gasLimit","nameLocation":"3123:8:10","nodeType":"VariableDeclaration","scope":2066,"src":"3116:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2058,"name":"uint32","nodeType":"ElementaryTypeName","src":"3116:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2061,"mutability":"mutable","name":"gasPrice","nameLocation":"3145:8:10","nodeType":"VariableDeclaration","scope":2066,"src":"3137:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2060,"name":"uint256","nodeType":"ElementaryTypeName","src":"3137:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3058:99:10"},"returnParameters":{"id":2065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2064,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2066,"src":"3181:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":2063,"name":"uint96","nodeType":"ElementaryTypeName","src":"3181:6:10","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"3180:8:10"},"scope":2081,"src":"3037:152:10","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2067,"nodeType":"StructuredDocumentation","src":"3193:493:10","text":" @notice Sends a request (encoded as data) using the provided subscriptionId\n @param subscriptionId A unique subscription ID allocated by billing system,\n a client can make requests from different contracts referencing the same subscription\n @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n @param gasLimit Gas limit for the fulfillment callback\n @return requestId A unique request identifier (unique per DON)"},"functionSelector":"a98eb206","id":2080,"implemented":false,"kind":"function","modifiers":[],"name":"sendRequest","nameLocation":"3698:11:10","nodeType":"FunctionDefinition","parameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2069,"mutability":"mutable","name":"subscriptionId","nameLocation":"3722:14:10","nodeType":"VariableDeclaration","scope":2080,"src":"3715:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2068,"name":"uint64","nodeType":"ElementaryTypeName","src":"3715:6:10","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2071,"mutability":"mutable","name":"data","nameLocation":"3757:4:10","nodeType":"VariableDeclaration","scope":2080,"src":"3742:19:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2070,"name":"bytes","nodeType":"ElementaryTypeName","src":"3742:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2073,"mutability":"mutable","name":"gasLimit","nameLocation":"3774:8:10","nodeType":"VariableDeclaration","scope":2080,"src":"3767:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2072,"name":"uint32","nodeType":"ElementaryTypeName","src":"3767:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2075,"mutability":"mutable","name":"gasPrice","nameLocation":"3796:8:10","nodeType":"VariableDeclaration","scope":2080,"src":"3788:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2074,"name":"uint256","nodeType":"ElementaryTypeName","src":"3788:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3709:99:10"},"returnParameters":{"id":2079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2078,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2080,"src":"3827:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2077,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3827:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3826:9:10"},"scope":2081,"src":"3689:147:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2082,"src":"164:3674:10","usedErrors":[]}],"src":"32:3807:10"},"id":10},"contracts/utils/AddressToString.sol":{"ast":{"absolutePath":"contracts/utils/AddressToString.sol","exportedSymbols":{"addressToString":[2187]},"id":2188,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2083,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"32:23:11"},{"body":{"id":2186,"nodeType":"Block","src":"211:376:11","statements":[{"assignments":[2092],"declarations":[{"constant":false,"id":2092,"mutability":"mutable","name":"value","nameLocation":"225:5:11","nodeType":"VariableDeclaration","scope":2186,"src":"217:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2091,"name":"bytes32","nodeType":"ElementaryTypeName","src":"217:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2103,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":2099,"name":"_addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2086,"src":"257:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2098,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"249:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2097,"name":"uint160","nodeType":"ElementaryTypeName","src":"249:7:11","typeDescriptions":{}}},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"249:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2096,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"241:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2095,"name":"uint256","nodeType":"ElementaryTypeName","src":"241:7:11","typeDescriptions":{}}},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"241:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2094,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"233:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2093,"name":"bytes32","nodeType":"ElementaryTypeName","src":"233:7:11","typeDescriptions":{}}},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"233:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"217:48:11"},{"assignments":[2105],"declarations":[{"constant":false,"id":2105,"mutability":"mutable","name":"alphabet","nameLocation":"284:8:11","nodeType":"VariableDeclaration","scope":2186,"src":"271:21:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2104,"name":"bytes","nodeType":"ElementaryTypeName","src":"271:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2107,"initialValue":{"hexValue":"30313233343536373839616263646566","id":2106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"295:18:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"nodeType":"VariableDeclarationStatement","src":"271:42:11"},{"assignments":[2109],"declarations":[{"constant":false,"id":2109,"mutability":"mutable","name":"str","nameLocation":"332:3:11","nodeType":"VariableDeclaration","scope":2186,"src":"319:16:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2108,"name":"bytes","nodeType":"ElementaryTypeName","src":"319:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2114,"initialValue":{"arguments":[{"hexValue":"3432","id":2112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"348:2:11","typeDescriptions":{"typeIdentifier":"t_rational_42_by_1","typeString":"int_const 42"},"value":"42"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_42_by_1","typeString":"int_const 42"}],"id":2111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"338:9:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2110,"name":"bytes","nodeType":"ElementaryTypeName","src":"342:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"338:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"319:32:11"},{"expression":{"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2115,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"357:3:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2117,"indexExpression":{"hexValue":"30","id":2116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"361:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"357:6:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"366:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"357:12:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2120,"nodeType":"ExpressionStatement","src":"357:12:11"},{"expression":{"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2121,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"375:3:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2123,"indexExpression":{"hexValue":"31","id":2122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"379:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"375:6:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"384:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"375:12:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2126,"nodeType":"ExpressionStatement","src":"375:12:11"},{"body":{"id":2179,"nodeType":"Block","src":"427:133:11","statements":[{"expression":{"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2137,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"437:3:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2143,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"441:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2139,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"445:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":2140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"449:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"445:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"441:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"437:14:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2144,"name":"alphabet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"454:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2155,"indexExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2147,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"469:5:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2151,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2148,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"475:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3132","id":2149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"479:2:11","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"475:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"469:13:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"486:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"469:18:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":2146,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"463:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2145,"name":"uint8","nodeType":"ElementaryTypeName","src":"463:5:11","typeDescriptions":{}}},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"463:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"454:35:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"437:52:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2157,"nodeType":"ExpressionStatement","src":"437:52:11"},{"expression":{"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2158,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"499:3:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2164,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"503:1:11","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2160,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"507:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":2161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"511:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"507:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"503:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"499:14:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2165,"name":"alphabet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"516:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2176,"indexExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2168,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"531:5:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2172,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2169,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"537:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3132","id":2170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"541:2:11","typeDescriptions":{"typeIdentifier":"t_rational_12_by_1","typeString":"int_const 12"},"value":"12"},"src":"537:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"531:13:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783066","id":2173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"547:4:11","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0x0f"},"src":"531:20:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"}],"id":2167,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"525:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2166,"name":"uint8","nodeType":"ElementaryTypeName","src":"525:5:11","typeDescriptions":{}}},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"525:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"516:37:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"499:54:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2178,"nodeType":"ExpressionStatement","src":"499:54:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2131,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"414:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3230","id":2132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"418:2:11","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"414:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2180,"initializationExpression":{"assignments":[2128],"declarations":[{"constant":false,"id":2128,"mutability":"mutable","name":"i","nameLocation":"407:1:11","nodeType":"VariableDeclaration","scope":2180,"src":"399:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2127,"name":"uint256","nodeType":"ElementaryTypeName","src":"399:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2130,"initialValue":{"hexValue":"30","id":2129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"411:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"399:13:11"},"loopExpression":{"expression":{"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"422:3:11","subExpression":{"id":2134,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"422:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2136,"nodeType":"ExpressionStatement","src":"422:3:11"},"nodeType":"ForStatement","src":"394:166:11"},{"expression":{"arguments":[{"id":2183,"name":"str","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"580:3:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2182,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"573:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2181,"name":"string","nodeType":"ElementaryTypeName","src":"573:6:11","typeDescriptions":{}}},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"573:11:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2090,"id":2185,"nodeType":"Return","src":"566:18:11"}]},"documentation":{"id":2084,"nodeType":"StructuredDocumentation","src":"57:83:11","text":" @notice Convert address to string\n @param _addr The address to convert"},"id":2187,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"addressToString","nameLocation":"151:15:11","nodeType":"FunctionDefinition","parameters":{"id":2087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2086,"mutability":"mutable","name":"_addr","nameLocation":"175:5:11","nodeType":"VariableDeclaration","scope":2187,"src":"167:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2085,"name":"address","nodeType":"ElementaryTypeName","src":"167:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"166:15:11"},"returnParameters":{"id":2090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2089,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2187,"src":"196:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2088,"name":"string","nodeType":"ElementaryTypeName","src":"196:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"195:15:11"},"scope":2188,"src":"142:445:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"src":"32:556:11"},"id":11}},"contracts":{"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol":{"ConfirmedOwner":{"abi":[{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The ConfirmedOwner contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_18":{"entryPoint":null,"id":18,"parameterSlots":1,"returnSlots":0},"@_75":{"entryPoint":null,"id":75,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_159":{"entryPoint":197,"id":159,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":367,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1011:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:209:12","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:12"},"nodeType":"YulFunctionCall","src":"143:12:12"},"nodeType":"YulExpressionStatement","src":"143:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:12"},"nodeType":"YulFunctionCall","src":"112:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:12"},"nodeType":"YulFunctionCall","src":"108:32:12"},"nodeType":"YulIf","src":"105:52:12"},{"nodeType":"YulVariableDeclaration","src":"166:29:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"185:9:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"179:5:12"},"nodeType":"YulFunctionCall","src":"179:16:12"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"170:5:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"258:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"267:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"270:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"260:6:12"},"nodeType":"YulFunctionCall","src":"260:12:12"},"nodeType":"YulExpressionStatement","src":"260:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"217:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"228:5:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"243:3:12","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"248:1:12","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"239:3:12"},"nodeType":"YulFunctionCall","src":"239:11:12"},{"kind":"number","nodeType":"YulLiteral","src":"252:1:12","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"235:3:12"},"nodeType":"YulFunctionCall","src":"235:19:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"224:3:12"},"nodeType":"YulFunctionCall","src":"224:31:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"214:2:12"},"nodeType":"YulFunctionCall","src":"214:42:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"207:6:12"},"nodeType":"YulFunctionCall","src":"207:50:12"},"nodeType":"YulIf","src":"204:70:12"},{"nodeType":"YulAssignment","src":"283:15:12","value":{"name":"value","nodeType":"YulIdentifier","src":"293:5:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"283:6:12"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:12","type":""}],"src":"14:290:12"},{"body":{"nodeType":"YulBlock","src":"483:174:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"500:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"511:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"493:6:12"},"nodeType":"YulFunctionCall","src":"493:21:12"},"nodeType":"YulExpressionStatement","src":"493:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"534:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"545:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"530:3:12"},"nodeType":"YulFunctionCall","src":"530:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"550:2:12","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"523:6:12"},"nodeType":"YulFunctionCall","src":"523:30:12"},"nodeType":"YulExpressionStatement","src":"523:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"573:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"584:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"569:3:12"},"nodeType":"YulFunctionCall","src":"569:18:12"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nodeType":"YulLiteral","src":"589:26:12","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"562:6:12"},"nodeType":"YulFunctionCall","src":"562:54:12"},"nodeType":"YulExpressionStatement","src":"562:54:12"},{"nodeType":"YulAssignment","src":"625:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"637:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"648:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"633:3:12"},"nodeType":"YulFunctionCall","src":"633:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"625:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"460:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"474:4:12","type":""}],"src":"309:348:12"},{"body":{"nodeType":"YulBlock","src":"836:173:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"864:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"846:6:12"},"nodeType":"YulFunctionCall","src":"846:21:12"},"nodeType":"YulExpressionStatement","src":"846:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"887:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"898:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"883:3:12"},"nodeType":"YulFunctionCall","src":"883:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"903:2:12","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"876:6:12"},"nodeType":"YulFunctionCall","src":"876:30:12"},"nodeType":"YulExpressionStatement","src":"876:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"926:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"937:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"922:3:12"},"nodeType":"YulFunctionCall","src":"922:18:12"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"942:25:12","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"915:6:12"},"nodeType":"YulFunctionCall","src":"915:53:12"},"nodeType":"YulExpressionStatement","src":"915:53:12"},{"nodeType":"YulAssignment","src":"977:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"989:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1000:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"985:3:12"},"nodeType":"YulFunctionCall","src":"985:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"977:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"813:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"827:4:12","type":""}],"src":"662:347:12"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Cannot set owner to zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405161048038038061048083398101604081905261002f9161016f565b8060006001600160a01b03821661008d5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156100bd576100bd816100c5565b50505061019f565b6001600160a01b03811633141561011e5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610084565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561018157600080fd5b81516001600160a01b038116811461019857600080fd5b9392505050565b6102d2806101ae6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d36600461026c565b610145565b6001546001600160a01b031633146100e15760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b600080543373ffffffffffffffffffffffffffffffffffffffff19808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b61014d610159565b610156816101b5565b50565b6000546001600160a01b031633146101b35760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016100d8565b565b6001600160a01b03811633141561020e5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016100d8565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561027e57600080fd5b81356001600160a01b038116811461029557600080fd5b939250505056fea2646970667358221220c4babed352620b24a4cdf4d8784fcd53e477f9493128b657f8d7a2061bb5498e64736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x480 CODESIZE SUB DUP1 PUSH2 0x480 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x16F JUMP JUMPDEST DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP2 AND ISZERO PUSH2 0xBD JUMPI PUSH2 0xBD DUP2 PUSH2 0xC5 JUMP JUMPDEST POP POP POP PUSH2 0x19F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ ISZERO PUSH2 0x11E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x84 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2D2 DUP1 PUSH2 0x1AE PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x26C JUMP JUMPDEST PUSH2 0x145 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x14D PUSH2 0x159 JUMP JUMPDEST PUSH2 0x156 DUP2 PUSH2 0x1B5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ ISZERO PUSH2 0x20E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 0xBA 0xBE 0xD3 MSTORE PUSH3 0xB24A4 0xCD DELEGATECALL 0xD8 PUSH25 0x4FCD53E477F9493128B657F8D7A2061BB5498E64736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"212:141:0:-:0;;;270:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;327:8;345:1;-1:-1:-1;;;;;552:22:1;;544:59;;;;-1:-1:-1;;;544:59:1;;511:2:12;544:59:1;;;493:21:12;550:2;530:18;;;523:30;589:26;569:18;;;562:54;633:18;;544:59:1;;;;;;;;;610:7;:18;;-1:-1:-1;;;;;;610:18:1;-1:-1:-1;;;;;610:18:1;;;;;;;;;;638:26;;;634:79;;674:32;693:12;674:18;:32::i;:::-;486:231;;270:81:0;212:141;;1497:188:1;-1:-1:-1;;;;;1559:16:1;;1565:10;1559:16;;1551:52;;;;-1:-1:-1;;;1551:52:1;;864:2:12;1551:52:1;;;846:21:12;903:2;883:18;;;876:30;942:25;922:18;;;915:53;985:18;;1551:52:1;662:347:12;1551:52:1;1610:14;:19;;-1:-1:-1;;;;;;1610:19:1;-1:-1:-1;;;;;1610:19:1;;;;;;;;;-1:-1:-1;1668:7:1;;1641:39;;1610:19;;1668:7;;1641:39;;-1:-1:-1;1641:39:1;1497:188;:::o;14:290:12:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:12;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:12:o;662:347::-;212:141:0;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transferOwnership_159":{"entryPoint":437,"id":159,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_172":{"entryPoint":345,"id":172,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_125":{"entryPoint":130,"id":125,"parameterSlots":0,"returnSlots":0},"@owner_135":{"entryPoint":null,"id":135,"parameterSlots":0,"returnSlots":1},"@transferOwnership_89":{"entryPoint":325,"id":89,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":620,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1610:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"84:239:12","statements":[{"body":{"nodeType":"YulBlock","src":"130:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"139:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"142:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"132:6:12"},"nodeType":"YulFunctionCall","src":"132:12:12"},"nodeType":"YulExpressionStatement","src":"132:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"105:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"114:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"101:3:12"},"nodeType":"YulFunctionCall","src":"101:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"126:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"97:3:12"},"nodeType":"YulFunctionCall","src":"97:32:12"},"nodeType":"YulIf","src":"94:52:12"},{"nodeType":"YulVariableDeclaration","src":"155:36:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"181:9:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"168:12:12"},"nodeType":"YulFunctionCall","src":"168:23:12"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"159:5:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"277:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"286:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"289:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"279:6:12"},"nodeType":"YulFunctionCall","src":"279:12:12"},"nodeType":"YulExpressionStatement","src":"279:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"213:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"224:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"231:42:12","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"220:3:12"},"nodeType":"YulFunctionCall","src":"220:54:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"210:2:12"},"nodeType":"YulFunctionCall","src":"210:65:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"203:6:12"},"nodeType":"YulFunctionCall","src":"203:73:12"},"nodeType":"YulIf","src":"200:93:12"},{"nodeType":"YulAssignment","src":"302:15:12","value":{"name":"value","nodeType":"YulIdentifier","src":"312:5:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"302:6:12"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"61:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"73:6:12","type":""}],"src":"14:309:12"},{"body":{"nodeType":"YulBlock","src":"429:125:12","statements":[{"nodeType":"YulAssignment","src":"439:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"451:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"462:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"447:3:12"},"nodeType":"YulFunctionCall","src":"447:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"439:4:12"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"481:9:12"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"496:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"504:42:12","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"492:3:12"},"nodeType":"YulFunctionCall","src":"492:55:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"474:6:12"},"nodeType":"YulFunctionCall","src":"474:74:12"},"nodeType":"YulExpressionStatement","src":"474:74:12"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"398:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"409:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"420:4:12","type":""}],"src":"328:226:12"},{"body":{"nodeType":"YulBlock","src":"733:172:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"750:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"761:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"743:6:12"},"nodeType":"YulFunctionCall","src":"743:21:12"},"nodeType":"YulExpressionStatement","src":"743:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"784:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"795:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"780:3:12"},"nodeType":"YulFunctionCall","src":"780:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"800:2:12","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"773:6:12"},"nodeType":"YulFunctionCall","src":"773:30:12"},"nodeType":"YulExpressionStatement","src":"773:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"823:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"834:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"819:3:12"},"nodeType":"YulFunctionCall","src":"819:18:12"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nodeType":"YulLiteral","src":"839:24:12","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"812:6:12"},"nodeType":"YulFunctionCall","src":"812:52:12"},"nodeType":"YulExpressionStatement","src":"812:52:12"},{"nodeType":"YulAssignment","src":"873:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"885:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"896:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:12"},"nodeType":"YulFunctionCall","src":"881:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"873:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"710:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"724:4:12","type":""}],"src":"559:346:12"},{"body":{"nodeType":"YulBlock","src":"1084:172:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1101:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1112:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1094:6:12"},"nodeType":"YulFunctionCall","src":"1094:21:12"},"nodeType":"YulExpressionStatement","src":"1094:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1135:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1146:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1131:3:12"},"nodeType":"YulFunctionCall","src":"1131:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"1151:2:12","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1124:6:12"},"nodeType":"YulFunctionCall","src":"1124:30:12"},"nodeType":"YulExpressionStatement","src":"1124:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1174:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1185:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1170:3:12"},"nodeType":"YulFunctionCall","src":"1170:18:12"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nodeType":"YulLiteral","src":"1190:24:12","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1163:6:12"},"nodeType":"YulFunctionCall","src":"1163:52:12"},"nodeType":"YulExpressionStatement","src":"1163:52:12"},{"nodeType":"YulAssignment","src":"1224:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1236:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1247:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1232:3:12"},"nodeType":"YulFunctionCall","src":"1232:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1224:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1061:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1075:4:12","type":""}],"src":"910:346:12"},{"body":{"nodeType":"YulBlock","src":"1435:173:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1452:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1463:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1445:6:12"},"nodeType":"YulFunctionCall","src":"1445:21:12"},"nodeType":"YulExpressionStatement","src":"1445:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1486:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1497:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1482:3:12"},"nodeType":"YulFunctionCall","src":"1482:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"1502:2:12","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1475:6:12"},"nodeType":"YulFunctionCall","src":"1475:30:12"},"nodeType":"YulExpressionStatement","src":"1475:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1525:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1536:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1521:3:12"},"nodeType":"YulFunctionCall","src":"1521:18:12"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"1541:25:12","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1514:6:12"},"nodeType":"YulFunctionCall","src":"1514:53:12"},"nodeType":"YulExpressionStatement","src":"1514:53:12"},{"nodeType":"YulAssignment","src":"1576:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1588:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1599:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1584:3:12"},"nodeType":"YulFunctionCall","src":"1584:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1576:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1412:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1426:4:12","type":""}],"src":"1261:347:12"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Must be proposed owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Only callable by owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d36600461026c565b610145565b6001546001600160a01b031633146100e15760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b600080543373ffffffffffffffffffffffffffffffffffffffff19808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b61014d610159565b610156816101b5565b50565b6000546001600160a01b031633146101b35760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016100d8565b565b6001600160a01b03811633141561020e5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016100d8565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561027e57600080fd5b81356001600160a01b038116811461029557600080fd5b939250505056fea2646970667358221220c4babed352620b24a4cdf4d8784fcd53e477f9493128b657f8d7a2061bb5498e64736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x26C JUMP JUMPDEST PUSH2 0x145 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x14D PUSH2 0x159 JUMP JUMPDEST PUSH2 0x156 DUP2 PUSH2 0x1B5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ ISZERO PUSH2 0x20E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 0xBA 0xBE 0xD3 MSTORE PUSH3 0xB24A4 0xCD DELEGATECALL 0xD8 PUSH25 0x4FCD53E477F9493128B657F8D7A2061BB5498E64736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"212:141:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1016:265:1;;;:::i;:::-;;1332:81;1379:7;1401;1332:81;;;-1:-1:-1;;;;;1401:7:1;;;474:74:12;;1332:81:1;;;;;462:2:12;1332:81:1;;;826:98;;;;;;:::i;:::-;;:::i;1016:265::-;1089:14;;-1:-1:-1;;;;;1089:14:1;1075:10;:28;1067:63;;;;-1:-1:-1;;;1067:63:1;;761:2:12;1067:63:1;;;743:21:12;800:2;780:18;;;773:30;839:24;819:18;;;812:52;881:18;;1067:63:1;;;;;;;;;1137:16;1156:7;;1179:10;-1:-1:-1;;1169:20:1;;;;;;;-1:-1:-1;1195:27:1;;;;;;;1234:42;;-1:-1:-1;;;;;1156:7:1;;;;1179:10;;1156:7;;1234:42;;;1061:220;1016:265::o;826:98::-;1956:20;:18;:20::i;:::-;897:22:::1;916:2;897:18;:22::i;:::-;826:98:::0;:::o;1730:111::-;1802:7;;-1:-1:-1;;;;;1802:7:1;1788:10;:21;1780:56;;;;-1:-1:-1;;;1780:56:1;;1112:2:12;1780:56:1;;;1094:21:12;1151:2;1131:18;;;1124:30;1190:24;1170:18;;;1163:52;1232:18;;1780:56:1;910:346:12;1780:56:1;1730:111::o;1497:188::-;-1:-1:-1;;;;;1559:16:1;;1565:10;1559:16;;1551:52;;;;-1:-1:-1;;;1551:52:1;;1463:2:12;1551:52:1;;;1445:21:12;1502:2;1482:18;;;1475:30;1541:25;1521:18;;;1514:53;1584:18;;1551:52:1;1261:347:12;1551:52:1;1610:14;:19;;-1:-1:-1;;1610:19:1;-1:-1:-1;;;;;1610:19:1;;;;;;;;;-1:-1:-1;1668:7:1;;1641:39;;1610:19;;1668:7;;1641:39;;-1:-1:-1;1641:39:1;1497:188;:::o;14:309:12:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;181:9;168:23;-1:-1:-1;;;;;224:5:12;220:54;213:5;210:65;200:93;;289:1;286;279:12;200:93;312:5;14:309;-1:-1:-1;;;14:309:12:o"},"gasEstimates":{"creation":{"codeDepositCost":"144400","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"52265","owner()":"2292","transferOwnership(address)":"30414"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The ConfirmedOwner contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"A contract with helpers for basic contract ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":\"ConfirmedOwner\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":27,"contract":"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol:ConfirmedOwner","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":29,"contract":"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol:ConfirmedOwner","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address, pending."}},"notice":"A contract with helpers for basic contract ownership.","version":1}}},"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol":{"ConfirmedOwnerWithProposal":{"abi":[{"inputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"address","name":"pendingOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The ConfirmedOwner contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_75":{"entryPoint":null,"id":75,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_159":{"entryPoint":193,"id":159,"parameterSlots":1,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":363,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":391,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1196:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:12","statements":[{"nodeType":"YulAssignment","src":"84:22:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:12"},"nodeType":"YulFunctionCall","src":"93:13:12"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:12"}]},{"body":{"nodeType":"YulBlock","src":"169:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:12"},"nodeType":"YulFunctionCall","src":"171:12:12"},"nodeType":"YulExpressionStatement","src":"171:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:12","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:12","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:12"},"nodeType":"YulFunctionCall","src":"150:11:12"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:12","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:12"},"nodeType":"YulFunctionCall","src":"146:19:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:12"},"nodeType":"YulFunctionCall","src":"135:31:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:12"},"nodeType":"YulFunctionCall","src":"125:42:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:12"},"nodeType":"YulFunctionCall","src":"118:50:12"},"nodeType":"YulIf","src":"115:70:12"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:12","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:12","type":""}],"src":"14:177:12"},{"body":{"nodeType":"YulBlock","src":"294:195:12","statements":[{"body":{"nodeType":"YulBlock","src":"340:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"349:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"352:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"342:6:12"},"nodeType":"YulFunctionCall","src":"342:12:12"},"nodeType":"YulExpressionStatement","src":"342:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"315:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"324:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"311:3:12"},"nodeType":"YulFunctionCall","src":"311:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"336:2:12","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"307:3:12"},"nodeType":"YulFunctionCall","src":"307:32:12"},"nodeType":"YulIf","src":"304:52:12"},{"nodeType":"YulAssignment","src":"365:50:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"405:9:12"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"375:29:12"},"nodeType":"YulFunctionCall","src":"375:40:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"365:6:12"}]},{"nodeType":"YulAssignment","src":"424:59:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:12"},"nodeType":"YulFunctionCall","src":"464:18:12"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"434:29:12"},"nodeType":"YulFunctionCall","src":"434:49:12"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"424:6:12"}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"252:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"263:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"275:6:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"283:6:12","type":""}],"src":"196:293:12"},{"body":{"nodeType":"YulBlock","src":"668:174:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"685:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"696:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"678:6:12"},"nodeType":"YulFunctionCall","src":"678:21:12"},"nodeType":"YulExpressionStatement","src":"678:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"719:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"730:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"715:3:12"},"nodeType":"YulFunctionCall","src":"715:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"735:2:12","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"708:6:12"},"nodeType":"YulFunctionCall","src":"708:30:12"},"nodeType":"YulExpressionStatement","src":"708:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"758:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"769:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"754:3:12"},"nodeType":"YulFunctionCall","src":"754:18:12"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nodeType":"YulLiteral","src":"774:26:12","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"747:6:12"},"nodeType":"YulFunctionCall","src":"747:54:12"},"nodeType":"YulExpressionStatement","src":"747:54:12"},{"nodeType":"YulAssignment","src":"810:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"822:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"833:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"818:3:12"},"nodeType":"YulFunctionCall","src":"818:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"810:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"645:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"659:4:12","type":""}],"src":"494:348:12"},{"body":{"nodeType":"YulBlock","src":"1021:173:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1038:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1049:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1031:6:12"},"nodeType":"YulFunctionCall","src":"1031:21:12"},"nodeType":"YulExpressionStatement","src":"1031:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1072:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1083:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1068:3:12"},"nodeType":"YulFunctionCall","src":"1068:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"1088:2:12","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1061:6:12"},"nodeType":"YulFunctionCall","src":"1061:30:12"},"nodeType":"YulExpressionStatement","src":"1061:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1111:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1122:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1107:3:12"},"nodeType":"YulFunctionCall","src":"1107:18:12"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"1127:25:12","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1100:6:12"},"nodeType":"YulFunctionCall","src":"1100:53:12"},"nodeType":"YulExpressionStatement","src":"1100:53:12"},{"nodeType":"YulAssignment","src":"1162:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1174:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1185:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1170:3:12"},"nodeType":"YulFunctionCall","src":"1170:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1162:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"998:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1012:4:12","type":""}],"src":"847:347:12"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Cannot set owner to zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405161049b38038061049b83398101604081905261002f91610187565b6001600160a01b03821661008a5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156100ba576100ba816100c1565b50506101ba565b6001600160a01b03811633141561011a5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610081565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b80516001600160a01b038116811461018257600080fd5b919050565b6000806040838503121561019a57600080fd5b6101a38361016b565b91506101b16020840161016b565b90509250929050565b6102d2806101c96000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d36600461026c565b610145565b6001546001600160a01b031633146100e15760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b600080543373ffffffffffffffffffffffffffffffffffffffff19808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b61014d610159565b610156816101b5565b50565b6000546001600160a01b031633146101b35760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016100d8565b565b6001600160a01b03811633141561020e5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016100d8565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561027e57600080fd5b81356001600160a01b038116811461029557600080fd5b939250505056fea2646970667358221220e50b034f29a53400f363c4f711feca667436a4c11d651b6dc5f3fe4dbaf8a56664736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x49B CODESIZE SUB DUP1 PUSH2 0x49B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x187 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP2 AND ISZERO PUSH2 0xBA JUMPI PUSH2 0xBA DUP2 PUSH2 0xC1 JUMP JUMPDEST POP POP PUSH2 0x1BA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ ISZERO PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x81 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A3 DUP4 PUSH2 0x16B JUMP JUMPDEST SWAP2 POP PUSH2 0x1B1 PUSH1 0x20 DUP5 ADD PUSH2 0x16B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D2 DUP1 PUSH2 0x1C9 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x26C JUMP JUMPDEST PUSH2 0x145 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x14D PUSH2 0x159 JUMP JUMPDEST PUSH2 0x156 DUP2 PUSH2 0x1B5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ ISZERO PUSH2 0x20E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 SIGNEXTEND SUB 0x4F 0x29 0xA5 CALLVALUE STOP RETURN PUSH4 0xC4F711FE 0xCA PUSH7 0x7436A4C11D651B PUSH14 0xC5F3FE4DBAF8A56664736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"213:1777:1:-:0;;;486:231;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;552:22:1;;544:59;;;;-1:-1:-1;;;544:59:1;;696:2:12;544:59:1;;;678:21:12;735:2;715:18;;;708:30;774:26;754:18;;;747:54;818:18;;544:59:1;;;;;;;;;610:7;:18;;-1:-1:-1;;;;;;610:18:1;-1:-1:-1;;;;;610:18:1;;;;;;;;;;638:26;;;634:79;;674:32;693:12;674:18;:32::i;:::-;486:231;;213:1777;;1497:188;-1:-1:-1;;;;;1559:16:1;;1565:10;1559:16;;1551:52;;;;-1:-1:-1;;;1551:52:1;;1049:2:12;1551:52:1;;;1031:21:12;1088:2;1068:18;;;1061:30;1127:25;1107:18;;;1100:53;1170:18;;1551:52:1;847:347:12;1551:52:1;1610:14;:19;;-1:-1:-1;;;;;;1610:19:1;-1:-1:-1;;;;;1610:19:1;;;;;;;;;-1:-1:-1;1668:7:1;;1641:39;;1610:19;;1668:7;;1641:39;;-1:-1:-1;1641:39:1;1497:188;:::o;14:177:12:-;93:13;;-1:-1:-1;;;;;135:31:12;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;847:347::-;213:1777:1;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transferOwnership_159":{"entryPoint":437,"id":159,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_172":{"entryPoint":345,"id":172,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_125":{"entryPoint":130,"id":125,"parameterSlots":0,"returnSlots":0},"@owner_135":{"entryPoint":null,"id":135,"parameterSlots":0,"returnSlots":1},"@transferOwnership_89":{"entryPoint":325,"id":89,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":620,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1610:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"84:239:12","statements":[{"body":{"nodeType":"YulBlock","src":"130:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"139:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"142:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"132:6:12"},"nodeType":"YulFunctionCall","src":"132:12:12"},"nodeType":"YulExpressionStatement","src":"132:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"105:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"114:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"101:3:12"},"nodeType":"YulFunctionCall","src":"101:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"126:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"97:3:12"},"nodeType":"YulFunctionCall","src":"97:32:12"},"nodeType":"YulIf","src":"94:52:12"},{"nodeType":"YulVariableDeclaration","src":"155:36:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"181:9:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"168:12:12"},"nodeType":"YulFunctionCall","src":"168:23:12"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"159:5:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"277:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"286:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"289:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"279:6:12"},"nodeType":"YulFunctionCall","src":"279:12:12"},"nodeType":"YulExpressionStatement","src":"279:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"213:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"224:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"231:42:12","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"220:3:12"},"nodeType":"YulFunctionCall","src":"220:54:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"210:2:12"},"nodeType":"YulFunctionCall","src":"210:65:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"203:6:12"},"nodeType":"YulFunctionCall","src":"203:73:12"},"nodeType":"YulIf","src":"200:93:12"},{"nodeType":"YulAssignment","src":"302:15:12","value":{"name":"value","nodeType":"YulIdentifier","src":"312:5:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"302:6:12"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"50:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"61:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"73:6:12","type":""}],"src":"14:309:12"},{"body":{"nodeType":"YulBlock","src":"429:125:12","statements":[{"nodeType":"YulAssignment","src":"439:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"451:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"462:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"447:3:12"},"nodeType":"YulFunctionCall","src":"447:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"439:4:12"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"481:9:12"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"496:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"504:42:12","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"492:3:12"},"nodeType":"YulFunctionCall","src":"492:55:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"474:6:12"},"nodeType":"YulFunctionCall","src":"474:74:12"},"nodeType":"YulExpressionStatement","src":"474:74:12"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"398:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"409:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"420:4:12","type":""}],"src":"328:226:12"},{"body":{"nodeType":"YulBlock","src":"733:172:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"750:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"761:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"743:6:12"},"nodeType":"YulFunctionCall","src":"743:21:12"},"nodeType":"YulExpressionStatement","src":"743:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"784:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"795:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"780:3:12"},"nodeType":"YulFunctionCall","src":"780:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"800:2:12","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"773:6:12"},"nodeType":"YulFunctionCall","src":"773:30:12"},"nodeType":"YulExpressionStatement","src":"773:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"823:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"834:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"819:3:12"},"nodeType":"YulFunctionCall","src":"819:18:12"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nodeType":"YulLiteral","src":"839:24:12","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"812:6:12"},"nodeType":"YulFunctionCall","src":"812:52:12"},"nodeType":"YulExpressionStatement","src":"812:52:12"},{"nodeType":"YulAssignment","src":"873:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"885:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"896:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:12"},"nodeType":"YulFunctionCall","src":"881:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"873:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"710:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"724:4:12","type":""}],"src":"559:346:12"},{"body":{"nodeType":"YulBlock","src":"1084:172:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1101:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1112:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1094:6:12"},"nodeType":"YulFunctionCall","src":"1094:21:12"},"nodeType":"YulExpressionStatement","src":"1094:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1135:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1146:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1131:3:12"},"nodeType":"YulFunctionCall","src":"1131:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"1151:2:12","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1124:6:12"},"nodeType":"YulFunctionCall","src":"1124:30:12"},"nodeType":"YulExpressionStatement","src":"1124:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1174:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1185:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1170:3:12"},"nodeType":"YulFunctionCall","src":"1170:18:12"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nodeType":"YulLiteral","src":"1190:24:12","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1163:6:12"},"nodeType":"YulFunctionCall","src":"1163:52:12"},"nodeType":"YulExpressionStatement","src":"1163:52:12"},{"nodeType":"YulAssignment","src":"1224:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1236:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1247:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1232:3:12"},"nodeType":"YulFunctionCall","src":"1232:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1224:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1061:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1075:4:12","type":""}],"src":"910:346:12"},{"body":{"nodeType":"YulBlock","src":"1435:173:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1452:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1463:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1445:6:12"},"nodeType":"YulFunctionCall","src":"1445:21:12"},"nodeType":"YulExpressionStatement","src":"1445:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1486:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1497:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1482:3:12"},"nodeType":"YulFunctionCall","src":"1482:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"1502:2:12","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1475:6:12"},"nodeType":"YulFunctionCall","src":"1475:30:12"},"nodeType":"YulExpressionStatement","src":"1475:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1525:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1536:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1521:3:12"},"nodeType":"YulFunctionCall","src":"1521:18:12"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"1541:25:12","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1514:6:12"},"nodeType":"YulFunctionCall","src":"1514:53:12"},"nodeType":"YulExpressionStatement","src":"1514:53:12"},{"nodeType":"YulAssignment","src":"1576:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1588:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1599:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1584:3:12"},"nodeType":"YulFunctionCall","src":"1584:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1576:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1412:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1426:4:12","type":""}],"src":"1261:347:12"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Must be proposed owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Only callable by owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d36600461026c565b610145565b6001546001600160a01b031633146100e15760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b600080543373ffffffffffffffffffffffffffffffffffffffff19808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b61014d610159565b610156816101b5565b50565b6000546001600160a01b031633146101b35760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016100d8565b565b6001600160a01b03811633141561020e5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016100d8565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561027e57600080fd5b81356001600160a01b038116811461029557600080fd5b939250505056fea2646970667358221220e50b034f29a53400f363c4f711feca667436a4c11d651b6dc5f3fe4dbaf8a56664736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x26C JUMP JUMPDEST PUSH2 0x145 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x14D PUSH2 0x159 JUMP JUMPDEST PUSH2 0x156 DUP2 PUSH2 0x1B5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ ISZERO PUSH2 0x20E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD8 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE5 SIGNEXTEND SUB 0x4F 0x29 0xA5 CALLVALUE STOP RETURN PUSH4 0xC4F711FE 0xCA PUSH7 0x7436A4C11D651B PUSH14 0xC5F3FE4DBAF8A56664736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"213:1777:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1016:265;;;:::i;:::-;;1332:81;1379:7;1401;1332:81;;;-1:-1:-1;;;;;1401:7:1;;;474:74:12;;1332:81:1;;;;;462:2:12;1332:81:1;;;826:98;;;;;;:::i;:::-;;:::i;1016:265::-;1089:14;;-1:-1:-1;;;;;1089:14:1;1075:10;:28;1067:63;;;;-1:-1:-1;;;1067:63:1;;761:2:12;1067:63:1;;;743:21:12;800:2;780:18;;;773:30;839:24;819:18;;;812:52;881:18;;1067:63:1;;;;;;;;;1137:16;1156:7;;1179:10;-1:-1:-1;;1169:20:1;;;;;;;-1:-1:-1;1195:27:1;;;;;;;1234:42;;-1:-1:-1;;;;;1156:7:1;;;;1179:10;;1156:7;;1234:42;;;1061:220;1016:265::o;826:98::-;1956:20;:18;:20::i;:::-;897:22:::1;916:2;897:18;:22::i;:::-;826:98:::0;:::o;1730:111::-;1802:7;;-1:-1:-1;;;;;1802:7:1;1788:10;:21;1780:56;;;;-1:-1:-1;;;1780:56:1;;1112:2:12;1780:56:1;;;1094:21:12;1151:2;1131:18;;;1124:30;1190:24;1170:18;;;1163:52;1232:18;;1780:56:1;910:346:12;1780:56:1;1730:111::o;1497:188::-;-1:-1:-1;;;;;1559:16:1;;1565:10;1559:16;;1551:52;;;;-1:-1:-1;;;1551:52:1;;1463:2:12;1551:52:1;;;1445:21:12;1502:2;1482:18;;;1475:30;1541:25;1521:18;;;1514:53;1584:18;;1551:52:1;1261:347:12;1551:52:1;1610:14;:19;;-1:-1:-1;;1610:19:1;-1:-1:-1;;;;;1610:19:1;;;;;;;;;-1:-1:-1;1668:7:1;;1641:39;;1610:19;;1668:7;;1641:39;;-1:-1:-1;1641:39:1;1497:188;:::o;14:309:12:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;181:9;168:23;-1:-1:-1;;;;;224:5:12;220:54;213:5;210:65;200:93;;289:1;286;279:12;200:93;312:5;14:309;-1:-1:-1;;;14:309:12:o"},"gasEstimates":{"creation":{"codeDepositCost":"144400","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"52265","owner()":"2292","transferOwnership(address)":"30414"},"internal":{"_transferOwnership(address)":"infinite","_validateOwnership()":"infinite"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The ConfirmedOwner contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"A contract with helpers for basic contract ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":\"ConfirmedOwnerWithProposal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":27,"contract":"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol:ConfirmedOwnerWithProposal","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":29,"contract":"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol:ConfirmedOwnerWithProposal","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address, pending."}},"notice":"A contract with helpers for basic contract ownership.","version":1}}},"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol":{"OwnableInterface":{"abi":[{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":\"OwnableInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol":{"BufferChainlink":{"abi":[],"devdoc":{"details":"A library for working with mutable byte buffers in Solidity. Byte buffers are mutable and expandable, and provide a variety of primitives for writing to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085eb757609f8e68222629cf3e6ebba857424586fe5a5ec81dd879d60ffa9876d64736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xEB PUSH22 0x7609F8E68222629CF3E6EBBA857424586FE5A5EC81DD DUP8 SWAP14 PUSH1 0xFF 0xA9 DUP8 PUSH14 0x64736F6C63430008070033000000 ","sourceMap":"441:9632:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;441:9632:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085eb757609f8e68222629cf3e6ebba857424586fe5a5ec81dd879d60ffa9876d64736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xEB PUSH22 0x7609F8E68222629CF3E6EBBA857424586FE5A5EC81DD DUP8 SWAP14 PUSH1 0xFF 0xA9 DUP8 PUSH14 0x64736F6C63430008070033000000 ","sourceMap":"441:9632:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"append(struct BufferChainlink.buffer memory,bytes memory)":"infinite","append(struct BufferChainlink.buffer memory,bytes memory,uint256)":"infinite","appendBytes20(struct BufferChainlink.buffer memory,bytes20)":"infinite","appendBytes32(struct BufferChainlink.buffer memory,bytes32)":"infinite","appendInt(struct BufferChainlink.buffer memory,uint256,uint256)":"infinite","appendUint8(struct BufferChainlink.buffer memory,uint8)":"infinite","fromBytes(bytes memory)":"infinite","init(struct BufferChainlink.buffer memory,uint256)":"infinite","max(uint256,uint256)":"infinite","resize(struct BufferChainlink.buffer memory,uint256)":"infinite","truncate(struct BufferChainlink.buffer memory)":"infinite","write(struct BufferChainlink.buffer memory,uint256,bytes memory,uint256)":"infinite","write(struct BufferChainlink.buffer memory,uint256,bytes32,uint256)":"infinite","writeBytes20(struct BufferChainlink.buffer memory,uint256,bytes20)":"infinite","writeInt(struct BufferChainlink.buffer memory,uint256,uint256,uint256)":"infinite","writeUint8(struct BufferChainlink.buffer memory,uint256,uint8)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"A library for working with mutable byte buffers in Solidity. Byte buffers are mutable and expandable, and provide a variety of primitives for writing to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":\"BufferChainlink\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol":{"CBORChainlink":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dd5439ffd70e5653a0d15b06f62e424b52c77c8455c444b12efd4dca5d897f8f64736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD SLOAD CODECOPY SELFDESTRUCT 0xD7 0xE JUMP MSTORE8 LOG0 0xD1 JUMPDEST MOD 0xF6 0x2E TIMESTAMP 0x4B MSTORE 0xC7 PUSH29 0x8455C444B12EFD4DCA5D897F8F64736F6C634300080700330000000000 ","sourceMap":"115:3271:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;115:3271:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dd5439ffd70e5653a0d15b06f62e424b52c77c8455c444b12efd4dca5d897f8f64736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD SLOAD CODECOPY SELFDESTRUCT 0xD7 0xE JUMP MSTORE8 LOG0 0xD1 JUMPDEST MOD 0xF6 0x2E TIMESTAMP 0x4B MSTORE 0xC7 PUSH29 0x8455C444B12EFD4DCA5D897F8F64736F6C634300080700330000000000 ","sourceMap":"115:3271:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"encodeBigNum(struct BufferChainlink.buffer memory,uint256)":"infinite","encodeBytes(struct BufferChainlink.buffer memory,bytes memory)":"infinite","encodeFixedNumeric(struct BufferChainlink.buffer memory,uint8,uint64)":"infinite","encodeIndefiniteLengthType(struct BufferChainlink.buffer memory,uint8)":"infinite","encodeInt(struct BufferChainlink.buffer memory,int256)":"infinite","encodeSignedBigNum(struct BufferChainlink.buffer memory,int256)":"infinite","encodeString(struct BufferChainlink.buffer memory,string memory)":"infinite","encodeUInt(struct BufferChainlink.buffer memory,uint256)":"infinite","endSequence(struct BufferChainlink.buffer memory)":"infinite","startArray(struct BufferChainlink.buffer memory)":"infinite","startMap(struct BufferChainlink.buffer memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":\"CBORChainlink\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/TwitterVerifier.sol":{"TwitterVerifier":{"abi":[{"inputs":[{"internalType":"address","name":"oracle","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"EmptyArgs","type":"error"},{"inputs":[],"name":"EmptySecrets","type":"error"},{"inputs":[],"name":"EmptySource","type":"error"},{"inputs":[],"name":"RequestIsAlreadyPending","type":"error"},{"inputs":[],"name":"RequestIsNotPending","type":"error"},{"inputs":[],"name":"SenderIsNotRegistry","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"requestId","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"result","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"err","type":"bytes"}],"name":"OCRResponse","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestSent","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"enum Functions.Location","name":"codeLocation","type":"uint8"},{"internalType":"enum Functions.Location","name":"secretsLocation","type":"uint8"},{"internalType":"enum Functions.CodeLanguage","name":"language","type":"uint8"},{"internalType":"string","name":"source","type":"string"},{"internalType":"bytes","name":"secrets","type":"bytes"},{"internalType":"string[]","name":"args","type":"string[]"}],"internalType":"struct Functions.Request","name":"req","type":"tuple"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"gasLimit","type":"uint32"},{"internalType":"uint256","name":"gasPrice","type":"uint256"}],"name":"estimateCost","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"source","type":"string"},{"internalType":"bytes","name":"secrets","type":"bytes"},{"internalType":"string[]","name":"args","type":"string[]"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"gasLimit","type":"uint32"}],"name":"executeRequest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getDONPublicKey","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"bytes","name":"response","type":"bytes"},{"internalType":"bytes","name":"err","type":"bytes"}],"name":"handleOracleFulfillment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"latestError","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestRequestId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestResponse","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"oracle","type":"address"}],"name":"updateOracleAddress","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"constructor":{"params":{"oracle":"- The FunctionsOracle contract"}},"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)":{"params":{"gasLimit":"gas limit for the fulfillment callback","req":"The initialized Functions.Request","subscriptionId":"The subscription ID"},"returns":{"_0":"billedCost Cost in Juels (1e18) of LINK"}},"executeRequest(string,bytes,string[],uint64,uint32)":{"params":{"args":"List of arguments accessible from within the source code","secrets":"Encrypted secrets payload","source":"JavaScript source code","subscriptionId":"Billing ID"}},"getDONPublicKey()":{"details":"All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key","returns":{"_0":"publicKey DON's public key"}},"handleOracleFulfillment(bytes32,bytes,bytes)":{"params":{"err":"Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.","requestId":"The requestId returned by FunctionsClient.sendRequest().","response":"Aggregated response from the user code."}}},"title":"Functions Copns contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1208":{"entryPoint":null,"id":1208,"parameterSlots":1,"returnSlots":0},"@_1675":{"entryPoint":null,"id":1675,"parameterSlots":1,"returnSlots":0},"@_18":{"entryPoint":null,"id":18,"parameterSlots":1,"returnSlots":0},"@_75":{"entryPoint":null,"id":75,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_159":{"entryPoint":236,"id":159,"parameterSlots":1,"returnSlots":0},"@setOracle_1801":{"entryPoint":null,"id":1801,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":409,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1011:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:209:12","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:12"},"nodeType":"YulFunctionCall","src":"143:12:12"},"nodeType":"YulExpressionStatement","src":"143:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:12"},"nodeType":"YulFunctionCall","src":"112:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:12"},"nodeType":"YulFunctionCall","src":"108:32:12"},"nodeType":"YulIf","src":"105:52:12"},{"nodeType":"YulVariableDeclaration","src":"166:29:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"185:9:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"179:5:12"},"nodeType":"YulFunctionCall","src":"179:16:12"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"170:5:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"258:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"267:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"270:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"260:6:12"},"nodeType":"YulFunctionCall","src":"260:12:12"},"nodeType":"YulExpressionStatement","src":"260:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"217:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"228:5:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"243:3:12","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"248:1:12","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"239:3:12"},"nodeType":"YulFunctionCall","src":"239:11:12"},{"kind":"number","nodeType":"YulLiteral","src":"252:1:12","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"235:3:12"},"nodeType":"YulFunctionCall","src":"235:19:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"224:3:12"},"nodeType":"YulFunctionCall","src":"224:31:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"214:2:12"},"nodeType":"YulFunctionCall","src":"214:42:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"207:6:12"},"nodeType":"YulFunctionCall","src":"207:50:12"},"nodeType":"YulIf","src":"204:70:12"},{"nodeType":"YulAssignment","src":"283:15:12","value":{"name":"value","nodeType":"YulIdentifier","src":"293:5:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"283:6:12"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:12","type":""}],"src":"14:290:12"},{"body":{"nodeType":"YulBlock","src":"483:174:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"500:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"511:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"493:6:12"},"nodeType":"YulFunctionCall","src":"493:21:12"},"nodeType":"YulExpressionStatement","src":"493:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"534:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"545:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"530:3:12"},"nodeType":"YulFunctionCall","src":"530:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"550:2:12","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"523:6:12"},"nodeType":"YulFunctionCall","src":"523:30:12"},"nodeType":"YulExpressionStatement","src":"523:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"573:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"584:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"569:3:12"},"nodeType":"YulFunctionCall","src":"569:18:12"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nodeType":"YulLiteral","src":"589:26:12","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"562:6:12"},"nodeType":"YulFunctionCall","src":"562:54:12"},"nodeType":"YulExpressionStatement","src":"562:54:12"},{"nodeType":"YulAssignment","src":"625:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"637:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"648:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"633:3:12"},"nodeType":"YulFunctionCall","src":"633:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"625:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"460:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"474:4:12","type":""}],"src":"309:348:12"},{"body":{"nodeType":"YulBlock","src":"836:173:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"864:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"846:6:12"},"nodeType":"YulFunctionCall","src":"846:21:12"},"nodeType":"YulExpressionStatement","src":"846:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"887:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"898:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"883:3:12"},"nodeType":"YulFunctionCall","src":"883:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"903:2:12","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"876:6:12"},"nodeType":"YulFunctionCall","src":"876:30:12"},"nodeType":"YulExpressionStatement","src":"876:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"926:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"937:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"922:3:12"},"nodeType":"YulFunctionCall","src":"922:18:12"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"942:25:12","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"915:6:12"},"nodeType":"YulFunctionCall","src":"915:53:12"},"nodeType":"YulExpressionStatement","src":"915:53:12"},{"nodeType":"YulAssignment","src":"977:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"989:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"1000:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"985:3:12"},"nodeType":"YulFunctionCall","src":"985:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"977:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"813:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"827:4:12","type":""}],"src":"662:347:12"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Cannot set owner to zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162001c6338038062001c63833981016040819052620000349162000199565b600080546001600160a01b0319166001600160a01b038316178155339081906001600160a01b038216620000af5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600280546001600160a01b0319166001600160a01b0384811691909117909155811615620000e257620000e281620000ec565b50505050620001cb565b6001600160a01b038116331415620001475760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401620000a6565b600380546001600160a01b0319166001600160a01b03838116918217909255600254604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b600060208284031215620001ac57600080fd5b81516001600160a01b0381168114620001c457600080fd5b9392505050565b611a8880620001db6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063bef3a2f011610081578063f2fde38b1161005b578063f2fde38b14610182578063f7023bb614610195578063fffeb84e146101a857600080fd5b8063bef3a2f014610135578063d328a91e1461014a578063d4b391751461015257600080fd5b806327714589116100b257806327714589146100ff57806379ba5097146101125780638da5cb5b1461011a57600080fd5b80630ca76175146100ce5780631aa46f59146100e3575b600080fd5b6100e16100dc3660046113d9565b6101b0565b005b6100ec60045481565b6040519081526020015b60405180910390f35b6100ec61010d3660046114b4565b610256565b6100e161035f565b6002546040516001600160a01b0390911681526020016100f6565b61013d610419565b6040516100f6919061170b565b61013d6104a7565b61016561016036600461159f565b610545565b6040516bffffffffffffffffffffffff90911681526020016100f6565b6100e1610190366004611386565b6105db565b6100e16101a3366004611386565b6105ef565b61013d610615565b60008381526001602052604090205483906001600160a01b03163314610202576040517fa0c5ec6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526001602052604080822080546001600160a01b03191690555182917f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e691a2610250848484610622565b50505050565b6000610260610689565b61029a6040805160c08101909152806000815260200160008152602001600081526020016060815260200160608152602001606081525090565b6102e16000808c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879594939250506106e59050565b86156103295761032988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085939250506107799050565b61033d610336868861193a565b82906107c0565b600061034b8286863a610800565b60048190559b9a5050505050505050505050565b6003546001600160a01b031633146103be5760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b600280546001600160a01b0319808216339081179093556003805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6005805461042690611973565b80601f016020809104026020016040519081016040528092919081815260200182805461045290611973565b801561049f5780601f106104745761010080835404028352916020019161049f565b820191906000526020600020905b81548152906001019060200180831161048257829003601f168201915b505050505081565b60008054604080517fd328a91e00000000000000000000000000000000000000000000000000000000815290516060936001600160a01b039093169263d328a91e9260048082019391829003018186803b15801561050457600080fd5b505afa158015610518573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105409190810190611446565b905090565b600080546001600160a01b031663d227d2458561056188610975565b86866040518563ffffffff1660e01b81526004016105829493929190611743565b60206040518083038186803b15801561059a57600080fd5b505afa1580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d291906116b1565b95945050505050565b6105e3610689565b6105ec81610c0b565b50565b6105f7610689565b600080546001600160a01b0319166001600160a01b03831617905550565b6006805461042690611973565b8151610635906005906020850190611153565b508051610649906006906020840190611153565b50827f7bab0ec163b5c132c72b8146ac4d6e067e82ed58f8b131150aa71c9258911562838360405161067c92919061171e565b60405180910390a2505050565b6002546001600160a01b031633146106e35760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016103b5565b565b805161071d576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83836001811115610730576107306119fb565b90816001811115610743576107436119fb565b90525060408401828015610759576107596119fb565b90818015610769576107696119fb565b9052506060909301929092525050565b80516107b1576040517fe889636f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020830152608090910152565b80516107f8576040517ffe936cb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a090910152565b6000805481906001600160a01b031663a98eb2068661081e89610975565b87876040518563ffffffff1660e01b815260040161083f9493929190611743565b602060405180830381600087803b15801561085957600080fd5b505af115801561086d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089191906113c0565b905060008054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b815260040160206040518083038186803b1580156108df57600080fd5b505afa1580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091791906113a3565b60008281526001602052604080822080546001600160a01b0319166001600160a01b039490941693909317909255905182917f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db891a295945050505050565b6060610994604051806040016040528060608152602001600081525090565b6109a081610100610cb6565b5060408051808201909152600c81527f636f64654c6f636174696f6e000000000000000000000000000000000000000060208201526109e0908290610d21565b82516109fe9060018111156109f7576109f76119fb565b8290610d3d565b60408051808201909152600881527f6c616e67756167650000000000000000000000000000000000000000000000006020820152610a3d908290610d21565b6040830151610a549080156109f7576109f76119fb565b60408051808201909152600681527f736f7572636500000000000000000000000000000000000000000000000000006020820152610a93908290610d21565b6060830151610aa3908290610d21565b60a08301515115610b525760408051808201909152600481527f61726773000000000000000000000000000000000000000000000000000000006020820152610aed908290610d21565b610af681610d67565b60005b8360a0015151811015610b4857610b368460a001518281518110610b1f57610b1f611a11565b602002602001015183610d2190919063ffffffff16565b80610b40816119a8565b915050610af9565b50610b5281610d72565b60808301515115610c045760408051808201909152600f81527f736563726574734c6f636174696f6e00000000000000000000000000000000006020820152610b9c908290610d21565b610bb5836020015160018111156109f7576109f76119fb565b60408051808201909152600781527f73656372657473000000000000000000000000000000000000000000000000006020820152610bf4908290610d21565b6080830151610c04908290610d7d565b5192915050565b6001600160a01b038116331415610c645760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016103b5565b600380546001600160a01b0319166001600160a01b03838116918217909255600254604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b604080518082019091526060815260006020820152610cd66020836119c3565b15610cfe57610ce66020836119c3565b610cf1906020611923565b610cfb9083611801565b91505b506020808301829052604080518085526000815283019091019052815b92915050565b610d2e8260038351610d86565b610d388282610e95565b505050565b67ffffffffffffffff811115610d5b57610d578282610ec3565b5050565b610d5782600083610d86565b6105ec816004610efa565b6105ec816007610efa565b610d2e82600283515b60178167ffffffffffffffff1611610dab576102508360e0600585901b168317610f0b565b60ff8167ffffffffffffffff1611610de957610dd2836018611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166001610f30565b61ffff8167ffffffffffffffff1611610e2857610e11836019611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166002610f30565b63ffffffff8167ffffffffffffffff1611610e6957610e5283601a611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166004610f30565b610e7e83601b611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166008610f30565b604080518082019091526060815260006020820152610ebc83846000015151848551610f5e565b9392505050565b610ece8260c2610f0b565b50610d578282604051602001610ee691815260200190565b604051602081830303815290604052610d7d565b610d3882601f611fe0600585901b16175b604080518082019091526060815260006020820152610ebc8384600001515184611048565b604080518082019091526060815260006020820152610f568485600001515185856110a4565b949350505050565b6040805180820190915260608152600060208201528251821115610f8157600080fd5b6020850151610f908386611801565b1115610fc357610fc385610fb387602001518786610fae9190611801565b611125565b610fbe906002611904565b61113c565b600080865180518760208301019350808887011115610fe25787860182525b505050602084015b602084106110225780518252611001602083611801565b915061100e602082611801565b905061101b602085611923565b9350610fea565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6040805180820190915260608152600060208201528360200151831061107d5761107d8485602001516002610fbe9190611904565b83518051602085830101848153508085141561109a576001810182525b5093949350505050565b60408051808201909152606081526000602082015260208501516110c88584611801565b11156110dc576110dc85610fb38685611801565b600060016110ec8461010061185c565b6110f69190611923565b905085518386820101858319825116178152508051848701111561111a5783860181525b509495945050505050565b600081831115611136575081610d1b565b50919050565b81516111488383610cb6565b506102508382610e95565b82805461115f90611973565b90600052602060002090601f01602090048101928261118157600085556111c7565b82601f1061119a57805160ff19168380011785556111c7565b828001600101855582156111c7579182015b828111156111c75782518255916020019190600101906111ac565b506111d39291506111d7565b5090565b5b808211156111d357600081556001016111d8565b600067ffffffffffffffff8084111561120757611207611a27565b8360051b60206112188183016117a8565b86815293508084018583810189101561123057600080fd5b60009350835b8881101561126b5781358681111561124c578586fd5b6112588b828b016112e1565b8452509183019190830190600101611236565b5050505050509392505050565b600082601f83011261128957600080fd5b610ebc838335602085016111ec565b60008083601f8401126112aa57600080fd5b50813567ffffffffffffffff8111156112c257600080fd5b6020830191508360208285010111156112da57600080fd5b9250929050565b600082601f8301126112f257600080fd5b8135611305611300826117d9565b6117a8565b81815284602083860101111561131a57600080fd5b816020850160208301376000918101602001919091529392505050565b80356001811061134657600080fd5b919050565b80356002811061134657600080fd5b803563ffffffff8116811461134657600080fd5b803567ffffffffffffffff8116811461134657600080fd5b60006020828403121561139857600080fd5b8135610ebc81611a3d565b6000602082840312156113b557600080fd5b8151610ebc81611a3d565b6000602082840312156113d257600080fd5b5051919050565b6000806000606084860312156113ee57600080fd5b83359250602084013567ffffffffffffffff8082111561140d57600080fd5b611419878388016112e1565b9350604086013591508082111561142f57600080fd5b5061143c868287016112e1565b9150509250925092565b60006020828403121561145857600080fd5b815167ffffffffffffffff81111561146f57600080fd5b8201601f8101841361148057600080fd5b805161148e611300826117d9565b8181528560208385010111156114a357600080fd5b6105d2826020830160208601611947565b60008060008060008060008060a0898b0312156114d057600080fd5b883567ffffffffffffffff808211156114e857600080fd5b6114f48c838d01611298565b909a50985060208b013591508082111561150d57600080fd5b6115198c838d01611298565b909850965060408b013591508082111561153257600080fd5b818b0191508b601f83011261154657600080fd5b81358181111561155557600080fd5b8c60208260051b850101111561156a57600080fd5b60208301965080955050505061158260608a0161136e565b915061159060808a0161135a565b90509295985092959890939650565b600080600080608085870312156115b557600080fd5b843567ffffffffffffffff808211156115cd57600080fd5b9086019060c082890312156115e157600080fd5b6115e961177f565b6115f28361134b565b81526116006020840161134b565b602082015261161160408401611337565b604082015260608301358281111561162857600080fd5b6116348a8286016112e1565b60608301525060808301358281111561164c57600080fd5b6116588a8286016112e1565b60808301525060a08301358281111561167057600080fd5b61167c8a828601611278565b60a08301525095506116939150506020860161136e565b92506116a16040860161135a565b9396929550929360600135925050565b6000602082840312156116c357600080fd5b81516bffffffffffffffffffffffff81168114610ebc57600080fd5b600081518084526116f7816020860160208601611947565b601f01601f19169290920160200192915050565b602081526000610ebc60208301846116df565b60408152600061173160408301856116df565b82810360208401526105d281856116df565b67ffffffffffffffff8516815260806020820152600061176660808301866116df565b63ffffffff949094166040830152506060015292915050565b60405160c0810167ffffffffffffffff811182821017156117a2576117a2611a27565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156117d1576117d1611a27565b604052919050565b600067ffffffffffffffff8211156117f3576117f3611a27565b50601f01601f191660200190565b60008219821115611814576118146119e5565b500190565b600181815b8085111561185457816000190482111561183a5761183a6119e5565b8085161561184757918102915b93841c939080029061181e565b509250929050565b6000610ebc838360008261187257506001610d1b565b8161187f57506000610d1b565b8160018114611895576002811461189f576118bb565b6001915050610d1b565b60ff8411156118b0576118b06119e5565b50506001821b610d1b565b5060208310610133831016604e8410600b84101617156118de575081810a610d1b565b6118e88383611819565b80600019048211156118fc576118fc6119e5565b029392505050565b600081600019048311821515161561191e5761191e6119e5565b500290565b600082821015611935576119356119e5565b500390565b6000610ebc3684846111ec565b60005b8381101561196257818101518382015260200161194a565b838111156102505750506000910152565b600181811c9082168061198757607f821691505b6020821081141561113657634e487b7160e01b600052602260045260246000fd5b60006000198214156119bc576119bc6119e5565b5060010190565b6000826119e057634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146105ec57600080fdfea26469706673582212206520d46725cdfd7844c91ea04455710d6bed3f8bef2a1255ec7219de11937b0664736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1C63 CODESIZE SUB DUP1 PUSH3 0x1C63 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x199 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR DUP2 SSTORE CALLER SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0xAF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP2 AND ISZERO PUSH3 0xE2 JUMPI PUSH3 0xE2 DUP2 PUSH3 0xEC JUMP JUMPDEST POP POP POP POP PUSH3 0x1CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ ISZERO PUSH3 0x147 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0xA6 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 AND SWAP1 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1A88 DUP1 PUSH3 0x1DB PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBEF3A2F0 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xF7023BB6 EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0xFFFEB84E EQ PUSH2 0x1A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBEF3A2F0 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0xD328A91E EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0xD4B39175 EQ PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x27714589 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x27714589 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCA76175 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x1AA46F59 EQ PUSH2 0xE3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE1 PUSH2 0xDC CALLDATASIZE PUSH1 0x4 PUSH2 0x13D9 JUMP JUMPDEST PUSH2 0x1B0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEC PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEC PUSH2 0x10D CALLDATASIZE PUSH1 0x4 PUSH2 0x14B4 JUMP JUMPDEST PUSH2 0x256 JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x35F JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF6 JUMP JUMPDEST PUSH2 0x13D PUSH2 0x419 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x13D PUSH2 0x4A7 JUMP JUMPDEST PUSH2 0x165 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0x159F JUMP JUMPDEST PUSH2 0x545 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF6 JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0x1386 JUMP JUMPDEST PUSH2 0x5DB JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x1A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1386 JUMP JUMPDEST PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x13D PUSH2 0x615 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x202 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA0C5EC6300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x85E1543BF2F84FE80C6BADBCE3648C8539AD1DF4D2B3D822938CA0538BE727E6 SWAP2 LOG2 PUSH2 0x250 DUP5 DUP5 DUP5 PUSH2 0x622 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260 PUSH2 0x689 JUMP JUMPDEST PUSH2 0x29A PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x2E1 PUSH1 0x0 DUP1 DUP13 DUP13 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP8 SWAP6 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0x6E5 SWAP1 POP JUMP JUMPDEST DUP7 ISZERO PUSH2 0x329 JUMPI PUSH2 0x329 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP6 SWAP4 SWAP3 POP POP PUSH2 0x779 SWAP1 POP JUMP JUMPDEST PUSH2 0x33D PUSH2 0x336 DUP7 DUP9 PUSH2 0x193A JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x7C0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34B DUP3 DUP7 DUP7 GASPRICE PUSH2 0x800 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP3 AND CALLER SWAP1 DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH2 0x426 SWAP1 PUSH2 0x1973 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x452 SWAP1 PUSH2 0x1973 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x49F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x474 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x49F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x482 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xD328A91E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x60 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH4 0xD328A91E SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x518 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x540 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1446 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD227D245 DUP6 PUSH2 0x561 DUP9 PUSH2 0x975 JUMP JUMPDEST DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x582 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1743 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x59A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D2 SWAP2 SWAP1 PUSH2 0x16B1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x5E3 PUSH2 0x689 JUMP JUMPDEST PUSH2 0x5EC DUP2 PUSH2 0xC0B JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5F7 PUSH2 0x689 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH2 0x426 SWAP1 PUSH2 0x1973 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x635 SWAP1 PUSH1 0x5 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x1153 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x649 SWAP1 PUSH1 0x6 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1153 JUMP JUMPDEST POP DUP3 PUSH32 0x7BAB0EC163B5C132C72B8146AC4D6E067E82ED58F8B131150AA71C9258911562 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x67C SWAP3 SWAP2 SWAP1 PUSH2 0x171E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B5 JUMP JUMPDEST JUMP JUMPDEST DUP1 MLOAD PUSH2 0x71D JUMPI PUSH1 0x40 MLOAD PUSH32 0x22CE3EDD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x730 JUMPI PUSH2 0x730 PUSH2 0x19FB JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x743 JUMPI PUSH2 0x743 PUSH2 0x19FB JUMP JUMPDEST SWAP1 MSTORE POP PUSH1 0x40 DUP5 ADD DUP3 DUP1 ISZERO PUSH2 0x759 JUMPI PUSH2 0x759 PUSH2 0x19FB JUMP JUMPDEST SWAP1 DUP2 DUP1 ISZERO PUSH2 0x769 JUMPI PUSH2 0x769 PUSH2 0x19FB JUMP JUMPDEST SWAP1 MSTORE POP PUSH1 0x60 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x7B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE889636F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x7F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFE936CB700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA98EB206 DUP7 PUSH2 0x81E DUP10 PUSH2 0x975 JUMP JUMPDEST DUP8 DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1743 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x859 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x86D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x891 SWAP2 SWAP1 PUSH2 0x13C0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5AB1BD53 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8F3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x917 SWAP2 SWAP1 PUSH2 0x13A3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD DUP3 SWAP2 PUSH32 0x1131472297A800FEE664D1D89CFA8F7676FF07189ECC53F80BBB5F4969099DB8 SWAP2 LOG2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x994 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x9A0 DUP2 PUSH2 0x100 PUSH2 0xCB6 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH32 0x636F64654C6F636174696F6E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x9E0 SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x9FE SWAP1 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x9F7 JUMPI PUSH2 0x9F7 PUSH2 0x19FB JUMP JUMPDEST DUP3 SWAP1 PUSH2 0xD3D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH32 0x6C616E6775616765000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xA3D SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0xA54 SWAP1 DUP1 ISZERO PUSH2 0x9F7 JUMPI PUSH2 0x9F7 PUSH2 0x19FB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH32 0x736F757263650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xA93 SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xAA3 SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0xB52 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0x6172677300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xAED SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST PUSH2 0xAF6 DUP2 PUSH2 0xD67 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 PUSH1 0xA0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xB48 JUMPI PUSH2 0xB36 DUP5 PUSH1 0xA0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB1F JUMPI PUSH2 0xB1F PUSH2 0x1A11 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0xD21 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 PUSH2 0xB40 DUP2 PUSH2 0x19A8 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAF9 JUMP JUMPDEST POP PUSH2 0xB52 DUP2 PUSH2 0xD72 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0xC04 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xF DUP2 MSTORE PUSH32 0x736563726574734C6F636174696F6E0000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xB9C SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST PUSH2 0xBB5 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x9F7 JUMPI PUSH2 0x9F7 PUSH2 0x19FB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH32 0x7365637265747300000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xBF4 SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0xC04 SWAP1 DUP3 SWAP1 PUSH2 0xD7D JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ ISZERO PUSH2 0xC64 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B5 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 AND SWAP1 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xCD6 PUSH1 0x20 DUP4 PUSH2 0x19C3 JUMP JUMPDEST ISZERO PUSH2 0xCFE JUMPI PUSH2 0xCE6 PUSH1 0x20 DUP4 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0xCF1 SWAP1 PUSH1 0x20 PUSH2 0x1923 JUMP JUMPDEST PUSH2 0xCFB SWAP1 DUP4 PUSH2 0x1801 JUMP JUMPDEST SWAP2 POP JUMPDEST POP PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP6 MSTORE PUSH1 0x0 DUP2 MSTORE DUP4 ADD SWAP1 SWAP2 ADD SWAP1 MSTORE DUP2 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD2E DUP3 PUSH1 0x3 DUP4 MLOAD PUSH2 0xD86 JUMP JUMPDEST PUSH2 0xD38 DUP3 DUP3 PUSH2 0xE95 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD5B JUMPI PUSH2 0xD57 DUP3 DUP3 PUSH2 0xEC3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xD57 DUP3 PUSH1 0x0 DUP4 PUSH2 0xD86 JUMP JUMPDEST PUSH2 0x5EC DUP2 PUSH1 0x4 PUSH2 0xEFA JUMP JUMPDEST PUSH2 0x5EC DUP2 PUSH1 0x7 PUSH2 0xEFA JUMP JUMPDEST PUSH2 0xD2E DUP3 PUSH1 0x2 DUP4 MLOAD JUMPDEST PUSH1 0x17 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0xDAB JUMPI PUSH2 0x250 DUP4 PUSH1 0xE0 PUSH1 0x5 DUP6 SWAP1 SHL AND DUP4 OR PUSH2 0xF0B JUMP JUMPDEST PUSH1 0xFF DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0xDE9 JUMPI PUSH2 0xDD2 DUP4 PUSH1 0x18 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0xF0B JUMP JUMPDEST POP PUSH2 0x250 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x1 PUSH2 0xF30 JUMP JUMPDEST PUSH2 0xFFFF DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0xE28 JUMPI PUSH2 0xE11 DUP4 PUSH1 0x19 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0xF0B JUMP JUMPDEST POP PUSH2 0x250 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x2 PUSH2 0xF30 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0xE69 JUMPI PUSH2 0xE52 DUP4 PUSH1 0x1A PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0xF0B JUMP JUMPDEST POP PUSH2 0x250 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 PUSH2 0xF30 JUMP JUMPDEST PUSH2 0xE7E DUP4 PUSH1 0x1B PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0xF0B JUMP JUMPDEST POP PUSH2 0x250 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x8 PUSH2 0xF30 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xEBC DUP4 DUP5 PUSH1 0x0 ADD MLOAD MLOAD DUP5 DUP6 MLOAD PUSH2 0xF5E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xECE DUP3 PUSH1 0xC2 PUSH2 0xF0B JUMP JUMPDEST POP PUSH2 0xD57 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xEE6 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0xD7D JUMP JUMPDEST PUSH2 0xD38 DUP3 PUSH1 0x1F PUSH2 0x1FE0 PUSH1 0x5 DUP6 SWAP1 SHL AND OR JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xEBC DUP4 DUP5 PUSH1 0x0 ADD MLOAD MLOAD DUP5 PUSH2 0x1048 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xF56 DUP5 DUP6 PUSH1 0x0 ADD MLOAD MLOAD DUP6 DUP6 PUSH2 0x10A4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP3 MLOAD DUP3 GT ISZERO PUSH2 0xF81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0xF90 DUP4 DUP7 PUSH2 0x1801 JUMP JUMPDEST GT ISZERO PUSH2 0xFC3 JUMPI PUSH2 0xFC3 DUP6 PUSH2 0xFB3 DUP8 PUSH1 0x20 ADD MLOAD DUP8 DUP7 PUSH2 0xFAE SWAP2 SWAP1 PUSH2 0x1801 JUMP JUMPDEST PUSH2 0x1125 JUMP JUMPDEST PUSH2 0xFBE SWAP1 PUSH1 0x2 PUSH2 0x1904 JUMP JUMPDEST PUSH2 0x113C JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 MLOAD DUP1 MLOAD DUP8 PUSH1 0x20 DUP4 ADD ADD SWAP4 POP DUP1 DUP9 DUP8 ADD GT ISZERO PUSH2 0xFE2 JUMPI DUP8 DUP7 ADD DUP3 MSTORE JUMPDEST POP POP POP PUSH1 0x20 DUP5 ADD JUMPDEST PUSH1 0x20 DUP5 LT PUSH2 0x1022 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH2 0x1001 PUSH1 0x20 DUP4 PUSH2 0x1801 JUMP JUMPDEST SWAP2 POP PUSH2 0x100E PUSH1 0x20 DUP3 PUSH2 0x1801 JUMP JUMPDEST SWAP1 POP PUSH2 0x101B PUSH1 0x20 DUP6 PUSH2 0x1923 JUMP JUMPDEST SWAP4 POP PUSH2 0xFEA JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x0 NOT PUSH1 0x20 DUP7 SWAP1 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 AND SWAP1 NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 MSTORE POP DUP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP4 PUSH1 0x20 ADD MLOAD DUP4 LT PUSH2 0x107D JUMPI PUSH2 0x107D DUP5 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x2 PUSH2 0xFBE SWAP2 SWAP1 PUSH2 0x1904 JUMP JUMPDEST DUP4 MLOAD DUP1 MLOAD PUSH1 0x20 DUP6 DUP4 ADD ADD DUP5 DUP2 MSTORE8 POP DUP1 DUP6 EQ ISZERO PUSH2 0x109A JUMPI PUSH1 0x1 DUP2 ADD DUP3 MSTORE JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x10C8 DUP6 DUP5 PUSH2 0x1801 JUMP JUMPDEST GT ISZERO PUSH2 0x10DC JUMPI PUSH2 0x10DC DUP6 PUSH2 0xFB3 DUP7 DUP6 PUSH2 0x1801 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x10EC DUP5 PUSH2 0x100 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x10F6 SWAP2 SWAP1 PUSH2 0x1923 JUMP JUMPDEST SWAP1 POP DUP6 MLOAD DUP4 DUP7 DUP3 ADD ADD DUP6 DUP4 NOT DUP3 MLOAD AND OR DUP2 MSTORE POP DUP1 MLOAD DUP5 DUP8 ADD GT ISZERO PUSH2 0x111A JUMPI DUP4 DUP7 ADD DUP2 MSTORE JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT ISZERO PUSH2 0x1136 JUMPI POP DUP2 PUSH2 0xD1B JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 MLOAD PUSH2 0x1148 DUP4 DUP4 PUSH2 0xCB6 JUMP JUMPDEST POP PUSH2 0x250 DUP4 DUP3 PUSH2 0xE95 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x115F SWAP1 PUSH2 0x1973 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1181 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x11C7 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x119A JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x11C7 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x11C7 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x11C7 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x11AC JUMP JUMPDEST POP PUSH2 0x11D3 SWAP3 SWAP2 POP PUSH2 0x11D7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x11D3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x11D8 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x1207 JUMPI PUSH2 0x1207 PUSH2 0x1A27 JUMP JUMPDEST DUP4 PUSH1 0x5 SHL PUSH1 0x20 PUSH2 0x1218 DUP2 DUP4 ADD PUSH2 0x17A8 JUMP JUMPDEST DUP7 DUP2 MSTORE SWAP4 POP DUP1 DUP5 ADD DUP6 DUP4 DUP2 ADD DUP10 LT ISZERO PUSH2 0x1230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP4 POP DUP4 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x126B JUMPI DUP2 CALLDATALOAD DUP7 DUP2 GT ISZERO PUSH2 0x124C JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x1258 DUP12 DUP3 DUP12 ADD PUSH2 0x12E1 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1236 JUMP JUMPDEST POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEBC DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x11EC JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x12AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x12F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1305 PUSH2 0x1300 DUP3 PUSH2 0x17D9 JUMP JUMPDEST PUSH2 0x17A8 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x131A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 DUP2 LT PUSH2 0x1346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0x1346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xEBC DUP2 PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xEBC DUP2 PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x13EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x140D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1419 DUP8 DUP4 DUP9 ADD PUSH2 0x12E1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x142F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143C DUP7 DUP3 DUP8 ADD PUSH2 0x12E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x146F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x148E PUSH2 0x1300 DUP3 PUSH2 0x17D9 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x14A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5D2 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1947 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x14D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F4 DUP13 DUP4 DUP14 ADD PUSH2 0x1298 JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x150D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1519 DUP13 DUP4 DUP14 ADD PUSH2 0x1298 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1532 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP12 ADD SWAP2 POP DUP12 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1555 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP13 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x156A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP7 POP DUP1 SWAP6 POP POP POP POP PUSH2 0x1582 PUSH1 0x60 DUP11 ADD PUSH2 0x136E JUMP JUMPDEST SWAP2 POP PUSH2 0x1590 PUSH1 0x80 DUP11 ADD PUSH2 0x135A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x15B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x15CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0xC0 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x15E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15E9 PUSH2 0x177F JUMP JUMPDEST PUSH2 0x15F2 DUP4 PUSH2 0x134B JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1600 PUSH1 0x20 DUP5 ADD PUSH2 0x134B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1611 PUSH1 0x40 DUP5 ADD PUSH2 0x1337 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1634 DUP11 DUP3 DUP7 ADD PUSH2 0x12E1 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x164C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1658 DUP11 DUP3 DUP7 ADD PUSH2 0x12E1 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1670 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x167C DUP11 DUP3 DUP7 ADD PUSH2 0x1278 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP6 POP PUSH2 0x1693 SWAP2 POP POP PUSH1 0x20 DUP7 ADD PUSH2 0x136E JUMP JUMPDEST SWAP3 POP PUSH2 0x16A1 PUSH1 0x40 DUP7 ADD PUSH2 0x135A JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xEBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x16F7 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1947 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xEBC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x16DF JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1731 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x16DF JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x5D2 DUP2 DUP6 PUSH2 0x16DF JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1766 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x16DF JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP5 SWAP1 SWAP5 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x17A2 JUMPI PUSH2 0x17A2 PUSH2 0x1A27 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x17D1 JUMPI PUSH2 0x17D1 PUSH2 0x1A27 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x17F3 JUMPI PUSH2 0x17F3 PUSH2 0x1A27 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1814 JUMPI PUSH2 0x1814 PUSH2 0x19E5 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x1854 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x183A JUMPI PUSH2 0x183A PUSH2 0x19E5 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x1847 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x181E JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEBC DUP4 DUP4 PUSH1 0x0 DUP3 PUSH2 0x1872 JUMPI POP PUSH1 0x1 PUSH2 0xD1B JUMP JUMPDEST DUP2 PUSH2 0x187F JUMPI POP PUSH1 0x0 PUSH2 0xD1B JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1895 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x189F JUMPI PUSH2 0x18BB JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xD1B JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x18B0 JUMPI PUSH2 0x18B0 PUSH2 0x19E5 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xD1B JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x18DE JUMPI POP DUP2 DUP2 EXP PUSH2 0xD1B JUMP JUMPDEST PUSH2 0x18E8 DUP4 DUP4 PUSH2 0x1819 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x18FC JUMPI PUSH2 0x18FC PUSH2 0x19E5 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x191E JUMPI PUSH2 0x191E PUSH2 0x19E5 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1935 JUMPI PUSH2 0x1935 PUSH2 0x19E5 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEBC CALLDATASIZE DUP5 DUP5 PUSH2 0x11EC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1962 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x194A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x250 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1987 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1136 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x19BC JUMPI PUSH2 0x19BC PUSH2 0x19E5 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x19E0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5EC JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x20D46725CDFD PUSH25 0x44C91EA04455710D6BED3F8BEF2A1255EC7219DE11937B0664 PUSH20 0x6F6C634300080700330000000000000000000000 ","sourceMap":"441:2945:5:-:0;;;888:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;345:1:0;3161:43:7;;-1:-1:-1;;;;;;3161:43:7;-1:-1:-1;;;;;3161:43:7;;;;;969:10:5;;;;-1:-1:-1;;;;;552:22:1;;544:59;;;;-1:-1:-1;;;544:59:1;;511:2:12;544:59:1;;;493:21:12;550:2;530:18;;;523:30;589:26;569:18;;;562:54;633:18;;544:59:1;;;;;;;;;610:7;:18;;-1:-1:-1;;;;;;610:18:1;-1:-1:-1;;;;;610:18:1;;;;;;;;;;638:26;;;634:79;;674:32;693:12;674:18;:32::i;:::-;486:231;;270:81:0;888:95:5;441:2945;;1497:188:1;-1:-1:-1;;;;;1559:16:1;;1565:10;1559:16;;1551:52;;;;-1:-1:-1;;;1551:52:1;;864:2:12;1551:52:1;;;846:21:12;903:2;883:18;;;876:30;942:25;922:18;;;915:53;985:18;;1551:52:1;662:347:12;1551:52:1;1610:14;:19;;-1:-1:-1;;;;;;1610:19:1;-1:-1:-1;;;;;1610:19:1;;;;;;;;;1668:7;;1641:39;;1610:19;;1668:7;;1641:39;;-1:-1:-1;;1641:39:1;1497:188;:::o;14:290:12:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:12;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:12:o;662:347::-;441:2945:5;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transferOwnership_159":{"entryPoint":3083,"id":159,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_172":{"entryPoint":1673,"id":172,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_125":{"entryPoint":863,"id":125,"parameterSlots":0,"returnSlots":0},"@addArgs_1635":{"entryPoint":1984,"id":1635,"parameterSlots":2,"returnSlots":0},"@addInlineSecrets_1610":{"entryPoint":1913,"id":1610,"parameterSlots":2,"returnSlots":0},"@appendInt_718":{"entryPoint":3888,"id":718,"parameterSlots":3,"returnSlots":1},"@appendUint8_515":{"entryPoint":3851,"id":515,"parameterSlots":2,"returnSlots":1},"@append_462":{"entryPoint":3733,"id":462,"parameterSlots":2,"returnSlots":1},"@encodeBigNum_1061":{"entryPoint":3779,"id":1061,"parameterSlots":2,"returnSlots":0},"@encodeBytes_1030":{"entryPoint":3453,"id":1030,"parameterSlots":2,"returnSlots":0},"@encodeCBOR_1515":{"entryPoint":2421,"id":1515,"parameterSlots":1,"returnSlots":1},"@encodeFixedNumeric_887":{"entryPoint":3462,"id":887,"parameterSlots":3,"returnSlots":0},"@encodeIndefiniteLengthType_910":{"entryPoint":3834,"id":910,"parameterSlots":2,"returnSlots":0},"@encodeString_1129":{"entryPoint":3361,"id":1129,"parameterSlots":2,"returnSlots":0},"@encodeUInt_939":{"entryPoint":3389,"id":939,"parameterSlots":2,"returnSlots":0},"@endSequence_1165":{"entryPoint":3442,"id":1165,"parameterSlots":1,"returnSlots":0},"@estimateCost_1714":{"entryPoint":1349,"id":1714,"parameterSlots":4,"returnSlots":1},"@executeRequest_1279":{"entryPoint":598,"id":1279,"parameterSlots":8,"returnSlots":1},"@fulfillRequest_1305":{"entryPoint":1570,"id":1305,"parameterSlots":3,"returnSlots":0},"@getDONPublicKey_1687":{"entryPoint":1191,"id":1687,"parameterSlots":0,"returnSlots":1},"@handleOracleFulfillment_1788":{"entryPoint":432,"id":1788,"parameterSlots":3,"returnSlots":0},"@init_243":{"entryPoint":3254,"id":243,"parameterSlots":2,"returnSlots":1},"@initializeRequest_1560":{"entryPoint":1765,"id":1560,"parameterSlots":4,"returnSlots":0},"@latestError_1186":{"entryPoint":1557,"id":1186,"parameterSlots":0,"returnSlots":0},"@latestRequestId_1182":{"entryPoint":null,"id":1182,"parameterSlots":0,"returnSlots":0},"@latestResponse_1184":{"entryPoint":1049,"id":1184,"parameterSlots":0,"returnSlots":0},"@max_315":{"entryPoint":4389,"id":315,"parameterSlots":2,"returnSlots":1},"@owner_135":{"entryPoint":null,"id":135,"parameterSlots":0,"returnSlots":1},"@resize_296":{"entryPoint":4412,"id":296,"parameterSlots":2,"returnSlots":0},"@sendRequest_1757":{"entryPoint":2048,"id":1757,"parameterSlots":4,"returnSlots":1},"@setOracle_1801":{"entryPoint":null,"id":1801,"parameterSlots":1,"returnSlots":0},"@startArray_1141":{"entryPoint":3431,"id":1141,"parameterSlots":1,"returnSlots":0},"@transferOwnership_89":{"entryPoint":1499,"id":89,"parameterSlots":1,"returnSlots":0},"@updateOracleAddress_1317":{"entryPoint":1519,"id":1317,"parameterSlots":1,"returnSlots":0},"@writeInt_694":{"entryPoint":4260,"id":694,"parameterSlots":4,"returnSlots":1},"@writeUint8_494":{"entryPoint":4168,"id":494,"parameterSlots":3,"returnSlots":1},"@write_415":{"entryPoint":3934,"id":415,"parameterSlots":4,"returnSlots":1},"abi_decode_array_string_dyn":{"entryPoint":4728,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_available_length_array_string_dyn":{"entryPoint":4588,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bytes":{"entryPoint":4833,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":4760,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_enum_CodeLanguage":{"entryPoint":4919,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_enum_Location":{"entryPoint":4939,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4998,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":5027,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":5056,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes_memory_ptrt_bytes_memory_ptr":{"entryPoint":5081,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes_memory_ptr_fromMemory":{"entryPoint":5190,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_calldata_ptrt_bytes_calldata_ptrt_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint64t_uint32":{"entryPoint":5300,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_struct$_Request_$1354_memory_ptrt_uint64t_uint32t_uint256":{"entryPoint":5535,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_uint96_fromMemory":{"entryPoint":5809,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint32":{"entryPoint":4954,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint64":{"entryPoint":4974,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_bytes":{"entryPoint":5855,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5899,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5918,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint64_t_bytes_memory_ptr_t_uint32_t_uint256__to_t_uint64_t_bytes_memory_ptr_t_uint32_t_uint256__fromStack_reversed":{"entryPoint":5955,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":6056,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_1834":{"entryPoint":6015,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":6105,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":6145,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_helper":{"entryPoint":6169,"id":null,"parameterSlots":2,"returnSlots":2},"checked_exp_t_uint256_t_uint256":{"entryPoint":6236,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":6404,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":6435,"id":null,"parameterSlots":2,"returnSlots":1},"convert_array_t_array$_t_string_calldata_ptr_$dyn_calldata_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr":{"entryPoint":6458,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":6471,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6515,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":6568,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":6595,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":6629,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":6651,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":6673,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6695,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":6717,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:15573:12","statements":[{"nodeType":"YulBlock","src":"6:3:12","statements":[]},{"body":{"nodeType":"YulBlock","src":"102:712:12","statements":[{"nodeType":"YulVariableDeclaration","src":"112:28:12","value":{"kind":"number","nodeType":"YulLiteral","src":"122:18:12","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"116:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"167:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"169:16:12"},"nodeType":"YulFunctionCall","src":"169:18:12"},"nodeType":"YulExpressionStatement","src":"169:18:12"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"155:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"163:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"152:2:12"},"nodeType":"YulFunctionCall","src":"152:14:12"},"nodeType":"YulIf","src":"149:40:12"},{"nodeType":"YulVariableDeclaration","src":"198:24:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"212:1:12","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"215:6:12"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"208:3:12"},"nodeType":"YulFunctionCall","src":"208:14:12"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"202:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"231:14:12","value":{"kind":"number","nodeType":"YulLiteral","src":"241:4:12","type":"","value":"0x20"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"235:2:12","type":""}]},{"nodeType":"YulAssignment","src":"254:37:12","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"283:2:12"},{"name":"_3","nodeType":"YulIdentifier","src":"287:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"279:3:12"},"nodeType":"YulFunctionCall","src":"279:11:12"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"263:15:12"},"nodeType":"YulFunctionCall","src":"263:28:12"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"254:5:12"}]},{"nodeType":"YulVariableDeclaration","src":"300:16:12","value":{"name":"array","nodeType":"YulIdentifier","src":"311:5:12"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"304:3:12","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"332:5:12"},{"name":"length","nodeType":"YulIdentifier","src":"339:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"325:6:12"},"nodeType":"YulFunctionCall","src":"325:21:12"},"nodeType":"YulExpressionStatement","src":"325:21:12"},{"nodeType":"YulAssignment","src":"355:21:12","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"366:5:12"},{"name":"_3","nodeType":"YulIdentifier","src":"373:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"362:3:12"},"nodeType":"YulFunctionCall","src":"362:14:12"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"355:3:12"}]},{"nodeType":"YulVariableDeclaration","src":"385:17:12","value":{"name":"offset","nodeType":"YulIdentifier","src":"396:6:12"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"389:3:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"439:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"448:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"451:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"441:6:12"},"nodeType":"YulFunctionCall","src":"441:12:12"},"nodeType":"YulExpressionStatement","src":"441:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"421:6:12"},{"name":"_2","nodeType":"YulIdentifier","src":"429:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"417:3:12"},"nodeType":"YulFunctionCall","src":"417:15:12"},{"name":"end","nodeType":"YulIdentifier","src":"434:3:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"414:2:12"},"nodeType":"YulFunctionCall","src":"414:24:12"},"nodeType":"YulIf","src":"411:44:12"},{"nodeType":"YulVariableDeclaration","src":"464:10:12","value":{"kind":"number","nodeType":"YulLiteral","src":"473:1:12","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"468:1:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"483:12:12","value":{"name":"i","nodeType":"YulIdentifier","src":"494:1:12"},"variables":[{"name":"i_1","nodeType":"YulTypedName","src":"487:3:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"559:249:12","statements":[{"nodeType":"YulVariableDeclaration","src":"573:36:12","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"605:3:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"592:12:12"},"nodeType":"YulFunctionCall","src":"592:17:12"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"577:11:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"645:16:12","statements":[{"expression":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"654:1:12"},{"name":"i","nodeType":"YulIdentifier","src":"657:1:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"647:6:12"},"nodeType":"YulFunctionCall","src":"647:12:12"},"nodeType":"YulExpressionStatement","src":"647:12:12"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"628:11:12"},{"name":"_1","nodeType":"YulIdentifier","src":"641:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"625:2:12"},"nodeType":"YulFunctionCall","src":"625:19:12"},"nodeType":"YulIf","src":"622:39:12"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"681:3:12"},{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"707:6:12"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"715:11:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"703:3:12"},"nodeType":"YulFunctionCall","src":"703:24:12"},{"name":"end","nodeType":"YulIdentifier","src":"729:3:12"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"686:16:12"},"nodeType":"YulFunctionCall","src":"686:47:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"674:6:12"},"nodeType":"YulFunctionCall","src":"674:60:12"},"nodeType":"YulExpressionStatement","src":"674:60:12"},{"nodeType":"YulAssignment","src":"747:19:12","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"758:3:12"},{"name":"_3","nodeType":"YulIdentifier","src":"763:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"754:3:12"},"nodeType":"YulFunctionCall","src":"754:12:12"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"747:3:12"}]},{"nodeType":"YulAssignment","src":"779:19:12","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"790:3:12"},{"name":"_3","nodeType":"YulIdentifier","src":"795:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"786:3:12"},"nodeType":"YulFunctionCall","src":"786:12:12"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"779:3:12"}]}]},"condition":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"515:3:12"},{"name":"length","nodeType":"YulIdentifier","src":"520:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"512:2:12"},"nodeType":"YulFunctionCall","src":"512:15:12"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"528:22:12","statements":[{"nodeType":"YulAssignment","src":"530:18:12","value":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"541:3:12"},{"kind":"number","nodeType":"YulLiteral","src":"546:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"537:3:12"},"nodeType":"YulFunctionCall","src":"537:11:12"},"variableNames":[{"name":"i_1","nodeType":"YulIdentifier","src":"530:3:12"}]}]},"pre":{"nodeType":"YulBlock","src":"508:3:12","statements":[]},"src":"504:304:12"}]},"name":"abi_decode_available_length_array_string_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"68:6:12","type":""},{"name":"length","nodeType":"YulTypedName","src":"76:6:12","type":""},{"name":"end","nodeType":"YulTypedName","src":"84:3:12","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"92:5:12","type":""}],"src":"14:800:12"},{"body":{"nodeType":"YulBlock","src":"882:179:12","statements":[{"body":{"nodeType":"YulBlock","src":"931:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"940:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"943:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"933:6:12"},"nodeType":"YulFunctionCall","src":"933:12:12"},"nodeType":"YulExpressionStatement","src":"933:12:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"910:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"918:4:12","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"906:3:12"},"nodeType":"YulFunctionCall","src":"906:17:12"},{"name":"end","nodeType":"YulIdentifier","src":"925:3:12"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"902:3:12"},"nodeType":"YulFunctionCall","src":"902:27:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"895:6:12"},"nodeType":"YulFunctionCall","src":"895:35:12"},"nodeType":"YulIf","src":"892:55:12"},{"nodeType":"YulAssignment","src":"956:99:12","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1014:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"1022:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1010:3:12"},"nodeType":"YulFunctionCall","src":"1010:17:12"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1042:6:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1029:12:12"},"nodeType":"YulFunctionCall","src":"1029:20:12"},{"name":"end","nodeType":"YulIdentifier","src":"1051:3:12"}],"functionName":{"name":"abi_decode_available_length_array_string_dyn","nodeType":"YulIdentifier","src":"965:44:12"},"nodeType":"YulFunctionCall","src":"965:90:12"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"956:5:12"}]}]},"name":"abi_decode_array_string_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"856:6:12","type":""},{"name":"end","nodeType":"YulTypedName","src":"864:3:12","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"872:5:12","type":""}],"src":"819:242:12"},{"body":{"nodeType":"YulBlock","src":"1138:275:12","statements":[{"body":{"nodeType":"YulBlock","src":"1187:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1196:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1199:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1189:6:12"},"nodeType":"YulFunctionCall","src":"1189:12:12"},"nodeType":"YulExpressionStatement","src":"1189:12:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1166:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"1174:4:12","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1162:3:12"},"nodeType":"YulFunctionCall","src":"1162:17:12"},{"name":"end","nodeType":"YulIdentifier","src":"1181:3:12"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1158:3:12"},"nodeType":"YulFunctionCall","src":"1158:27:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1151:6:12"},"nodeType":"YulFunctionCall","src":"1151:35:12"},"nodeType":"YulIf","src":"1148:55:12"},{"nodeType":"YulAssignment","src":"1212:30:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1235:6:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1222:12:12"},"nodeType":"YulFunctionCall","src":"1222:20:12"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1212:6:12"}]},{"body":{"nodeType":"YulBlock","src":"1285:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1294:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1297:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1287:6:12"},"nodeType":"YulFunctionCall","src":"1287:12:12"},"nodeType":"YulExpressionStatement","src":"1287:12:12"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1257:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"1265:18:12","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1254:2:12"},"nodeType":"YulFunctionCall","src":"1254:30:12"},"nodeType":"YulIf","src":"1251:50:12"},{"nodeType":"YulAssignment","src":"1310:29:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1326:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"1334:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1322:3:12"},"nodeType":"YulFunctionCall","src":"1322:17:12"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1310:8:12"}]},{"body":{"nodeType":"YulBlock","src":"1391:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1400:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1403:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1393:6:12"},"nodeType":"YulFunctionCall","src":"1393:12:12"},"nodeType":"YulExpressionStatement","src":"1393:12:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1362:6:12"},{"name":"length","nodeType":"YulIdentifier","src":"1370:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1358:3:12"},"nodeType":"YulFunctionCall","src":"1358:19:12"},{"kind":"number","nodeType":"YulLiteral","src":"1379:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1354:3:12"},"nodeType":"YulFunctionCall","src":"1354:30:12"},{"name":"end","nodeType":"YulIdentifier","src":"1386:3:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1351:2:12"},"nodeType":"YulFunctionCall","src":"1351:39:12"},"nodeType":"YulIf","src":"1348:59:12"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1101:6:12","type":""},{"name":"end","nodeType":"YulTypedName","src":"1109:3:12","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1117:8:12","type":""},{"name":"length","nodeType":"YulTypedName","src":"1127:6:12","type":""}],"src":"1066:347:12"},{"body":{"nodeType":"YulBlock","src":"1470:410:12","statements":[{"body":{"nodeType":"YulBlock","src":"1519:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1528:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1531:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1521:6:12"},"nodeType":"YulFunctionCall","src":"1521:12:12"},"nodeType":"YulExpressionStatement","src":"1521:12:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1498:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"1506:4:12","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1494:3:12"},"nodeType":"YulFunctionCall","src":"1494:17:12"},{"name":"end","nodeType":"YulIdentifier","src":"1513:3:12"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1490:3:12"},"nodeType":"YulFunctionCall","src":"1490:27:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1483:6:12"},"nodeType":"YulFunctionCall","src":"1483:35:12"},"nodeType":"YulIf","src":"1480:55:12"},{"nodeType":"YulVariableDeclaration","src":"1544:30:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1567:6:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1554:12:12"},"nodeType":"YulFunctionCall","src":"1554:20:12"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1548:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1583:63:12","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1642:2:12"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"1614:27:12"},"nodeType":"YulFunctionCall","src":"1614:31:12"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1598:15:12"},"nodeType":"YulFunctionCall","src":"1598:48:12"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"1587:7:12","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"1662:7:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1671:2:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1655:6:12"},"nodeType":"YulFunctionCall","src":"1655:19:12"},"nodeType":"YulExpressionStatement","src":"1655:19:12"},{"body":{"nodeType":"YulBlock","src":"1722:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1731:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1734:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1724:6:12"},"nodeType":"YulFunctionCall","src":"1724:12:12"},"nodeType":"YulExpressionStatement","src":"1724:12:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1697:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1705:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1693:3:12"},"nodeType":"YulFunctionCall","src":"1693:15:12"},{"kind":"number","nodeType":"YulLiteral","src":"1710:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1689:3:12"},"nodeType":"YulFunctionCall","src":"1689:26:12"},{"name":"end","nodeType":"YulIdentifier","src":"1717:3:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1686:2:12"},"nodeType":"YulFunctionCall","src":"1686:35:12"},"nodeType":"YulIf","src":"1683:55:12"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"1764:7:12"},{"kind":"number","nodeType":"YulLiteral","src":"1773:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1760:3:12"},"nodeType":"YulFunctionCall","src":"1760:18:12"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1784:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"1792:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1780:3:12"},"nodeType":"YulFunctionCall","src":"1780:17:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1799:2:12"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"1747:12:12"},"nodeType":"YulFunctionCall","src":"1747:55:12"},"nodeType":"YulExpressionStatement","src":"1747:55:12"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"1826:7:12"},{"name":"_1","nodeType":"YulIdentifier","src":"1835:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1822:3:12"},"nodeType":"YulFunctionCall","src":"1822:16:12"},{"kind":"number","nodeType":"YulLiteral","src":"1840:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1818:3:12"},"nodeType":"YulFunctionCall","src":"1818:27:12"},{"kind":"number","nodeType":"YulLiteral","src":"1847:1:12","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1811:6:12"},"nodeType":"YulFunctionCall","src":"1811:38:12"},"nodeType":"YulExpressionStatement","src":"1811:38:12"},{"nodeType":"YulAssignment","src":"1858:16:12","value":{"name":"array_1","nodeType":"YulIdentifier","src":"1867:7:12"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1858:5:12"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1444:6:12","type":""},{"name":"end","nodeType":"YulTypedName","src":"1452:3:12","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1460:5:12","type":""}],"src":"1418:462:12"},{"body":{"nodeType":"YulBlock","src":"1944:94:12","statements":[{"nodeType":"YulAssignment","src":"1954:29:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1976:6:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1963:12:12"},"nodeType":"YulFunctionCall","src":"1963:20:12"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1954:5:12"}]},{"body":{"nodeType":"YulBlock","src":"2016:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2025:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2028:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2018:6:12"},"nodeType":"YulFunctionCall","src":"2018:12:12"},"nodeType":"YulExpressionStatement","src":"2018:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2005:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"2012:1:12","type":"","value":"1"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2002:2:12"},"nodeType":"YulFunctionCall","src":"2002:12:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1995:6:12"},"nodeType":"YulFunctionCall","src":"1995:20:12"},"nodeType":"YulIf","src":"1992:40:12"}]},"name":"abi_decode_enum_CodeLanguage","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1923:6:12","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1934:5:12","type":""}],"src":"1885:153:12"},{"body":{"nodeType":"YulBlock","src":"2098:94:12","statements":[{"nodeType":"YulAssignment","src":"2108:29:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2130:6:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2117:12:12"},"nodeType":"YulFunctionCall","src":"2117:20:12"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2108:5:12"}]},{"body":{"nodeType":"YulBlock","src":"2170:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2179:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2182:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2172:6:12"},"nodeType":"YulFunctionCall","src":"2172:12:12"},"nodeType":"YulExpressionStatement","src":"2172:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2159:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"2166:1:12","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2156:2:12"},"nodeType":"YulFunctionCall","src":"2156:12:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2149:6:12"},"nodeType":"YulFunctionCall","src":"2149:20:12"},"nodeType":"YulIf","src":"2146:40:12"}]},"name":"abi_decode_enum_Location","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2077:6:12","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2088:5:12","type":""}],"src":"2043:149:12"},{"body":{"nodeType":"YulBlock","src":"2245:115:12","statements":[{"nodeType":"YulAssignment","src":"2255:29:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2277:6:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2264:12:12"},"nodeType":"YulFunctionCall","src":"2264:20:12"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2255:5:12"}]},{"body":{"nodeType":"YulBlock","src":"2338:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2347:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2350:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2340:6:12"},"nodeType":"YulFunctionCall","src":"2340:12:12"},"nodeType":"YulExpressionStatement","src":"2340:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2306:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2317:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"2324:10:12","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2313:3:12"},"nodeType":"YulFunctionCall","src":"2313:22:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2303:2:12"},"nodeType":"YulFunctionCall","src":"2303:33:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2296:6:12"},"nodeType":"YulFunctionCall","src":"2296:41:12"},"nodeType":"YulIf","src":"2293:61:12"}]},"name":"abi_decode_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2224:6:12","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2235:5:12","type":""}],"src":"2197:163:12"},{"body":{"nodeType":"YulBlock","src":"2413:123:12","statements":[{"nodeType":"YulAssignment","src":"2423:29:12","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2445:6:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2432:12:12"},"nodeType":"YulFunctionCall","src":"2432:20:12"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2423:5:12"}]},{"body":{"nodeType":"YulBlock","src":"2514:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2523:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2526:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2516:6:12"},"nodeType":"YulFunctionCall","src":"2516:12:12"},"nodeType":"YulExpressionStatement","src":"2516:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2474:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2485:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"2492:18:12","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2481:3:12"},"nodeType":"YulFunctionCall","src":"2481:30:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2471:2:12"},"nodeType":"YulFunctionCall","src":"2471:41:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2464:6:12"},"nodeType":"YulFunctionCall","src":"2464:49:12"},"nodeType":"YulIf","src":"2461:69:12"}]},"name":"abi_decode_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2392:6:12","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2403:5:12","type":""}],"src":"2365:171:12"},{"body":{"nodeType":"YulBlock","src":"2611:177:12","statements":[{"body":{"nodeType":"YulBlock","src":"2657:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2666:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2669:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2659:6:12"},"nodeType":"YulFunctionCall","src":"2659:12:12"},"nodeType":"YulExpressionStatement","src":"2659:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2632:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"2641:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2628:3:12"},"nodeType":"YulFunctionCall","src":"2628:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"2653:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2624:3:12"},"nodeType":"YulFunctionCall","src":"2624:32:12"},"nodeType":"YulIf","src":"2621:52:12"},{"nodeType":"YulVariableDeclaration","src":"2682:36:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2708:9:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2695:12:12"},"nodeType":"YulFunctionCall","src":"2695:23:12"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2686:5:12","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2752:5:12"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2727:24:12"},"nodeType":"YulFunctionCall","src":"2727:31:12"},"nodeType":"YulExpressionStatement","src":"2727:31:12"},{"nodeType":"YulAssignment","src":"2767:15:12","value":{"name":"value","nodeType":"YulIdentifier","src":"2777:5:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2767:6:12"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2577:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2588:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2600:6:12","type":""}],"src":"2541:247:12"},{"body":{"nodeType":"YulBlock","src":"2874:170:12","statements":[{"body":{"nodeType":"YulBlock","src":"2920:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2929:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2932:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2922:6:12"},"nodeType":"YulFunctionCall","src":"2922:12:12"},"nodeType":"YulExpressionStatement","src":"2922:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2895:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"2904:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2891:3:12"},"nodeType":"YulFunctionCall","src":"2891:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"2916:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2887:3:12"},"nodeType":"YulFunctionCall","src":"2887:32:12"},"nodeType":"YulIf","src":"2884:52:12"},{"nodeType":"YulVariableDeclaration","src":"2945:29:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2964:9:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2958:5:12"},"nodeType":"YulFunctionCall","src":"2958:16:12"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2949:5:12","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3008:5:12"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2983:24:12"},"nodeType":"YulFunctionCall","src":"2983:31:12"},"nodeType":"YulExpressionStatement","src":"2983:31:12"},{"nodeType":"YulAssignment","src":"3023:15:12","value":{"name":"value","nodeType":"YulIdentifier","src":"3033:5:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3023:6:12"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2840:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2851:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2863:6:12","type":""}],"src":"2793:251:12"},{"body":{"nodeType":"YulBlock","src":"3130:103:12","statements":[{"body":{"nodeType":"YulBlock","src":"3176:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3185:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3188:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3178:6:12"},"nodeType":"YulFunctionCall","src":"3178:12:12"},"nodeType":"YulExpressionStatement","src":"3178:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3151:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"3160:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3147:3:12"},"nodeType":"YulFunctionCall","src":"3147:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"3172:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3143:3:12"},"nodeType":"YulFunctionCall","src":"3143:32:12"},"nodeType":"YulIf","src":"3140:52:12"},{"nodeType":"YulAssignment","src":"3201:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3217:9:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3211:5:12"},"nodeType":"YulFunctionCall","src":"3211:16:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3201:6:12"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3096:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3107:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3119:6:12","type":""}],"src":"3049:184:12"},{"body":{"nodeType":"YulBlock","src":"3360:485:12","statements":[{"body":{"nodeType":"YulBlock","src":"3406:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3415:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3418:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3408:6:12"},"nodeType":"YulFunctionCall","src":"3408:12:12"},"nodeType":"YulExpressionStatement","src":"3408:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3381:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"3390:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3377:3:12"},"nodeType":"YulFunctionCall","src":"3377:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"3402:2:12","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3373:3:12"},"nodeType":"YulFunctionCall","src":"3373:32:12"},"nodeType":"YulIf","src":"3370:52:12"},{"nodeType":"YulAssignment","src":"3431:33:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3454:9:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3441:12:12"},"nodeType":"YulFunctionCall","src":"3441:23:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3431:6:12"}]},{"nodeType":"YulVariableDeclaration","src":"3473:46:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3504:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"3515:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3500:3:12"},"nodeType":"YulFunctionCall","src":"3500:18:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3487:12:12"},"nodeType":"YulFunctionCall","src":"3487:32:12"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3477:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3528:28:12","value":{"kind":"number","nodeType":"YulLiteral","src":"3538:18:12","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3532:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"3583:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3592:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3595:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3585:6:12"},"nodeType":"YulFunctionCall","src":"3585:12:12"},"nodeType":"YulExpressionStatement","src":"3585:12:12"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3571:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"3579:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3568:2:12"},"nodeType":"YulFunctionCall","src":"3568:14:12"},"nodeType":"YulIf","src":"3565:34:12"},{"nodeType":"YulAssignment","src":"3608:59:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3639:9:12"},{"name":"offset","nodeType":"YulIdentifier","src":"3650:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3635:3:12"},"nodeType":"YulFunctionCall","src":"3635:22:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3659:7:12"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"3618:16:12"},"nodeType":"YulFunctionCall","src":"3618:49:12"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3608:6:12"}]},{"nodeType":"YulVariableDeclaration","src":"3676:48:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3709:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"3720:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3705:3:12"},"nodeType":"YulFunctionCall","src":"3705:18:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3692:12:12"},"nodeType":"YulFunctionCall","src":"3692:32:12"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"3680:8:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"3753:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3762:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3765:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3755:6:12"},"nodeType":"YulFunctionCall","src":"3755:12:12"},"nodeType":"YulExpressionStatement","src":"3755:12:12"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"3739:8:12"},{"name":"_1","nodeType":"YulIdentifier","src":"3749:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3736:2:12"},"nodeType":"YulFunctionCall","src":"3736:16:12"},"nodeType":"YulIf","src":"3733:36:12"},{"nodeType":"YulAssignment","src":"3778:61:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3809:9:12"},{"name":"offset_1","nodeType":"YulIdentifier","src":"3820:8:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3805:3:12"},"nodeType":"YulFunctionCall","src":"3805:24:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3831:7:12"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"3788:16:12"},"nodeType":"YulFunctionCall","src":"3788:51:12"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3778:6:12"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3310:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3321:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3333:6:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3341:6:12","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3349:6:12","type":""}],"src":"3238:607:12"},{"body":{"nodeType":"YulBlock","src":"3940:544:12","statements":[{"body":{"nodeType":"YulBlock","src":"3986:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3995:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3998:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3988:6:12"},"nodeType":"YulFunctionCall","src":"3988:12:12"},"nodeType":"YulExpressionStatement","src":"3988:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3961:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"3970:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3957:3:12"},"nodeType":"YulFunctionCall","src":"3957:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"3982:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3953:3:12"},"nodeType":"YulFunctionCall","src":"3953:32:12"},"nodeType":"YulIf","src":"3950:52:12"},{"nodeType":"YulVariableDeclaration","src":"4011:30:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4031:9:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4025:5:12"},"nodeType":"YulFunctionCall","src":"4025:16:12"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4015:6:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"4084:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4093:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4096:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4086:6:12"},"nodeType":"YulFunctionCall","src":"4086:12:12"},"nodeType":"YulExpressionStatement","src":"4086:12:12"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4056:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"4064:18:12","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4053:2:12"},"nodeType":"YulFunctionCall","src":"4053:30:12"},"nodeType":"YulIf","src":"4050:50:12"},{"nodeType":"YulVariableDeclaration","src":"4109:32:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4123:9:12"},{"name":"offset","nodeType":"YulIdentifier","src":"4134:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4119:3:12"},"nodeType":"YulFunctionCall","src":"4119:22:12"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4113:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"4189:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4198:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4201:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4191:6:12"},"nodeType":"YulFunctionCall","src":"4191:12:12"},"nodeType":"YulExpressionStatement","src":"4191:12:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4168:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"4172:4:12","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4164:3:12"},"nodeType":"YulFunctionCall","src":"4164:13:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4179:7:12"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4160:3:12"},"nodeType":"YulFunctionCall","src":"4160:27:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4153:6:12"},"nodeType":"YulFunctionCall","src":"4153:35:12"},"nodeType":"YulIf","src":"4150:55:12"},{"nodeType":"YulVariableDeclaration","src":"4214:19:12","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4230:2:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4224:5:12"},"nodeType":"YulFunctionCall","src":"4224:9:12"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4218:2:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4242:61:12","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4299:2:12"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"4271:27:12"},"nodeType":"YulFunctionCall","src":"4271:31:12"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4255:15:12"},"nodeType":"YulFunctionCall","src":"4255:48:12"},"variables":[{"name":"array","nodeType":"YulTypedName","src":"4246:5:12","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4319:5:12"},{"name":"_2","nodeType":"YulIdentifier","src":"4326:2:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4312:6:12"},"nodeType":"YulFunctionCall","src":"4312:17:12"},"nodeType":"YulExpressionStatement","src":"4312:17:12"},{"body":{"nodeType":"YulBlock","src":"4375:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4384:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4387:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4377:6:12"},"nodeType":"YulFunctionCall","src":"4377:12:12"},"nodeType":"YulExpressionStatement","src":"4377:12:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4352:2:12"},{"name":"_2","nodeType":"YulIdentifier","src":"4356:2:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4348:3:12"},"nodeType":"YulFunctionCall","src":"4348:11:12"},{"kind":"number","nodeType":"YulLiteral","src":"4361:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4344:3:12"},"nodeType":"YulFunctionCall","src":"4344:20:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4366:7:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4341:2:12"},"nodeType":"YulFunctionCall","src":"4341:33:12"},"nodeType":"YulIf","src":"4338:53:12"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"4426:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"4430:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4422:3:12"},"nodeType":"YulFunctionCall","src":"4422:11:12"},{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4439:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"4446:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4435:3:12"},"nodeType":"YulFunctionCall","src":"4435:14:12"},{"name":"_2","nodeType":"YulIdentifier","src":"4451:2:12"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"4400:21:12"},"nodeType":"YulFunctionCall","src":"4400:54:12"},"nodeType":"YulExpressionStatement","src":"4400:54:12"},{"nodeType":"YulAssignment","src":"4463:15:12","value":{"name":"array","nodeType":"YulIdentifier","src":"4473:5:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4463:6:12"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3906:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3917:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3929:6:12","type":""}],"src":"3850:634:12"},{"body":{"nodeType":"YulBlock","src":"4711:1126:12","statements":[{"body":{"nodeType":"YulBlock","src":"4758:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4767:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4770:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4760:6:12"},"nodeType":"YulFunctionCall","src":"4760:12:12"},"nodeType":"YulExpressionStatement","src":"4760:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4732:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"4741:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4728:3:12"},"nodeType":"YulFunctionCall","src":"4728:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"4753:3:12","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4724:3:12"},"nodeType":"YulFunctionCall","src":"4724:33:12"},"nodeType":"YulIf","src":"4721:53:12"},{"nodeType":"YulVariableDeclaration","src":"4783:37:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4810:9:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4797:12:12"},"nodeType":"YulFunctionCall","src":"4797:23:12"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4787:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4829:28:12","value":{"kind":"number","nodeType":"YulLiteral","src":"4839:18:12","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4833:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"4884:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4893:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4896:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4886:6:12"},"nodeType":"YulFunctionCall","src":"4886:12:12"},"nodeType":"YulExpressionStatement","src":"4886:12:12"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4872:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"4880:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4869:2:12"},"nodeType":"YulFunctionCall","src":"4869:14:12"},"nodeType":"YulIf","src":"4866:34:12"},{"nodeType":"YulVariableDeclaration","src":"4909:84:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4965:9:12"},{"name":"offset","nodeType":"YulIdentifier","src":"4976:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4961:3:12"},"nodeType":"YulFunctionCall","src":"4961:22:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4985:7:12"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"4935:25:12"},"nodeType":"YulFunctionCall","src":"4935:58:12"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"4913:8:12","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"4923:8:12","type":""}]},{"nodeType":"YulAssignment","src":"5002:18:12","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"5012:8:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5002:6:12"}]},{"nodeType":"YulAssignment","src":"5029:18:12","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"5039:8:12"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5029:6:12"}]},{"nodeType":"YulVariableDeclaration","src":"5056:48:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5089:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"5100:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5085:3:12"},"nodeType":"YulFunctionCall","src":"5085:18:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5072:12:12"},"nodeType":"YulFunctionCall","src":"5072:32:12"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5060:8:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"5133:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5142:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5145:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5135:6:12"},"nodeType":"YulFunctionCall","src":"5135:12:12"},"nodeType":"YulExpressionStatement","src":"5135:12:12"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5119:8:12"},{"name":"_1","nodeType":"YulIdentifier","src":"5129:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5116:2:12"},"nodeType":"YulFunctionCall","src":"5116:16:12"},"nodeType":"YulIf","src":"5113:36:12"},{"nodeType":"YulVariableDeclaration","src":"5158:86:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5214:9:12"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5225:8:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5210:3:12"},"nodeType":"YulFunctionCall","src":"5210:24:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5236:7:12"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"5184:25:12"},"nodeType":"YulFunctionCall","src":"5184:60:12"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"5162:8:12","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"5172:8:12","type":""}]},{"nodeType":"YulAssignment","src":"5253:18:12","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"5263:8:12"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5253:6:12"}]},{"nodeType":"YulAssignment","src":"5280:18:12","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"5290:8:12"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5280:6:12"}]},{"nodeType":"YulVariableDeclaration","src":"5307:48:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5340:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"5351:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5336:3:12"},"nodeType":"YulFunctionCall","src":"5336:18:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5323:12:12"},"nodeType":"YulFunctionCall","src":"5323:32:12"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"5311:8:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"5384:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5393:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5396:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5386:6:12"},"nodeType":"YulFunctionCall","src":"5386:12:12"},"nodeType":"YulExpressionStatement","src":"5386:12:12"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"5370:8:12"},{"name":"_1","nodeType":"YulIdentifier","src":"5380:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5367:2:12"},"nodeType":"YulFunctionCall","src":"5367:16:12"},"nodeType":"YulIf","src":"5364:36:12"},{"nodeType":"YulVariableDeclaration","src":"5409:34:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5423:9:12"},{"name":"offset_2","nodeType":"YulIdentifier","src":"5434:8:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5419:3:12"},"nodeType":"YulFunctionCall","src":"5419:24:12"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"5413:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"5491:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5500:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5503:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5493:6:12"},"nodeType":"YulFunctionCall","src":"5493:12:12"},"nodeType":"YulExpressionStatement","src":"5493:12:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5470:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"5474:4:12","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5466:3:12"},"nodeType":"YulFunctionCall","src":"5466:13:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5481:7:12"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5462:3:12"},"nodeType":"YulFunctionCall","src":"5462:27:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5455:6:12"},"nodeType":"YulFunctionCall","src":"5455:35:12"},"nodeType":"YulIf","src":"5452:55:12"},{"nodeType":"YulVariableDeclaration","src":"5516:30:12","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5543:2:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5530:12:12"},"nodeType":"YulFunctionCall","src":"5530:16:12"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5520:6:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"5573:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5582:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5585:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5575:6:12"},"nodeType":"YulFunctionCall","src":"5575:12:12"},"nodeType":"YulExpressionStatement","src":"5575:12:12"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5561:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"5569:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5558:2:12"},"nodeType":"YulFunctionCall","src":"5558:14:12"},"nodeType":"YulIf","src":"5555:34:12"},{"body":{"nodeType":"YulBlock","src":"5647:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5656:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5659:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5649:6:12"},"nodeType":"YulFunctionCall","src":"5649:12:12"},"nodeType":"YulExpressionStatement","src":"5649:12:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5612:2:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5620:1:12","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"5623:6:12"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5616:3:12"},"nodeType":"YulFunctionCall","src":"5616:14:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5608:3:12"},"nodeType":"YulFunctionCall","src":"5608:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"5633:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5604:3:12"},"nodeType":"YulFunctionCall","src":"5604:32:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5638:7:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5601:2:12"},"nodeType":"YulFunctionCall","src":"5601:45:12"},"nodeType":"YulIf","src":"5598:65:12"},{"nodeType":"YulAssignment","src":"5672:21:12","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"5686:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"5690:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5682:3:12"},"nodeType":"YulFunctionCall","src":"5682:11:12"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5672:6:12"}]},{"nodeType":"YulAssignment","src":"5702:16:12","value":{"name":"length","nodeType":"YulIdentifier","src":"5712:6:12"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"5702:6:12"}]},{"nodeType":"YulAssignment","src":"5727:47:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5759:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"5770:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5755:3:12"},"nodeType":"YulFunctionCall","src":"5755:18:12"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"5737:17:12"},"nodeType":"YulFunctionCall","src":"5737:37:12"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"5727:6:12"}]},{"nodeType":"YulAssignment","src":"5783:48:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5815:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"5826:3:12","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5811:3:12"},"nodeType":"YulFunctionCall","src":"5811:19:12"}],"functionName":{"name":"abi_decode_uint32","nodeType":"YulIdentifier","src":"5793:17:12"},"nodeType":"YulFunctionCall","src":"5793:38:12"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"5783:6:12"}]}]},"name":"abi_decode_tuple_t_string_calldata_ptrt_bytes_calldata_ptrt_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint64t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4621:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4632:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4644:6:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4652:6:12","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4660:6:12","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4668:6:12","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4676:6:12","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4684:6:12","type":""},{"name":"value6","nodeType":"YulTypedName","src":"4692:6:12","type":""},{"name":"value7","nodeType":"YulTypedName","src":"4700:6:12","type":""}],"src":"4489:1348:12"},{"body":{"nodeType":"YulBlock","src":"5986:1250:12","statements":[{"body":{"nodeType":"YulBlock","src":"6033:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6042:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6045:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6035:6:12"},"nodeType":"YulFunctionCall","src":"6035:12:12"},"nodeType":"YulExpressionStatement","src":"6035:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6007:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"6016:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6003:3:12"},"nodeType":"YulFunctionCall","src":"6003:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"6028:3:12","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5999:3:12"},"nodeType":"YulFunctionCall","src":"5999:33:12"},"nodeType":"YulIf","src":"5996:53:12"},{"nodeType":"YulVariableDeclaration","src":"6058:37:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6085:9:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6072:12:12"},"nodeType":"YulFunctionCall","src":"6072:23:12"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6062:6:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6104:28:12","value":{"kind":"number","nodeType":"YulLiteral","src":"6114:18:12","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6108:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"6159:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6168:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6171:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6161:6:12"},"nodeType":"YulFunctionCall","src":"6161:12:12"},"nodeType":"YulExpressionStatement","src":"6161:12:12"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6147:6:12"},{"name":"_1","nodeType":"YulIdentifier","src":"6155:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6144:2:12"},"nodeType":"YulFunctionCall","src":"6144:14:12"},"nodeType":"YulIf","src":"6141:34:12"},{"nodeType":"YulVariableDeclaration","src":"6184:32:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6198:9:12"},{"name":"offset","nodeType":"YulIdentifier","src":"6209:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6194:3:12"},"nodeType":"YulFunctionCall","src":"6194:22:12"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"6188:2:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"6256:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6265:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6268:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6258:6:12"},"nodeType":"YulFunctionCall","src":"6258:12:12"},"nodeType":"YulExpressionStatement","src":"6258:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6236:7:12"},{"name":"_2","nodeType":"YulIdentifier","src":"6245:2:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6232:3:12"},"nodeType":"YulFunctionCall","src":"6232:16:12"},{"kind":"number","nodeType":"YulLiteral","src":"6250:4:12","type":"","value":"0xc0"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6228:3:12"},"nodeType":"YulFunctionCall","src":"6228:27:12"},"nodeType":"YulIf","src":"6225:47:12"},{"nodeType":"YulVariableDeclaration","src":"6281:35:12","value":{"arguments":[],"functionName":{"name":"allocate_memory_1834","nodeType":"YulIdentifier","src":"6294:20:12"},"nodeType":"YulFunctionCall","src":"6294:22:12"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6285:5:12","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6332:5:12"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6364:2:12"}],"functionName":{"name":"abi_decode_enum_Location","nodeType":"YulIdentifier","src":"6339:24:12"},"nodeType":"YulFunctionCall","src":"6339:28:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6325:6:12"},"nodeType":"YulFunctionCall","src":"6325:43:12"},"nodeType":"YulExpressionStatement","src":"6325:43:12"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6388:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"6395:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6384:3:12"},"nodeType":"YulFunctionCall","src":"6384:14:12"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6429:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"6433:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6425:3:12"},"nodeType":"YulFunctionCall","src":"6425:11:12"}],"functionName":{"name":"abi_decode_enum_Location","nodeType":"YulIdentifier","src":"6400:24:12"},"nodeType":"YulFunctionCall","src":"6400:37:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6377:6:12"},"nodeType":"YulFunctionCall","src":"6377:61:12"},"nodeType":"YulExpressionStatement","src":"6377:61:12"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6458:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"6465:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6454:3:12"},"nodeType":"YulFunctionCall","src":"6454:14:12"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6503:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"6507:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6499:3:12"},"nodeType":"YulFunctionCall","src":"6499:11:12"}],"functionName":{"name":"abi_decode_enum_CodeLanguage","nodeType":"YulIdentifier","src":"6470:28:12"},"nodeType":"YulFunctionCall","src":"6470:41:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6447:6:12"},"nodeType":"YulFunctionCall","src":"6447:65:12"},"nodeType":"YulExpressionStatement","src":"6447:65:12"},{"nodeType":"YulVariableDeclaration","src":"6521:41:12","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6554:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"6558:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6550:3:12"},"nodeType":"YulFunctionCall","src":"6550:11:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6537:12:12"},"nodeType":"YulFunctionCall","src":"6537:25:12"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"6525:8:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"6591:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6600:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6603:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6593:6:12"},"nodeType":"YulFunctionCall","src":"6593:12:12"},"nodeType":"YulExpressionStatement","src":"6593:12:12"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6577:8:12"},{"name":"_1","nodeType":"YulIdentifier","src":"6587:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6574:2:12"},"nodeType":"YulFunctionCall","src":"6574:16:12"},"nodeType":"YulIf","src":"6571:36:12"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6627:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"6634:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6623:3:12"},"nodeType":"YulFunctionCall","src":"6623:14:12"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6660:2:12"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6664:8:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6656:3:12"},"nodeType":"YulFunctionCall","src":"6656:17:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6675:7:12"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6639:16:12"},"nodeType":"YulFunctionCall","src":"6639:44:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6616:6:12"},"nodeType":"YulFunctionCall","src":"6616:68:12"},"nodeType":"YulExpressionStatement","src":"6616:68:12"},{"nodeType":"YulVariableDeclaration","src":"6693:42:12","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6726:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"6730:3:12","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6722:3:12"},"nodeType":"YulFunctionCall","src":"6722:12:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6709:12:12"},"nodeType":"YulFunctionCall","src":"6709:26:12"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"6697:8:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"6764:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6773:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6776:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6766:6:12"},"nodeType":"YulFunctionCall","src":"6766:12:12"},"nodeType":"YulExpressionStatement","src":"6766:12:12"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"6750:8:12"},{"name":"_1","nodeType":"YulIdentifier","src":"6760:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6747:2:12"},"nodeType":"YulFunctionCall","src":"6747:16:12"},"nodeType":"YulIf","src":"6744:36:12"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6800:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"6807:3:12","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6796:3:12"},"nodeType":"YulFunctionCall","src":"6796:15:12"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6834:2:12"},{"name":"offset_2","nodeType":"YulIdentifier","src":"6838:8:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6830:3:12"},"nodeType":"YulFunctionCall","src":"6830:17:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6849:7:12"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6813:16:12"},"nodeType":"YulFunctionCall","src":"6813:44:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6789:6:12"},"nodeType":"YulFunctionCall","src":"6789:69:12"},"nodeType":"YulExpressionStatement","src":"6789:69:12"},{"nodeType":"YulVariableDeclaration","src":"6867:42:12","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6900:2:12"},{"kind":"number","nodeType":"YulLiteral","src":"6904:3:12","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6896:3:12"},"nodeType":"YulFunctionCall","src":"6896:12:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6883:12:12"},"nodeType":"YulFunctionCall","src":"6883:26:12"},"variables":[{"name":"offset_3","nodeType":"YulTypedName","src":"6871:8:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"6938:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6947:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6950:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6940:6:12"},"nodeType":"YulFunctionCall","src":"6940:12:12"},"nodeType":"YulExpressionStatement","src":"6940:12:12"}]},"condition":{"arguments":[{"name":"offset_3","nodeType":"YulIdentifier","src":"6924:8:12"},{"name":"_1","nodeType":"YulIdentifier","src":"6934:2:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6921:2:12"},"nodeType":"YulFunctionCall","src":"6921:16:12"},"nodeType":"YulIf","src":"6918:36:12"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6974:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"6981:3:12","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6970:3:12"},"nodeType":"YulFunctionCall","src":"6970:15:12"},{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7019:2:12"},{"name":"offset_3","nodeType":"YulIdentifier","src":"7023:8:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7015:3:12"},"nodeType":"YulFunctionCall","src":"7015:17:12"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7034:7:12"}],"functionName":{"name":"abi_decode_array_string_dyn","nodeType":"YulIdentifier","src":"6987:27:12"},"nodeType":"YulFunctionCall","src":"6987:55:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6963:6:12"},"nodeType":"YulFunctionCall","src":"6963:80:12"},"nodeType":"YulExpressionStatement","src":"6963:80:12"},{"nodeType":"YulAssignment","src":"7052:15:12","value":{"name":"value","nodeType":"YulIdentifier","src":"7062:5:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7052:6:12"}]},{"nodeType":"YulAssignment","src":"7076:47:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7108:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"7119:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7104:3:12"},"nodeType":"YulFunctionCall","src":"7104:18:12"}],"functionName":{"name":"abi_decode_uint64","nodeType":"YulIdentifier","src":"7086:17:12"},"nodeType":"YulFunctionCall","src":"7086:37:12"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7076:6:12"}]},{"nodeType":"YulAssignment","src":"7132:47:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7164:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"7175:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7160:3:12"},"nodeType":"YulFunctionCall","src":"7160:18:12"}],"functionName":{"name":"abi_decode_uint32","nodeType":"YulIdentifier","src":"7142:17:12"},"nodeType":"YulFunctionCall","src":"7142:37:12"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7132:6:12"}]},{"nodeType":"YulAssignment","src":"7188:42:12","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7215:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"7226:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7211:3:12"},"nodeType":"YulFunctionCall","src":"7211:18:12"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7198:12:12"},"nodeType":"YulFunctionCall","src":"7198:32:12"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7188:6:12"}]}]},"name":"abi_decode_tuple_t_struct$_Request_$1354_memory_ptrt_uint64t_uint32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5928:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5939:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5951:6:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5959:6:12","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5967:6:12","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5975:6:12","type":""}],"src":"5842:1394:12"},{"body":{"nodeType":"YulBlock","src":"7321:216:12","statements":[{"body":{"nodeType":"YulBlock","src":"7367:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7376:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7379:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7369:6:12"},"nodeType":"YulFunctionCall","src":"7369:12:12"},"nodeType":"YulExpressionStatement","src":"7369:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7342:7:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"7351:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7338:3:12"},"nodeType":"YulFunctionCall","src":"7338:23:12"},{"kind":"number","nodeType":"YulLiteral","src":"7363:2:12","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7334:3:12"},"nodeType":"YulFunctionCall","src":"7334:32:12"},"nodeType":"YulIf","src":"7331:52:12"},{"nodeType":"YulVariableDeclaration","src":"7392:29:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7411:9:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7405:5:12"},"nodeType":"YulFunctionCall","src":"7405:16:12"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7396:5:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"7491:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7500:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7503:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7493:6:12"},"nodeType":"YulFunctionCall","src":"7493:12:12"},"nodeType":"YulExpressionStatement","src":"7493:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7443:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7454:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"7461:26:12","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7450:3:12"},"nodeType":"YulFunctionCall","src":"7450:38:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7440:2:12"},"nodeType":"YulFunctionCall","src":"7440:49:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7433:6:12"},"nodeType":"YulFunctionCall","src":"7433:57:12"},"nodeType":"YulIf","src":"7430:77:12"},{"nodeType":"YulAssignment","src":"7516:15:12","value":{"name":"value","nodeType":"YulIdentifier","src":"7526:5:12"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7516:6:12"}]}]},"name":"abi_decode_tuple_t_uint96_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7287:9:12","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7298:7:12","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7310:6:12","type":""}],"src":"7241:296:12"},{"body":{"nodeType":"YulBlock","src":"7591:208:12","statements":[{"nodeType":"YulVariableDeclaration","src":"7601:26:12","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7621:5:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7615:5:12"},"nodeType":"YulFunctionCall","src":"7615:12:12"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7605:6:12","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7643:3:12"},{"name":"length","nodeType":"YulIdentifier","src":"7648:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7636:6:12"},"nodeType":"YulFunctionCall","src":"7636:19:12"},"nodeType":"YulExpressionStatement","src":"7636:19:12"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7690:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"7697:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7686:3:12"},"nodeType":"YulFunctionCall","src":"7686:16:12"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7708:3:12"},{"kind":"number","nodeType":"YulLiteral","src":"7713:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7704:3:12"},"nodeType":"YulFunctionCall","src":"7704:14:12"},{"name":"length","nodeType":"YulIdentifier","src":"7720:6:12"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"7664:21:12"},"nodeType":"YulFunctionCall","src":"7664:63:12"},"nodeType":"YulExpressionStatement","src":"7664:63:12"},{"nodeType":"YulAssignment","src":"7736:57:12","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7751:3:12"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7764:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"7772:2:12","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7760:3:12"},"nodeType":"YulFunctionCall","src":"7760:15:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7781:2:12","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7777:3:12"},"nodeType":"YulFunctionCall","src":"7777:7:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7756:3:12"},"nodeType":"YulFunctionCall","src":"7756:29:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7747:3:12"},"nodeType":"YulFunctionCall","src":"7747:39:12"},{"kind":"number","nodeType":"YulLiteral","src":"7788:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7743:3:12"},"nodeType":"YulFunctionCall","src":"7743:50:12"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7736:3:12"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7568:5:12","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7575:3:12","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7583:3:12","type":""}],"src":"7542:257:12"},{"body":{"nodeType":"YulBlock","src":"7905:125:12","statements":[{"nodeType":"YulAssignment","src":"7915:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7927:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"7938:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7923:3:12"},"nodeType":"YulFunctionCall","src":"7923:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7915:4:12"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7957:9:12"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7972:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"7980:42:12","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7968:3:12"},"nodeType":"YulFunctionCall","src":"7968:55:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7950:6:12"},"nodeType":"YulFunctionCall","src":"7950:74:12"},"nodeType":"YulExpressionStatement","src":"7950:74:12"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7874:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7885:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7896:4:12","type":""}],"src":"7804:226:12"},{"body":{"nodeType":"YulBlock","src":"8136:76:12","statements":[{"nodeType":"YulAssignment","src":"8146:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8158:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"8169:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8154:3:12"},"nodeType":"YulFunctionCall","src":"8154:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8146:4:12"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8188:9:12"},{"name":"value0","nodeType":"YulIdentifier","src":"8199:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8181:6:12"},"nodeType":"YulFunctionCall","src":"8181:25:12"},"nodeType":"YulExpressionStatement","src":"8181:25:12"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8105:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8116:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8127:4:12","type":""}],"src":"8035:177:12"},{"body":{"nodeType":"YulBlock","src":"8336:98:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8353:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"8364:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8346:6:12"},"nodeType":"YulFunctionCall","src":"8346:21:12"},"nodeType":"YulExpressionStatement","src":"8346:21:12"},{"nodeType":"YulAssignment","src":"8376:52:12","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8401:6:12"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8413:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"8424:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8409:3:12"},"nodeType":"YulFunctionCall","src":"8409:18:12"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"8384:16:12"},"nodeType":"YulFunctionCall","src":"8384:44:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8376:4:12"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8305:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8316:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8327:4:12","type":""}],"src":"8217:217:12"},{"body":{"nodeType":"YulBlock","src":"8604:212:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8621:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"8632:2:12","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8614:6:12"},"nodeType":"YulFunctionCall","src":"8614:21:12"},"nodeType":"YulExpressionStatement","src":"8614:21:12"},{"nodeType":"YulVariableDeclaration","src":"8644:58:12","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8675:6:12"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8687:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"8698:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8683:3:12"},"nodeType":"YulFunctionCall","src":"8683:18:12"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"8658:16:12"},"nodeType":"YulFunctionCall","src":"8658:44:12"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"8648:6:12","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8722:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"8733:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8718:3:12"},"nodeType":"YulFunctionCall","src":"8718:18:12"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"8742:6:12"},{"name":"headStart","nodeType":"YulIdentifier","src":"8750:9:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8738:3:12"},"nodeType":"YulFunctionCall","src":"8738:22:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8711:6:12"},"nodeType":"YulFunctionCall","src":"8711:50:12"},"nodeType":"YulExpressionStatement","src":"8711:50:12"},{"nodeType":"YulAssignment","src":"8770:40:12","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8795:6:12"},{"name":"tail_1","nodeType":"YulIdentifier","src":"8803:6:12"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"8778:16:12"},"nodeType":"YulFunctionCall","src":"8778:32:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8770:4:12"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8565:9:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8576:6:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8584:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8595:4:12","type":""}],"src":"8439:377:12"},{"body":{"nodeType":"YulBlock","src":"8995:172:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9012:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"9023:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9005:6:12"},"nodeType":"YulFunctionCall","src":"9005:21:12"},"nodeType":"YulExpressionStatement","src":"9005:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9046:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"9057:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9042:3:12"},"nodeType":"YulFunctionCall","src":"9042:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"9062:2:12","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9035:6:12"},"nodeType":"YulFunctionCall","src":"9035:30:12"},"nodeType":"YulExpressionStatement","src":"9035:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9085:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"9096:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9081:3:12"},"nodeType":"YulFunctionCall","src":"9081:18:12"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nodeType":"YulLiteral","src":"9101:24:12","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9074:6:12"},"nodeType":"YulFunctionCall","src":"9074:52:12"},"nodeType":"YulExpressionStatement","src":"9074:52:12"},{"nodeType":"YulAssignment","src":"9135:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9147:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"9158:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9143:3:12"},"nodeType":"YulFunctionCall","src":"9143:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9135:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8972:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8986:4:12","type":""}],"src":"8821:346:12"},{"body":{"nodeType":"YulBlock","src":"9346:172:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9363:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"9374:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9356:6:12"},"nodeType":"YulFunctionCall","src":"9356:21:12"},"nodeType":"YulExpressionStatement","src":"9356:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9397:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"9408:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9393:3:12"},"nodeType":"YulFunctionCall","src":"9393:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"9413:2:12","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9386:6:12"},"nodeType":"YulFunctionCall","src":"9386:30:12"},"nodeType":"YulExpressionStatement","src":"9386:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9436:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"9447:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9432:3:12"},"nodeType":"YulFunctionCall","src":"9432:18:12"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nodeType":"YulLiteral","src":"9452:24:12","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9425:6:12"},"nodeType":"YulFunctionCall","src":"9425:52:12"},"nodeType":"YulExpressionStatement","src":"9425:52:12"},{"nodeType":"YulAssignment","src":"9486:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9498:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"9509:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9494:3:12"},"nodeType":"YulFunctionCall","src":"9494:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9486:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9323:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9337:4:12","type":""}],"src":"9172:346:12"},{"body":{"nodeType":"YulBlock","src":"9697:173:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9714:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"9725:2:12","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9707:6:12"},"nodeType":"YulFunctionCall","src":"9707:21:12"},"nodeType":"YulExpressionStatement","src":"9707:21:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9748:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"9759:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9744:3:12"},"nodeType":"YulFunctionCall","src":"9744:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"9764:2:12","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9737:6:12"},"nodeType":"YulFunctionCall","src":"9737:30:12"},"nodeType":"YulExpressionStatement","src":"9737:30:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9787:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"9798:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9783:3:12"},"nodeType":"YulFunctionCall","src":"9783:18:12"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"9803:25:12","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9776:6:12"},"nodeType":"YulFunctionCall","src":"9776:53:12"},"nodeType":"YulExpressionStatement","src":"9776:53:12"},{"nodeType":"YulAssignment","src":"9838:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9850:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"9861:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9846:3:12"},"nodeType":"YulFunctionCall","src":"9846:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9838:4:12"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9674:9:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9688:4:12","type":""}],"src":"9523:347:12"},{"body":{"nodeType":"YulBlock","src":"9976:76:12","statements":[{"nodeType":"YulAssignment","src":"9986:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9998:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"10009:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9994:3:12"},"nodeType":"YulFunctionCall","src":"9994:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9986:4:12"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10028:9:12"},{"name":"value0","nodeType":"YulIdentifier","src":"10039:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10021:6:12"},"nodeType":"YulFunctionCall","src":"10021:25:12"},"nodeType":"YulExpressionStatement","src":"10021:25:12"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9945:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9956:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9967:4:12","type":""}],"src":"9875:177:12"},{"body":{"nodeType":"YulBlock","src":"10256:271:12","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10273:9:12"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10288:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"10296:18:12","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10284:3:12"},"nodeType":"YulFunctionCall","src":"10284:31:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10266:6:12"},"nodeType":"YulFunctionCall","src":"10266:50:12"},"nodeType":"YulExpressionStatement","src":"10266:50:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10336:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"10347:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10332:3:12"},"nodeType":"YulFunctionCall","src":"10332:18:12"},{"kind":"number","nodeType":"YulLiteral","src":"10352:3:12","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10325:6:12"},"nodeType":"YulFunctionCall","src":"10325:31:12"},"nodeType":"YulExpressionStatement","src":"10325:31:12"},{"nodeType":"YulAssignment","src":"10365:53:12","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10390:6:12"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10402:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"10413:3:12","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10398:3:12"},"nodeType":"YulFunctionCall","src":"10398:19:12"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"10373:16:12"},"nodeType":"YulFunctionCall","src":"10373:45:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10365:4:12"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10438:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"10449:2:12","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10434:3:12"},"nodeType":"YulFunctionCall","src":"10434:18:12"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"10458:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"10466:10:12","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10454:3:12"},"nodeType":"YulFunctionCall","src":"10454:23:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10427:6:12"},"nodeType":"YulFunctionCall","src":"10427:51:12"},"nodeType":"YulExpressionStatement","src":"10427:51:12"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10498:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"10509:2:12","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10494:3:12"},"nodeType":"YulFunctionCall","src":"10494:18:12"},{"name":"value3","nodeType":"YulIdentifier","src":"10514:6:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10487:6:12"},"nodeType":"YulFunctionCall","src":"10487:34:12"},"nodeType":"YulExpressionStatement","src":"10487:34:12"}]},"name":"abi_encode_tuple_t_uint64_t_bytes_memory_ptr_t_uint32_t_uint256__to_t_uint64_t_bytes_memory_ptr_t_uint32_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10201:9:12","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10212:6:12","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10220:6:12","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10228:6:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10236:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10247:4:12","type":""}],"src":"10057:470:12"},{"body":{"nodeType":"YulBlock","src":"10631:109:12","statements":[{"nodeType":"YulAssignment","src":"10641:26:12","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10653:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"10664:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10649:3:12"},"nodeType":"YulFunctionCall","src":"10649:18:12"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10641:4:12"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10683:9:12"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10698:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"10706:26:12","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10694:3:12"},"nodeType":"YulFunctionCall","src":"10694:39:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10676:6:12"},"nodeType":"YulFunctionCall","src":"10676:58:12"},"nodeType":"YulExpressionStatement","src":"10676:58:12"}]},"name":"abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10600:9:12","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10611:6:12","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10622:4:12","type":""}],"src":"10532:208:12"},{"body":{"nodeType":"YulBlock","src":"10791:207:12","statements":[{"nodeType":"YulAssignment","src":"10801:19:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10817:2:12","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10811:5:12"},"nodeType":"YulFunctionCall","src":"10811:9:12"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10801:6:12"}]},{"nodeType":"YulVariableDeclaration","src":"10829:35:12","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10851:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"10859:4:12","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10847:3:12"},"nodeType":"YulFunctionCall","src":"10847:17:12"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"10833:10:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"10939:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"10941:16:12"},"nodeType":"YulFunctionCall","src":"10941:18:12"},"nodeType":"YulExpressionStatement","src":"10941:18:12"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"10882:10:12"},{"kind":"number","nodeType":"YulLiteral","src":"10894:18:12","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10879:2:12"},"nodeType":"YulFunctionCall","src":"10879:34:12"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"10918:10:12"},{"name":"memPtr","nodeType":"YulIdentifier","src":"10930:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10915:2:12"},"nodeType":"YulFunctionCall","src":"10915:22:12"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"10876:2:12"},"nodeType":"YulFunctionCall","src":"10876:62:12"},"nodeType":"YulIf","src":"10873:88:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10977:2:12","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"10981:10:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10970:6:12"},"nodeType":"YulFunctionCall","src":"10970:22:12"},"nodeType":"YulExpressionStatement","src":"10970:22:12"}]},"name":"allocate_memory_1834","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"10780:6:12","type":""}],"src":"10745:253:12"},{"body":{"nodeType":"YulBlock","src":"11048:230:12","statements":[{"nodeType":"YulAssignment","src":"11058:19:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11074:2:12","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11068:5:12"},"nodeType":"YulFunctionCall","src":"11068:9:12"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11058:6:12"}]},{"nodeType":"YulVariableDeclaration","src":"11086:58:12","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11108:6:12"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"11124:4:12"},{"kind":"number","nodeType":"YulLiteral","src":"11130:2:12","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11120:3:12"},"nodeType":"YulFunctionCall","src":"11120:13:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11139:2:12","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11135:3:12"},"nodeType":"YulFunctionCall","src":"11135:7:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11116:3:12"},"nodeType":"YulFunctionCall","src":"11116:27:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11104:3:12"},"nodeType":"YulFunctionCall","src":"11104:40:12"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"11090:10:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"11219:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"11221:16:12"},"nodeType":"YulFunctionCall","src":"11221:18:12"},"nodeType":"YulExpressionStatement","src":"11221:18:12"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"11162:10:12"},{"kind":"number","nodeType":"YulLiteral","src":"11174:18:12","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11159:2:12"},"nodeType":"YulFunctionCall","src":"11159:34:12"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"11198:10:12"},{"name":"memPtr","nodeType":"YulIdentifier","src":"11210:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11195:2:12"},"nodeType":"YulFunctionCall","src":"11195:22:12"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"11156:2:12"},"nodeType":"YulFunctionCall","src":"11156:62:12"},"nodeType":"YulIf","src":"11153:88:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11257:2:12","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"11261:10:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11250:6:12"},"nodeType":"YulFunctionCall","src":"11250:22:12"},"nodeType":"YulExpressionStatement","src":"11250:22:12"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"11028:4:12","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"11037:6:12","type":""}],"src":"11003:275:12"},{"body":{"nodeType":"YulBlock","src":"11340:129:12","statements":[{"body":{"nodeType":"YulBlock","src":"11384:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"11386:16:12"},"nodeType":"YulFunctionCall","src":"11386:18:12"},"nodeType":"YulExpressionStatement","src":"11386:18:12"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11356:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"11364:18:12","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11353:2:12"},"nodeType":"YulFunctionCall","src":"11353:30:12"},"nodeType":"YulIf","src":"11350:56:12"},{"nodeType":"YulAssignment","src":"11415:48:12","value":{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11435:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"11443:2:12","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11431:3:12"},"nodeType":"YulFunctionCall","src":"11431:15:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11452:2:12","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11448:3:12"},"nodeType":"YulFunctionCall","src":"11448:7:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11427:3:12"},"nodeType":"YulFunctionCall","src":"11427:29:12"},{"kind":"number","nodeType":"YulLiteral","src":"11458:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11423:3:12"},"nodeType":"YulFunctionCall","src":"11423:40:12"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"11415:4:12"}]}]},"name":"array_allocation_size_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"11320:6:12","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"11331:4:12","type":""}],"src":"11283:186:12"},{"body":{"nodeType":"YulBlock","src":"11522:80:12","statements":[{"body":{"nodeType":"YulBlock","src":"11549:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11551:16:12"},"nodeType":"YulFunctionCall","src":"11551:18:12"},"nodeType":"YulExpressionStatement","src":"11551:18:12"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11538:1:12"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11545:1:12"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11541:3:12"},"nodeType":"YulFunctionCall","src":"11541:6:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11535:2:12"},"nodeType":"YulFunctionCall","src":"11535:13:12"},"nodeType":"YulIf","src":"11532:39:12"},{"nodeType":"YulAssignment","src":"11580:16:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11591:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"11594:1:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11587:3:12"},"nodeType":"YulFunctionCall","src":"11587:9:12"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11580:3:12"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11505:1:12","type":""},{"name":"y","nodeType":"YulTypedName","src":"11508:1:12","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11514:3:12","type":""}],"src":"11474:128:12"},{"body":{"nodeType":"YulBlock","src":"11671:358:12","statements":[{"nodeType":"YulVariableDeclaration","src":"11681:16:12","value":{"kind":"number","nodeType":"YulLiteral","src":"11696:1:12","type":"","value":"1"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"11685:7:12","type":""}]},{"nodeType":"YulAssignment","src":"11706:16:12","value":{"name":"power_1","nodeType":"YulIdentifier","src":"11715:7:12"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"11706:5:12"}]},{"nodeType":"YulAssignment","src":"11731:13:12","value":{"name":"_base","nodeType":"YulIdentifier","src":"11739:5:12"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"11731:4:12"}]},{"body":{"nodeType":"YulBlock","src":"11795:228:12","statements":[{"body":{"nodeType":"YulBlock","src":"11840:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11842:16:12"},"nodeType":"YulFunctionCall","src":"11842:18:12"},"nodeType":"YulExpressionStatement","src":"11842:18:12"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"11815:4:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11829:1:12","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11825:3:12"},"nodeType":"YulFunctionCall","src":"11825:6:12"},{"name":"base","nodeType":"YulIdentifier","src":"11833:4:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"11821:3:12"},"nodeType":"YulFunctionCall","src":"11821:17:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11812:2:12"},"nodeType":"YulFunctionCall","src":"11812:27:12"},"nodeType":"YulIf","src":"11809:53:12"},{"body":{"nodeType":"YulBlock","src":"11901:29:12","statements":[{"nodeType":"YulAssignment","src":"11903:25:12","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"11916:5:12"},{"name":"base","nodeType":"YulIdentifier","src":"11923:4:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"11912:3:12"},"nodeType":"YulFunctionCall","src":"11912:16:12"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"11903:5:12"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"11882:8:12"},{"name":"power_1","nodeType":"YulIdentifier","src":"11892:7:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11878:3:12"},"nodeType":"YulFunctionCall","src":"11878:22:12"},"nodeType":"YulIf","src":"11875:55:12"},{"nodeType":"YulAssignment","src":"11943:23:12","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"11955:4:12"},{"name":"base","nodeType":"YulIdentifier","src":"11961:4:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"11951:3:12"},"nodeType":"YulFunctionCall","src":"11951:15:12"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"11943:4:12"}]},{"nodeType":"YulAssignment","src":"11979:34:12","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"11995:7:12"},{"name":"exponent","nodeType":"YulIdentifier","src":"12004:8:12"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"11991:3:12"},"nodeType":"YulFunctionCall","src":"11991:22:12"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"11979:8:12"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"11764:8:12"},{"name":"power_1","nodeType":"YulIdentifier","src":"11774:7:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11761:2:12"},"nodeType":"YulFunctionCall","src":"11761:21:12"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11783:3:12","statements":[]},"pre":{"nodeType":"YulBlock","src":"11757:3:12","statements":[]},"src":"11753:270:12"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_base","nodeType":"YulTypedName","src":"11635:5:12","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"11642:8:12","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"11655:5:12","type":""},{"name":"base","nodeType":"YulTypedName","src":"11662:4:12","type":""}],"src":"11607:422:12"},{"body":{"nodeType":"YulBlock","src":"12104:61:12","statements":[{"nodeType":"YulAssignment","src":"12114:45:12","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"12144:4:12"},{"name":"exponent","nodeType":"YulIdentifier","src":"12150:8:12"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"12123:20:12"},"nodeType":"YulFunctionCall","src":"12123:36:12"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"12114:5:12"}]}]},"name":"checked_exp_t_uint256_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"12075:4:12","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"12081:8:12","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"12094:5:12","type":""}],"src":"12034:131:12"},{"body":{"nodeType":"YulBlock","src":"12229:747:12","statements":[{"body":{"nodeType":"YulBlock","src":"12267:52:12","statements":[{"nodeType":"YulAssignment","src":"12281:10:12","value":{"kind":"number","nodeType":"YulLiteral","src":"12290:1:12","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"12281:5:12"}]},{"nodeType":"YulLeave","src":"12304:5:12"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"12249:8:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12242:6:12"},"nodeType":"YulFunctionCall","src":"12242:16:12"},"nodeType":"YulIf","src":"12239:80:12"},{"body":{"nodeType":"YulBlock","src":"12352:52:12","statements":[{"nodeType":"YulAssignment","src":"12366:10:12","value":{"kind":"number","nodeType":"YulLiteral","src":"12375:1:12","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"12366:5:12"}]},{"nodeType":"YulLeave","src":"12389:5:12"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"12338:4:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12331:6:12"},"nodeType":"YulFunctionCall","src":"12331:12:12"},"nodeType":"YulIf","src":"12328:76:12"},{"cases":[{"body":{"nodeType":"YulBlock","src":"12440:52:12","statements":[{"nodeType":"YulAssignment","src":"12454:10:12","value":{"kind":"number","nodeType":"YulLiteral","src":"12463:1:12","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"12454:5:12"}]},{"nodeType":"YulLeave","src":"12477:5:12"}]},"nodeType":"YulCase","src":"12433:59:12","value":{"kind":"number","nodeType":"YulLiteral","src":"12438:1:12","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"12508:123:12","statements":[{"body":{"nodeType":"YulBlock","src":"12543:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12545:16:12"},"nodeType":"YulFunctionCall","src":"12545:18:12"},"nodeType":"YulExpressionStatement","src":"12545:18:12"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"12528:8:12"},{"kind":"number","nodeType":"YulLiteral","src":"12538:3:12","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12525:2:12"},"nodeType":"YulFunctionCall","src":"12525:17:12"},"nodeType":"YulIf","src":"12522:43:12"},{"nodeType":"YulAssignment","src":"12578:25:12","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"12591:8:12"},{"kind":"number","nodeType":"YulLiteral","src":"12601:1:12","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12587:3:12"},"nodeType":"YulFunctionCall","src":"12587:16:12"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"12578:5:12"}]},{"nodeType":"YulLeave","src":"12616:5:12"}]},"nodeType":"YulCase","src":"12501:130:12","value":{"kind":"number","nodeType":"YulLiteral","src":"12506:1:12","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"12420:4:12"},"nodeType":"YulSwitch","src":"12413:218:12"},{"body":{"nodeType":"YulBlock","src":"12729:70:12","statements":[{"nodeType":"YulAssignment","src":"12743:28:12","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"12756:4:12"},{"name":"exponent","nodeType":"YulIdentifier","src":"12762:8:12"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"12752:3:12"},"nodeType":"YulFunctionCall","src":"12752:19:12"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"12743:5:12"}]},{"nodeType":"YulLeave","src":"12784:5:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"12653:4:12"},{"kind":"number","nodeType":"YulLiteral","src":"12659:2:12","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12650:2:12"},"nodeType":"YulFunctionCall","src":"12650:12:12"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"12667:8:12"},{"kind":"number","nodeType":"YulLiteral","src":"12677:2:12","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12664:2:12"},"nodeType":"YulFunctionCall","src":"12664:16:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12646:3:12"},"nodeType":"YulFunctionCall","src":"12646:35:12"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"12690:4:12"},{"kind":"number","nodeType":"YulLiteral","src":"12696:3:12","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12687:2:12"},"nodeType":"YulFunctionCall","src":"12687:13:12"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"12705:8:12"},{"kind":"number","nodeType":"YulLiteral","src":"12715:2:12","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12702:2:12"},"nodeType":"YulFunctionCall","src":"12702:16:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12683:3:12"},"nodeType":"YulFunctionCall","src":"12683:36:12"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"12643:2:12"},"nodeType":"YulFunctionCall","src":"12643:77:12"},"nodeType":"YulIf","src":"12640:159:12"},{"nodeType":"YulVariableDeclaration","src":"12808:57:12","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"12850:4:12"},{"name":"exponent","nodeType":"YulIdentifier","src":"12856:8:12"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"12831:18:12"},"nodeType":"YulFunctionCall","src":"12831:34:12"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"12812:7:12","type":""},{"name":"base_1","nodeType":"YulTypedName","src":"12821:6:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"12910:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12912:16:12"},"nodeType":"YulFunctionCall","src":"12912:18:12"},"nodeType":"YulExpressionStatement","src":"12912:18:12"}]},"condition":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"12880:7:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12897:1:12","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12893:3:12"},"nodeType":"YulFunctionCall","src":"12893:6:12"},{"name":"base_1","nodeType":"YulIdentifier","src":"12901:6:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12889:3:12"},"nodeType":"YulFunctionCall","src":"12889:19:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12877:2:12"},"nodeType":"YulFunctionCall","src":"12877:32:12"},"nodeType":"YulIf","src":"12874:58:12"},{"nodeType":"YulAssignment","src":"12941:29:12","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"12954:7:12"},{"name":"base_1","nodeType":"YulIdentifier","src":"12963:6:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12950:3:12"},"nodeType":"YulFunctionCall","src":"12950:20:12"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"12941:5:12"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"12200:4:12","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"12206:8:12","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"12219:5:12","type":""}],"src":"12170:806:12"},{"body":{"nodeType":"YulBlock","src":"13033:116:12","statements":[{"body":{"nodeType":"YulBlock","src":"13092:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13094:16:12"},"nodeType":"YulFunctionCall","src":"13094:18:12"},"nodeType":"YulExpressionStatement","src":"13094:18:12"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13064:1:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13057:6:12"},"nodeType":"YulFunctionCall","src":"13057:9:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13050:6:12"},"nodeType":"YulFunctionCall","src":"13050:17:12"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"13072:1:12"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13083:1:12","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13079:3:12"},"nodeType":"YulFunctionCall","src":"13079:6:12"},{"name":"x","nodeType":"YulIdentifier","src":"13087:1:12"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"13075:3:12"},"nodeType":"YulFunctionCall","src":"13075:14:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13069:2:12"},"nodeType":"YulFunctionCall","src":"13069:21:12"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13046:3:12"},"nodeType":"YulFunctionCall","src":"13046:45:12"},"nodeType":"YulIf","src":"13043:71:12"},{"nodeType":"YulAssignment","src":"13123:20:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13138:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"13141:1:12"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"13134:3:12"},"nodeType":"YulFunctionCall","src":"13134:9:12"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"13123:7:12"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"13012:1:12","type":""},{"name":"y","nodeType":"YulTypedName","src":"13015:1:12","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"13021:7:12","type":""}],"src":"12981:168:12"},{"body":{"nodeType":"YulBlock","src":"13203:76:12","statements":[{"body":{"nodeType":"YulBlock","src":"13225:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"13227:16:12"},"nodeType":"YulFunctionCall","src":"13227:18:12"},"nodeType":"YulExpressionStatement","src":"13227:18:12"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13219:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"13222:1:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13216:2:12"},"nodeType":"YulFunctionCall","src":"13216:8:12"},"nodeType":"YulIf","src":"13213:34:12"},{"nodeType":"YulAssignment","src":"13256:17:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13268:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"13271:1:12"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13264:3:12"},"nodeType":"YulFunctionCall","src":"13264:9:12"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"13256:4:12"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"13185:1:12","type":""},{"name":"y","nodeType":"YulTypedName","src":"13188:1:12","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"13194:4:12","type":""}],"src":"13154:125:12"},{"body":{"nodeType":"YulBlock","src":"13436:104:12","statements":[{"nodeType":"YulAssignment","src":"13446:88:12","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13504:5:12"},{"name":"length","nodeType":"YulIdentifier","src":"13511:6:12"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"13519:12:12"},"nodeType":"YulFunctionCall","src":"13519:14:12"}],"functionName":{"name":"abi_decode_available_length_array_string_dyn","nodeType":"YulIdentifier","src":"13459:44:12"},"nodeType":"YulFunctionCall","src":"13459:75:12"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"13446:9:12"}]}]},"name":"convert_array_t_array$_t_string_calldata_ptr_$dyn_calldata_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13404:5:12","type":""},{"name":"length","nodeType":"YulTypedName","src":"13411:6:12","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"13422:9:12","type":""}],"src":"13284:256:12"},{"body":{"nodeType":"YulBlock","src":"13598:205:12","statements":[{"nodeType":"YulVariableDeclaration","src":"13608:10:12","value":{"kind":"number","nodeType":"YulLiteral","src":"13617:1:12","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"13612:1:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"13677:63:12","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13702:3:12"},{"name":"i","nodeType":"YulIdentifier","src":"13707:1:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13698:3:12"},"nodeType":"YulFunctionCall","src":"13698:11:12"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13721:3:12"},{"name":"i","nodeType":"YulIdentifier","src":"13726:1:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13717:3:12"},"nodeType":"YulFunctionCall","src":"13717:11:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13711:5:12"},"nodeType":"YulFunctionCall","src":"13711:18:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13691:6:12"},"nodeType":"YulFunctionCall","src":"13691:39:12"},"nodeType":"YulExpressionStatement","src":"13691:39:12"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13638:1:12"},{"name":"length","nodeType":"YulIdentifier","src":"13641:6:12"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13635:2:12"},"nodeType":"YulFunctionCall","src":"13635:13:12"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13649:19:12","statements":[{"nodeType":"YulAssignment","src":"13651:15:12","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13660:1:12"},{"kind":"number","nodeType":"YulLiteral","src":"13663:2:12","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13656:3:12"},"nodeType":"YulFunctionCall","src":"13656:10:12"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"13651:1:12"}]}]},"pre":{"nodeType":"YulBlock","src":"13631:3:12","statements":[]},"src":"13627:113:12"},{"body":{"nodeType":"YulBlock","src":"13766:31:12","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13779:3:12"},{"name":"length","nodeType":"YulIdentifier","src":"13784:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13775:3:12"},"nodeType":"YulFunctionCall","src":"13775:16:12"},{"kind":"number","nodeType":"YulLiteral","src":"13793:1:12","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13768:6:12"},"nodeType":"YulFunctionCall","src":"13768:27:12"},"nodeType":"YulExpressionStatement","src":"13768:27:12"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13755:1:12"},{"name":"length","nodeType":"YulIdentifier","src":"13758:6:12"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13752:2:12"},"nodeType":"YulFunctionCall","src":"13752:13:12"},"nodeType":"YulIf","src":"13749:48:12"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"13576:3:12","type":""},{"name":"dst","nodeType":"YulTypedName","src":"13581:3:12","type":""},{"name":"length","nodeType":"YulTypedName","src":"13586:6:12","type":""}],"src":"13545:258:12"},{"body":{"nodeType":"YulBlock","src":"13863:382:12","statements":[{"nodeType":"YulAssignment","src":"13873:22:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13887:1:12","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"13890:4:12"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"13883:3:12"},"nodeType":"YulFunctionCall","src":"13883:12:12"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"13873:6:12"}]},{"nodeType":"YulVariableDeclaration","src":"13904:38:12","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"13934:4:12"},{"kind":"number","nodeType":"YulLiteral","src":"13940:1:12","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13930:3:12"},"nodeType":"YulFunctionCall","src":"13930:12:12"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"13908:18:12","type":""}]},{"body":{"nodeType":"YulBlock","src":"13981:31:12","statements":[{"nodeType":"YulAssignment","src":"13983:27:12","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13997:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"14005:4:12","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13993:3:12"},"nodeType":"YulFunctionCall","src":"13993:17:12"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"13983:6:12"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"13961:18:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13954:6:12"},"nodeType":"YulFunctionCall","src":"13954:26:12"},"nodeType":"YulIf","src":"13951:61:12"},{"body":{"nodeType":"YulBlock","src":"14071:168:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14092:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14095:77:12","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14085:6:12"},"nodeType":"YulFunctionCall","src":"14085:88:12"},"nodeType":"YulExpressionStatement","src":"14085:88:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14193:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14196:4:12","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14186:6:12"},"nodeType":"YulFunctionCall","src":"14186:15:12"},"nodeType":"YulExpressionStatement","src":"14186:15:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14221:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14224:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14214:6:12"},"nodeType":"YulFunctionCall","src":"14214:15:12"},"nodeType":"YulExpressionStatement","src":"14214:15:12"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"14027:18:12"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14050:6:12"},{"kind":"number","nodeType":"YulLiteral","src":"14058:2:12","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14047:2:12"},"nodeType":"YulFunctionCall","src":"14047:14:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14024:2:12"},"nodeType":"YulFunctionCall","src":"14024:38:12"},"nodeType":"YulIf","src":"14021:218:12"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"13843:4:12","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"13852:6:12","type":""}],"src":"13808:437:12"},{"body":{"nodeType":"YulBlock","src":"14297:88:12","statements":[{"body":{"nodeType":"YulBlock","src":"14328:22:12","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14330:16:12"},"nodeType":"YulFunctionCall","src":"14330:18:12"},"nodeType":"YulExpressionStatement","src":"14330:18:12"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14313:5:12"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14324:1:12","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14320:3:12"},"nodeType":"YulFunctionCall","src":"14320:6:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14310:2:12"},"nodeType":"YulFunctionCall","src":"14310:17:12"},"nodeType":"YulIf","src":"14307:43:12"},{"nodeType":"YulAssignment","src":"14359:20:12","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14370:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"14377:1:12","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14366:3:12"},"nodeType":"YulFunctionCall","src":"14366:13:12"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"14359:3:12"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14279:5:12","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"14289:3:12","type":""}],"src":"14250:135:12"},{"body":{"nodeType":"YulBlock","src":"14428:228:12","statements":[{"body":{"nodeType":"YulBlock","src":"14459:168:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14480:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14483:77:12","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14473:6:12"},"nodeType":"YulFunctionCall","src":"14473:88:12"},"nodeType":"YulExpressionStatement","src":"14473:88:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14581:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14584:4:12","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14574:6:12"},"nodeType":"YulFunctionCall","src":"14574:15:12"},"nodeType":"YulExpressionStatement","src":"14574:15:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14609:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14612:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14602:6:12"},"nodeType":"YulFunctionCall","src":"14602:15:12"},"nodeType":"YulExpressionStatement","src":"14602:15:12"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"14448:1:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14441:6:12"},"nodeType":"YulFunctionCall","src":"14441:9:12"},"nodeType":"YulIf","src":"14438:189:12"},{"nodeType":"YulAssignment","src":"14636:14:12","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14645:1:12"},{"name":"y","nodeType":"YulIdentifier","src":"14648:1:12"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"14641:3:12"},"nodeType":"YulFunctionCall","src":"14641:9:12"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"14636:1:12"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14413:1:12","type":""},{"name":"y","nodeType":"YulTypedName","src":"14416:1:12","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"14422:1:12","type":""}],"src":"14390:266:12"},{"body":{"nodeType":"YulBlock","src":"14693:152:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14710:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14713:77:12","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14703:6:12"},"nodeType":"YulFunctionCall","src":"14703:88:12"},"nodeType":"YulExpressionStatement","src":"14703:88:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14807:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14810:4:12","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14800:6:12"},"nodeType":"YulFunctionCall","src":"14800:15:12"},"nodeType":"YulExpressionStatement","src":"14800:15:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14831:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14834:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14824:6:12"},"nodeType":"YulFunctionCall","src":"14824:15:12"},"nodeType":"YulExpressionStatement","src":"14824:15:12"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"14661:184:12"},{"body":{"nodeType":"YulBlock","src":"14882:152:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14899:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14902:77:12","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14892:6:12"},"nodeType":"YulFunctionCall","src":"14892:88:12"},"nodeType":"YulExpressionStatement","src":"14892:88:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14996:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14999:4:12","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14989:6:12"},"nodeType":"YulFunctionCall","src":"14989:15:12"},"nodeType":"YulExpressionStatement","src":"14989:15:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15020:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15023:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15013:6:12"},"nodeType":"YulFunctionCall","src":"15013:15:12"},"nodeType":"YulExpressionStatement","src":"15013:15:12"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"14850:184:12"},{"body":{"nodeType":"YulBlock","src":"15071:152:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15088:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15091:77:12","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15081:6:12"},"nodeType":"YulFunctionCall","src":"15081:88:12"},"nodeType":"YulExpressionStatement","src":"15081:88:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15185:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15188:4:12","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15178:6:12"},"nodeType":"YulFunctionCall","src":"15178:15:12"},"nodeType":"YulExpressionStatement","src":"15178:15:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15209:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15212:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15202:6:12"},"nodeType":"YulFunctionCall","src":"15202:15:12"},"nodeType":"YulExpressionStatement","src":"15202:15:12"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"15039:184:12"},{"body":{"nodeType":"YulBlock","src":"15260:152:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15277:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15280:77:12","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15270:6:12"},"nodeType":"YulFunctionCall","src":"15270:88:12"},"nodeType":"YulExpressionStatement","src":"15270:88:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15374:1:12","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15377:4:12","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15367:6:12"},"nodeType":"YulFunctionCall","src":"15367:15:12"},"nodeType":"YulExpressionStatement","src":"15367:15:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15398:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15401:4:12","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15391:6:12"},"nodeType":"YulFunctionCall","src":"15391:15:12"},"nodeType":"YulExpressionStatement","src":"15391:15:12"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"15228:184:12"},{"body":{"nodeType":"YulBlock","src":"15462:109:12","statements":[{"body":{"nodeType":"YulBlock","src":"15549:16:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15558:1:12","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15561:1:12","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15551:6:12"},"nodeType":"YulFunctionCall","src":"15551:12:12"},"nodeType":"YulExpressionStatement","src":"15551:12:12"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15485:5:12"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15496:5:12"},{"kind":"number","nodeType":"YulLiteral","src":"15503:42:12","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15492:3:12"},"nodeType":"YulFunctionCall","src":"15492:54:12"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15482:2:12"},"nodeType":"YulFunctionCall","src":"15482:65:12"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15475:6:12"},"nodeType":"YulFunctionCall","src":"15475:73:12"},"nodeType":"YulIf","src":"15472:93:12"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15451:5:12","type":""}],"src":"15417:154:12"}]},"contents":"{\n    { }\n    function abi_decode_available_length_array_string_dyn(offset, length, end) -> array\n    {\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { panic_error_0x41() }\n        let _2 := shl(5, length)\n        let _3 := 0x20\n        array := allocate_memory(add(_2, _3))\n        let dst := array\n        mstore(array, length)\n        dst := add(array, _3)\n        let src := offset\n        if gt(add(offset, _2), end) { revert(0, 0) }\n        let i := 0\n        let i_1 := i\n        for { } lt(i_1, length) { i_1 := add(i_1, 1) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, _1) { revert(i, i) }\n            mstore(dst, abi_decode_bytes(add(offset, innerOffset), end))\n            dst := add(dst, _3)\n            src := add(src, _3)\n        }\n    }\n    function abi_decode_array_string_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_array_string_dyn(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_enum_CodeLanguage(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(lt(value, 1)) { revert(0, 0) }\n    }\n    function abi_decode_enum_Location(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(lt(value, 2)) { revert(0, 0) }\n    }\n    function abi_decode_uint32(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_uint64(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let _2 := mload(_1)\n        let array := allocate_memory(array_allocation_size_bytes(_2))\n        mstore(array, _2)\n        if gt(add(add(_1, _2), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory(add(_1, 32), add(array, 32), _2)\n        value0 := array\n    }\n    function abi_decode_tuple_t_string_calldata_ptrt_bytes_calldata_ptrt_array$_t_string_calldata_ptr_$dyn_calldata_ptrt_uint64t_uint32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset_2)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value4 := add(_2, 32)\n        value5 := length\n        value6 := abi_decode_uint64(add(headStart, 96))\n        value7 := abi_decode_uint32(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_struct$_Request_$1354_memory_ptrt_uint64t_uint32t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0xc0) { revert(0, 0) }\n        let value := allocate_memory_1834()\n        mstore(value, abi_decode_enum_Location(_2))\n        mstore(add(value, 32), abi_decode_enum_Location(add(_2, 32)))\n        mstore(add(value, 64), abi_decode_enum_CodeLanguage(add(_2, 64)))\n        let offset_1 := calldataload(add(_2, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(add(value, 96), abi_decode_bytes(add(_2, offset_1), dataEnd))\n        let offset_2 := calldataload(add(_2, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        mstore(add(value, 128), abi_decode_bytes(add(_2, offset_2), dataEnd))\n        let offset_3 := calldataload(add(_2, 160))\n        if gt(offset_3, _1) { revert(0, 0) }\n        mstore(add(value, 160), abi_decode_array_string_dyn(add(_2, offset_3), dataEnd))\n        value0 := value\n        value1 := abi_decode_uint64(add(headStart, 32))\n        value2 := abi_decode_uint32(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_uint96_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_bytes(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_bytes(value1, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Must be proposed owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Only callable by owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint64_t_bytes_memory_ptr_t_uint32_t_uint256__to_t_uint64_t_bytes_memory_ptr_t_uint32_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n        mstore(add(headStart, 32), 128)\n        tail := abi_encode_bytes(value1, add(headStart, 128))\n        mstore(add(headStart, 64), and(value2, 0xffffffff))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffff))\n    }\n    function allocate_memory_1834() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0xc0)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function convert_array_t_array$_t_string_calldata_ptr_$dyn_calldata_ptr_to_t_array$_t_string_memory_ptr_$dyn_memory_ptr(value, length) -> converted\n    {\n        converted := abi_decode_available_length_array_string_dyn(value, length, calldatasize())\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := mod(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n}","id":12,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100c95760003560e01c8063bef3a2f011610081578063f2fde38b1161005b578063f2fde38b14610182578063f7023bb614610195578063fffeb84e146101a857600080fd5b8063bef3a2f014610135578063d328a91e1461014a578063d4b391751461015257600080fd5b806327714589116100b257806327714589146100ff57806379ba5097146101125780638da5cb5b1461011a57600080fd5b80630ca76175146100ce5780631aa46f59146100e3575b600080fd5b6100e16100dc3660046113d9565b6101b0565b005b6100ec60045481565b6040519081526020015b60405180910390f35b6100ec61010d3660046114b4565b610256565b6100e161035f565b6002546040516001600160a01b0390911681526020016100f6565b61013d610419565b6040516100f6919061170b565b61013d6104a7565b61016561016036600461159f565b610545565b6040516bffffffffffffffffffffffff90911681526020016100f6565b6100e1610190366004611386565b6105db565b6100e16101a3366004611386565b6105ef565b61013d610615565b60008381526001602052604090205483906001600160a01b03163314610202576040517fa0c5ec6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526001602052604080822080546001600160a01b03191690555182917f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e691a2610250848484610622565b50505050565b6000610260610689565b61029a6040805160c08101909152806000815260200160008152602001600081526020016060815260200160608152602001606081525090565b6102e16000808c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879594939250506106e59050565b86156103295761032988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085939250506107799050565b61033d610336868861193a565b82906107c0565b600061034b8286863a610800565b60048190559b9a5050505050505050505050565b6003546001600160a01b031633146103be5760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b600280546001600160a01b0319808216339081179093556003805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6005805461042690611973565b80601f016020809104026020016040519081016040528092919081815260200182805461045290611973565b801561049f5780601f106104745761010080835404028352916020019161049f565b820191906000526020600020905b81548152906001019060200180831161048257829003601f168201915b505050505081565b60008054604080517fd328a91e00000000000000000000000000000000000000000000000000000000815290516060936001600160a01b039093169263d328a91e9260048082019391829003018186803b15801561050457600080fd5b505afa158015610518573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105409190810190611446565b905090565b600080546001600160a01b031663d227d2458561056188610975565b86866040518563ffffffff1660e01b81526004016105829493929190611743565b60206040518083038186803b15801561059a57600080fd5b505afa1580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d291906116b1565b95945050505050565b6105e3610689565b6105ec81610c0b565b50565b6105f7610689565b600080546001600160a01b0319166001600160a01b03831617905550565b6006805461042690611973565b8151610635906005906020850190611153565b508051610649906006906020840190611153565b50827f7bab0ec163b5c132c72b8146ac4d6e067e82ed58f8b131150aa71c9258911562838360405161067c92919061171e565b60405180910390a2505050565b6002546001600160a01b031633146106e35760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016103b5565b565b805161071d576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83836001811115610730576107306119fb565b90816001811115610743576107436119fb565b90525060408401828015610759576107596119fb565b90818015610769576107696119fb565b9052506060909301929092525050565b80516107b1576040517fe889636f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020830152608090910152565b80516107f8576040517ffe936cb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a090910152565b6000805481906001600160a01b031663a98eb2068661081e89610975565b87876040518563ffffffff1660e01b815260040161083f9493929190611743565b602060405180830381600087803b15801561085957600080fd5b505af115801561086d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089191906113c0565b905060008054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b815260040160206040518083038186803b1580156108df57600080fd5b505afa1580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091791906113a3565b60008281526001602052604080822080546001600160a01b0319166001600160a01b039490941693909317909255905182917f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db891a295945050505050565b6060610994604051806040016040528060608152602001600081525090565b6109a081610100610cb6565b5060408051808201909152600c81527f636f64654c6f636174696f6e000000000000000000000000000000000000000060208201526109e0908290610d21565b82516109fe9060018111156109f7576109f76119fb565b8290610d3d565b60408051808201909152600881527f6c616e67756167650000000000000000000000000000000000000000000000006020820152610a3d908290610d21565b6040830151610a549080156109f7576109f76119fb565b60408051808201909152600681527f736f7572636500000000000000000000000000000000000000000000000000006020820152610a93908290610d21565b6060830151610aa3908290610d21565b60a08301515115610b525760408051808201909152600481527f61726773000000000000000000000000000000000000000000000000000000006020820152610aed908290610d21565b610af681610d67565b60005b8360a0015151811015610b4857610b368460a001518281518110610b1f57610b1f611a11565b602002602001015183610d2190919063ffffffff16565b80610b40816119a8565b915050610af9565b50610b5281610d72565b60808301515115610c045760408051808201909152600f81527f736563726574734c6f636174696f6e00000000000000000000000000000000006020820152610b9c908290610d21565b610bb5836020015160018111156109f7576109f76119fb565b60408051808201909152600781527f73656372657473000000000000000000000000000000000000000000000000006020820152610bf4908290610d21565b6080830151610c04908290610d7d565b5192915050565b6001600160a01b038116331415610c645760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016103b5565b600380546001600160a01b0319166001600160a01b03838116918217909255600254604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b604080518082019091526060815260006020820152610cd66020836119c3565b15610cfe57610ce66020836119c3565b610cf1906020611923565b610cfb9083611801565b91505b506020808301829052604080518085526000815283019091019052815b92915050565b610d2e8260038351610d86565b610d388282610e95565b505050565b67ffffffffffffffff811115610d5b57610d578282610ec3565b5050565b610d5782600083610d86565b6105ec816004610efa565b6105ec816007610efa565b610d2e82600283515b60178167ffffffffffffffff1611610dab576102508360e0600585901b168317610f0b565b60ff8167ffffffffffffffff1611610de957610dd2836018611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166001610f30565b61ffff8167ffffffffffffffff1611610e2857610e11836019611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166002610f30565b63ffffffff8167ffffffffffffffff1611610e6957610e5283601a611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166004610f30565b610e7e83601b611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166008610f30565b604080518082019091526060815260006020820152610ebc83846000015151848551610f5e565b9392505050565b610ece8260c2610f0b565b50610d578282604051602001610ee691815260200190565b604051602081830303815290604052610d7d565b610d3882601f611fe0600585901b16175b604080518082019091526060815260006020820152610ebc8384600001515184611048565b604080518082019091526060815260006020820152610f568485600001515185856110a4565b949350505050565b6040805180820190915260608152600060208201528251821115610f8157600080fd5b6020850151610f908386611801565b1115610fc357610fc385610fb387602001518786610fae9190611801565b611125565b610fbe906002611904565b61113c565b600080865180518760208301019350808887011115610fe25787860182525b505050602084015b602084106110225780518252611001602083611801565b915061100e602082611801565b905061101b602085611923565b9350610fea565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6040805180820190915260608152600060208201528360200151831061107d5761107d8485602001516002610fbe9190611904565b83518051602085830101848153508085141561109a576001810182525b5093949350505050565b60408051808201909152606081526000602082015260208501516110c88584611801565b11156110dc576110dc85610fb38685611801565b600060016110ec8461010061185c565b6110f69190611923565b905085518386820101858319825116178152508051848701111561111a5783860181525b509495945050505050565b600081831115611136575081610d1b565b50919050565b81516111488383610cb6565b506102508382610e95565b82805461115f90611973565b90600052602060002090601f01602090048101928261118157600085556111c7565b82601f1061119a57805160ff19168380011785556111c7565b828001600101855582156111c7579182015b828111156111c75782518255916020019190600101906111ac565b506111d39291506111d7565b5090565b5b808211156111d357600081556001016111d8565b600067ffffffffffffffff8084111561120757611207611a27565b8360051b60206112188183016117a8565b86815293508084018583810189101561123057600080fd5b60009350835b8881101561126b5781358681111561124c578586fd5b6112588b828b016112e1565b8452509183019190830190600101611236565b5050505050509392505050565b600082601f83011261128957600080fd5b610ebc838335602085016111ec565b60008083601f8401126112aa57600080fd5b50813567ffffffffffffffff8111156112c257600080fd5b6020830191508360208285010111156112da57600080fd5b9250929050565b600082601f8301126112f257600080fd5b8135611305611300826117d9565b6117a8565b81815284602083860101111561131a57600080fd5b816020850160208301376000918101602001919091529392505050565b80356001811061134657600080fd5b919050565b80356002811061134657600080fd5b803563ffffffff8116811461134657600080fd5b803567ffffffffffffffff8116811461134657600080fd5b60006020828403121561139857600080fd5b8135610ebc81611a3d565b6000602082840312156113b557600080fd5b8151610ebc81611a3d565b6000602082840312156113d257600080fd5b5051919050565b6000806000606084860312156113ee57600080fd5b83359250602084013567ffffffffffffffff8082111561140d57600080fd5b611419878388016112e1565b9350604086013591508082111561142f57600080fd5b5061143c868287016112e1565b9150509250925092565b60006020828403121561145857600080fd5b815167ffffffffffffffff81111561146f57600080fd5b8201601f8101841361148057600080fd5b805161148e611300826117d9565b8181528560208385010111156114a357600080fd5b6105d2826020830160208601611947565b60008060008060008060008060a0898b0312156114d057600080fd5b883567ffffffffffffffff808211156114e857600080fd5b6114f48c838d01611298565b909a50985060208b013591508082111561150d57600080fd5b6115198c838d01611298565b909850965060408b013591508082111561153257600080fd5b818b0191508b601f83011261154657600080fd5b81358181111561155557600080fd5b8c60208260051b850101111561156a57600080fd5b60208301965080955050505061158260608a0161136e565b915061159060808a0161135a565b90509295985092959890939650565b600080600080608085870312156115b557600080fd5b843567ffffffffffffffff808211156115cd57600080fd5b9086019060c082890312156115e157600080fd5b6115e961177f565b6115f28361134b565b81526116006020840161134b565b602082015261161160408401611337565b604082015260608301358281111561162857600080fd5b6116348a8286016112e1565b60608301525060808301358281111561164c57600080fd5b6116588a8286016112e1565b60808301525060a08301358281111561167057600080fd5b61167c8a828601611278565b60a08301525095506116939150506020860161136e565b92506116a16040860161135a565b9396929550929360600135925050565b6000602082840312156116c357600080fd5b81516bffffffffffffffffffffffff81168114610ebc57600080fd5b600081518084526116f7816020860160208601611947565b601f01601f19169290920160200192915050565b602081526000610ebc60208301846116df565b60408152600061173160408301856116df565b82810360208401526105d281856116df565b67ffffffffffffffff8516815260806020820152600061176660808301866116df565b63ffffffff949094166040830152506060015292915050565b60405160c0810167ffffffffffffffff811182821017156117a2576117a2611a27565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156117d1576117d1611a27565b604052919050565b600067ffffffffffffffff8211156117f3576117f3611a27565b50601f01601f191660200190565b60008219821115611814576118146119e5565b500190565b600181815b8085111561185457816000190482111561183a5761183a6119e5565b8085161561184757918102915b93841c939080029061181e565b509250929050565b6000610ebc838360008261187257506001610d1b565b8161187f57506000610d1b565b8160018114611895576002811461189f576118bb565b6001915050610d1b565b60ff8411156118b0576118b06119e5565b50506001821b610d1b565b5060208310610133831016604e8410600b84101617156118de575081810a610d1b565b6118e88383611819565b80600019048211156118fc576118fc6119e5565b029392505050565b600081600019048311821515161561191e5761191e6119e5565b500290565b600082821015611935576119356119e5565b500390565b6000610ebc3684846111ec565b60005b8381101561196257818101518382015260200161194a565b838111156102505750506000910152565b600181811c9082168061198757607f821691505b6020821081141561113657634e487b7160e01b600052602260045260246000fd5b60006000198214156119bc576119bc6119e5565b5060010190565b6000826119e057634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146105ec57600080fdfea26469706673582212206520d46725cdfd7844c91ea04455710d6bed3f8bef2a1255ec7219de11937b0664736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBEF3A2F0 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xF2FDE38B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xF7023BB6 EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0xFFFEB84E EQ PUSH2 0x1A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBEF3A2F0 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0xD328A91E EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0xD4B39175 EQ PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x27714589 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x27714589 EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCA76175 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x1AA46F59 EQ PUSH2 0xE3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE1 PUSH2 0xDC CALLDATASIZE PUSH1 0x4 PUSH2 0x13D9 JUMP JUMPDEST PUSH2 0x1B0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xEC PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEC PUSH2 0x10D CALLDATASIZE PUSH1 0x4 PUSH2 0x14B4 JUMP JUMPDEST PUSH2 0x256 JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x35F JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF6 JUMP JUMPDEST PUSH2 0x13D PUSH2 0x419 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x13D PUSH2 0x4A7 JUMP JUMPDEST PUSH2 0x165 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0x159F JUMP JUMPDEST PUSH2 0x545 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF6 JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0x1386 JUMP JUMPDEST PUSH2 0x5DB JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x1A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1386 JUMP JUMPDEST PUSH2 0x5EF JUMP JUMPDEST PUSH2 0x13D PUSH2 0x615 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x202 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA0C5EC6300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x85E1543BF2F84FE80C6BADBCE3648C8539AD1DF4D2B3D822938CA0538BE727E6 SWAP2 LOG2 PUSH2 0x250 DUP5 DUP5 DUP5 PUSH2 0x622 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260 PUSH2 0x689 JUMP JUMPDEST PUSH2 0x29A PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x2E1 PUSH1 0x0 DUP1 DUP13 DUP13 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP8 SWAP6 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0x6E5 SWAP1 POP JUMP JUMPDEST DUP7 ISZERO PUSH2 0x329 JUMPI PUSH2 0x329 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP6 SWAP4 SWAP3 POP POP PUSH2 0x779 SWAP1 POP JUMP JUMPDEST PUSH2 0x33D PUSH2 0x336 DUP7 DUP9 PUSH2 0x193A JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x7C0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34B DUP3 DUP7 DUP7 GASPRICE PUSH2 0x800 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP3 AND CALLER SWAP1 DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH2 0x426 SWAP1 PUSH2 0x1973 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x452 SWAP1 PUSH2 0x1973 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x49F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x474 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x49F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x482 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0xD328A91E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x60 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH4 0xD328A91E SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x518 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x540 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1446 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD227D245 DUP6 PUSH2 0x561 DUP9 PUSH2 0x975 JUMP JUMPDEST DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x582 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1743 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x59A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D2 SWAP2 SWAP1 PUSH2 0x16B1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x5E3 PUSH2 0x689 JUMP JUMPDEST PUSH2 0x5EC DUP2 PUSH2 0xC0B JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5F7 PUSH2 0x689 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH2 0x426 SWAP1 PUSH2 0x1973 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x635 SWAP1 PUSH1 0x5 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x1153 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x649 SWAP1 PUSH1 0x6 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1153 JUMP JUMPDEST POP DUP3 PUSH32 0x7BAB0EC163B5C132C72B8146AC4D6E067E82ED58F8B131150AA71C9258911562 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x67C SWAP3 SWAP2 SWAP1 PUSH2 0x171E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B5 JUMP JUMPDEST JUMP JUMPDEST DUP1 MLOAD PUSH2 0x71D JUMPI PUSH1 0x40 MLOAD PUSH32 0x22CE3EDD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x730 JUMPI PUSH2 0x730 PUSH2 0x19FB JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x743 JUMPI PUSH2 0x743 PUSH2 0x19FB JUMP JUMPDEST SWAP1 MSTORE POP PUSH1 0x40 DUP5 ADD DUP3 DUP1 ISZERO PUSH2 0x759 JUMPI PUSH2 0x759 PUSH2 0x19FB JUMP JUMPDEST SWAP1 DUP2 DUP1 ISZERO PUSH2 0x769 JUMPI PUSH2 0x769 PUSH2 0x19FB JUMP JUMPDEST SWAP1 MSTORE POP PUSH1 0x60 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x7B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE889636F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x7F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFE936CB700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA98EB206 DUP7 PUSH2 0x81E DUP10 PUSH2 0x975 JUMP JUMPDEST DUP8 DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83F SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1743 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x859 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x86D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x891 SWAP2 SWAP1 PUSH2 0x13C0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5AB1BD53 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8F3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x917 SWAP2 SWAP1 PUSH2 0x13A3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD DUP3 SWAP2 PUSH32 0x1131472297A800FEE664D1D89CFA8F7676FF07189ECC53F80BBB5F4969099DB8 SWAP2 LOG2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x994 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x9A0 DUP2 PUSH2 0x100 PUSH2 0xCB6 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH32 0x636F64654C6F636174696F6E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x9E0 SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x9FE SWAP1 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x9F7 JUMPI PUSH2 0x9F7 PUSH2 0x19FB JUMP JUMPDEST DUP3 SWAP1 PUSH2 0xD3D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH32 0x6C616E6775616765000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xA3D SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0xA54 SWAP1 DUP1 ISZERO PUSH2 0x9F7 JUMPI PUSH2 0x9F7 PUSH2 0x19FB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH32 0x736F757263650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xA93 SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xAA3 SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0xB52 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0x6172677300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xAED SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST PUSH2 0xAF6 DUP2 PUSH2 0xD67 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 PUSH1 0xA0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xB48 JUMPI PUSH2 0xB36 DUP5 PUSH1 0xA0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB1F JUMPI PUSH2 0xB1F PUSH2 0x1A11 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0xD21 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 PUSH2 0xB40 DUP2 PUSH2 0x19A8 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xAF9 JUMP JUMPDEST POP PUSH2 0xB52 DUP2 PUSH2 0xD72 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0xC04 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xF DUP2 MSTORE PUSH32 0x736563726574734C6F636174696F6E0000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xB9C SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST PUSH2 0xBB5 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x9F7 JUMPI PUSH2 0x9F7 PUSH2 0x19FB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH32 0x7365637265747300000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xBF4 SWAP1 DUP3 SWAP1 PUSH2 0xD21 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0xC04 SWAP1 DUP3 SWAP1 PUSH2 0xD7D JUMP JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ ISZERO PUSH2 0xC64 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3B5 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 AND SWAP1 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xCD6 PUSH1 0x20 DUP4 PUSH2 0x19C3 JUMP JUMPDEST ISZERO PUSH2 0xCFE JUMPI PUSH2 0xCE6 PUSH1 0x20 DUP4 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0xCF1 SWAP1 PUSH1 0x20 PUSH2 0x1923 JUMP JUMPDEST PUSH2 0xCFB SWAP1 DUP4 PUSH2 0x1801 JUMP JUMPDEST SWAP2 POP JUMPDEST POP PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP6 MSTORE PUSH1 0x0 DUP2 MSTORE DUP4 ADD SWAP1 SWAP2 ADD SWAP1 MSTORE DUP2 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD2E DUP3 PUSH1 0x3 DUP4 MLOAD PUSH2 0xD86 JUMP JUMPDEST PUSH2 0xD38 DUP3 DUP3 PUSH2 0xE95 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD5B JUMPI PUSH2 0xD57 DUP3 DUP3 PUSH2 0xEC3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xD57 DUP3 PUSH1 0x0 DUP4 PUSH2 0xD86 JUMP JUMPDEST PUSH2 0x5EC DUP2 PUSH1 0x4 PUSH2 0xEFA JUMP JUMPDEST PUSH2 0x5EC DUP2 PUSH1 0x7 PUSH2 0xEFA JUMP JUMPDEST PUSH2 0xD2E DUP3 PUSH1 0x2 DUP4 MLOAD JUMPDEST PUSH1 0x17 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0xDAB JUMPI PUSH2 0x250 DUP4 PUSH1 0xE0 PUSH1 0x5 DUP6 SWAP1 SHL AND DUP4 OR PUSH2 0xF0B JUMP JUMPDEST PUSH1 0xFF DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0xDE9 JUMPI PUSH2 0xDD2 DUP4 PUSH1 0x18 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0xF0B JUMP JUMPDEST POP PUSH2 0x250 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x1 PUSH2 0xF30 JUMP JUMPDEST PUSH2 0xFFFF DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0xE28 JUMPI PUSH2 0xE11 DUP4 PUSH1 0x19 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0xF0B JUMP JUMPDEST POP PUSH2 0x250 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x2 PUSH2 0xF30 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0xE69 JUMPI PUSH2 0xE52 DUP4 PUSH1 0x1A PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0xF0B JUMP JUMPDEST POP PUSH2 0x250 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 PUSH2 0xF30 JUMP JUMPDEST PUSH2 0xE7E DUP4 PUSH1 0x1B PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0xF0B JUMP JUMPDEST POP PUSH2 0x250 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x8 PUSH2 0xF30 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xEBC DUP4 DUP5 PUSH1 0x0 ADD MLOAD MLOAD DUP5 DUP6 MLOAD PUSH2 0xF5E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xECE DUP3 PUSH1 0xC2 PUSH2 0xF0B JUMP JUMPDEST POP PUSH2 0xD57 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xEE6 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0xD7D JUMP JUMPDEST PUSH2 0xD38 DUP3 PUSH1 0x1F PUSH2 0x1FE0 PUSH1 0x5 DUP6 SWAP1 SHL AND OR JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xEBC DUP4 DUP5 PUSH1 0x0 ADD MLOAD MLOAD DUP5 PUSH2 0x1048 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xF56 DUP5 DUP6 PUSH1 0x0 ADD MLOAD MLOAD DUP6 DUP6 PUSH2 0x10A4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP3 MLOAD DUP3 GT ISZERO PUSH2 0xF81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0xF90 DUP4 DUP7 PUSH2 0x1801 JUMP JUMPDEST GT ISZERO PUSH2 0xFC3 JUMPI PUSH2 0xFC3 DUP6 PUSH2 0xFB3 DUP8 PUSH1 0x20 ADD MLOAD DUP8 DUP7 PUSH2 0xFAE SWAP2 SWAP1 PUSH2 0x1801 JUMP JUMPDEST PUSH2 0x1125 JUMP JUMPDEST PUSH2 0xFBE SWAP1 PUSH1 0x2 PUSH2 0x1904 JUMP JUMPDEST PUSH2 0x113C JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 MLOAD DUP1 MLOAD DUP8 PUSH1 0x20 DUP4 ADD ADD SWAP4 POP DUP1 DUP9 DUP8 ADD GT ISZERO PUSH2 0xFE2 JUMPI DUP8 DUP7 ADD DUP3 MSTORE JUMPDEST POP POP POP PUSH1 0x20 DUP5 ADD JUMPDEST PUSH1 0x20 DUP5 LT PUSH2 0x1022 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH2 0x1001 PUSH1 0x20 DUP4 PUSH2 0x1801 JUMP JUMPDEST SWAP2 POP PUSH2 0x100E PUSH1 0x20 DUP3 PUSH2 0x1801 JUMP JUMPDEST SWAP1 POP PUSH2 0x101B PUSH1 0x20 DUP6 PUSH2 0x1923 JUMP JUMPDEST SWAP4 POP PUSH2 0xFEA JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x0 NOT PUSH1 0x20 DUP7 SWAP1 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 AND SWAP1 NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 MSTORE POP DUP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP4 PUSH1 0x20 ADD MLOAD DUP4 LT PUSH2 0x107D JUMPI PUSH2 0x107D DUP5 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x2 PUSH2 0xFBE SWAP2 SWAP1 PUSH2 0x1904 JUMP JUMPDEST DUP4 MLOAD DUP1 MLOAD PUSH1 0x20 DUP6 DUP4 ADD ADD DUP5 DUP2 MSTORE8 POP DUP1 DUP6 EQ ISZERO PUSH2 0x109A JUMPI PUSH1 0x1 DUP2 ADD DUP3 MSTORE JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x10C8 DUP6 DUP5 PUSH2 0x1801 JUMP JUMPDEST GT ISZERO PUSH2 0x10DC JUMPI PUSH2 0x10DC DUP6 PUSH2 0xFB3 DUP7 DUP6 PUSH2 0x1801 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x10EC DUP5 PUSH2 0x100 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x10F6 SWAP2 SWAP1 PUSH2 0x1923 JUMP JUMPDEST SWAP1 POP DUP6 MLOAD DUP4 DUP7 DUP3 ADD ADD DUP6 DUP4 NOT DUP3 MLOAD AND OR DUP2 MSTORE POP DUP1 MLOAD DUP5 DUP8 ADD GT ISZERO PUSH2 0x111A JUMPI DUP4 DUP7 ADD DUP2 MSTORE JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT ISZERO PUSH2 0x1136 JUMPI POP DUP2 PUSH2 0xD1B JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 MLOAD PUSH2 0x1148 DUP4 DUP4 PUSH2 0xCB6 JUMP JUMPDEST POP PUSH2 0x250 DUP4 DUP3 PUSH2 0xE95 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x115F SWAP1 PUSH2 0x1973 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1181 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x11C7 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x119A JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x11C7 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x11C7 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x11C7 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x11AC JUMP JUMPDEST POP PUSH2 0x11D3 SWAP3 SWAP2 POP PUSH2 0x11D7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x11D3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x11D8 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x1207 JUMPI PUSH2 0x1207 PUSH2 0x1A27 JUMP JUMPDEST DUP4 PUSH1 0x5 SHL PUSH1 0x20 PUSH2 0x1218 DUP2 DUP4 ADD PUSH2 0x17A8 JUMP JUMPDEST DUP7 DUP2 MSTORE SWAP4 POP DUP1 DUP5 ADD DUP6 DUP4 DUP2 ADD DUP10 LT ISZERO PUSH2 0x1230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP4 POP DUP4 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x126B JUMPI DUP2 CALLDATALOAD DUP7 DUP2 GT ISZERO PUSH2 0x124C JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x1258 DUP12 DUP3 DUP12 ADD PUSH2 0x12E1 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1236 JUMP JUMPDEST POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEBC DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x11EC JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x12AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x12F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1305 PUSH2 0x1300 DUP3 PUSH2 0x17D9 JUMP JUMPDEST PUSH2 0x17A8 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x131A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 DUP2 LT PUSH2 0x1346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x2 DUP2 LT PUSH2 0x1346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1398 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xEBC DUP2 PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xEBC DUP2 PUSH2 0x1A3D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x13EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x140D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1419 DUP8 DUP4 DUP9 ADD PUSH2 0x12E1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x142F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143C DUP7 DUP3 DUP8 ADD PUSH2 0x12E1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x146F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x148E PUSH2 0x1300 DUP3 PUSH2 0x17D9 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP6 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x14A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5D2 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1947 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x14D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x14E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F4 DUP13 DUP4 DUP14 ADD PUSH2 0x1298 JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x150D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1519 DUP13 DUP4 DUP14 ADD PUSH2 0x1298 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1532 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP12 ADD SWAP2 POP DUP12 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1555 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP13 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x156A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP7 POP DUP1 SWAP6 POP POP POP POP PUSH2 0x1582 PUSH1 0x60 DUP11 ADD PUSH2 0x136E JUMP JUMPDEST SWAP2 POP PUSH2 0x1590 PUSH1 0x80 DUP11 ADD PUSH2 0x135A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x15B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x15CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0xC0 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x15E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15E9 PUSH2 0x177F JUMP JUMPDEST PUSH2 0x15F2 DUP4 PUSH2 0x134B JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1600 PUSH1 0x20 DUP5 ADD PUSH2 0x134B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1611 PUSH1 0x40 DUP5 ADD PUSH2 0x1337 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1628 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1634 DUP11 DUP3 DUP7 ADD PUSH2 0x12E1 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x164C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1658 DUP11 DUP3 DUP7 ADD PUSH2 0x12E1 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x1670 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x167C DUP11 DUP3 DUP7 ADD PUSH2 0x1278 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP6 POP PUSH2 0x1693 SWAP2 POP POP PUSH1 0x20 DUP7 ADD PUSH2 0x136E JUMP JUMPDEST SWAP3 POP PUSH2 0x16A1 PUSH1 0x40 DUP7 ADD PUSH2 0x135A JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xEBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x16F7 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1947 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xEBC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x16DF JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1731 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x16DF JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x5D2 DUP2 DUP6 PUSH2 0x16DF JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1766 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x16DF JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP5 SWAP1 SWAP5 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x17A2 JUMPI PUSH2 0x17A2 PUSH2 0x1A27 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x17D1 JUMPI PUSH2 0x17D1 PUSH2 0x1A27 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x17F3 JUMPI PUSH2 0x17F3 PUSH2 0x1A27 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1814 JUMPI PUSH2 0x1814 PUSH2 0x19E5 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x1854 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x183A JUMPI PUSH2 0x183A PUSH2 0x19E5 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x1847 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x181E JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEBC DUP4 DUP4 PUSH1 0x0 DUP3 PUSH2 0x1872 JUMPI POP PUSH1 0x1 PUSH2 0xD1B JUMP JUMPDEST DUP2 PUSH2 0x187F JUMPI POP PUSH1 0x0 PUSH2 0xD1B JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1895 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x189F JUMPI PUSH2 0x18BB JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xD1B JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x18B0 JUMPI PUSH2 0x18B0 PUSH2 0x19E5 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0xD1B JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x18DE JUMPI POP DUP2 DUP2 EXP PUSH2 0xD1B JUMP JUMPDEST PUSH2 0x18E8 DUP4 DUP4 PUSH2 0x1819 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x18FC JUMPI PUSH2 0x18FC PUSH2 0x19E5 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x191E JUMPI PUSH2 0x191E PUSH2 0x19E5 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1935 JUMPI PUSH2 0x1935 PUSH2 0x19E5 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEBC CALLDATASIZE DUP5 DUP5 PUSH2 0x11EC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1962 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x194A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x250 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1987 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1136 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x19BC JUMPI PUSH2 0x19BC PUSH2 0x19E5 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x19E0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x5EC JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x20D46725CDFD PUSH25 0x44C91EA04455710D6BED3F8BEF2A1255EC7219DE11937B0664 PUSH20 0x6F6C634300080700330000000000000000000000 ","sourceMap":"441:2945:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2775:216:7;;;;;;:::i;:::-;;:::i;:::-;;551:30:5;;;;;;;;;8181:25:12;;;8169:2;8154:18;551:30:5;;;;;;;;1250:1346;;;;;;:::i;:::-;;:::i;1016:265:1:-;;;:::i;1332:81::-;1401:7;;1332:81;;-1:-1:-1;;;;;1401:7:1;;;7950:74:12;;7938:2;7923:18;1332:81:1;7804:226:12;587:27:5;;;:::i;:::-;;;;;;;:::i;819:117:7:-;;;:::i;1309:261::-;;;;;;:::i;:::-;;:::i;:::-;;;10706:26:12;10694:39;;;10676:58;;10664:2;10649:18;1309:261:7;10532:208:12;826:98:1;;;;;;:::i;:::-;;:::i;3288:96:5:-;;;;;;:::i;:::-;;:::i;620:24::-;;;:::i;2775:216:7:-;4136:28;;;;:17;:28;;;;;;;;-1:-1:-1;;;;;4136:28:7;4122:10;:42;4118:91;;4181:21;;;;;;;;;;;;;;4118:91;4221:28;;;;:17;:28;;;;;;4214:35;;-1:-1:-1;;;;;;4214:35:7;;;4260:27;4239:9;;4260:27;;;2946:40:::1;2961:9;2972:8;2982:3;2946:14;:40::i;:::-;2775:216:::0;;;;:::o;1250:1346:5:-;1458:7;1956:20:1;:18;:20::i;:::-;1477:28:5::1;-1:-1:-1::0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1477:28:5::1;1515:137;1550:25;1589:33:::0;1636:6:::1;;1515:137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;1515:3:5;;:137;;;-1:-1:-1;;1515:21:5::1;:137:::0;-1:-1:-1;1515:137:5:i:1;:::-;1666:18:::0;;1662:53:::1;;1686:29;1707:7;;1686:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;1686:3:5;;:29;-1:-1:-1;;1686:20:5::1;:29:::0;-1:-1:-1;1686:29:5:i:1;:::-;2353:17;;2365:4:::0;;2353:17:::1;:::i;:::-;:3:::0;;:11:::1;:17::i;:::-;2381:21;2405:113;2430:3;2447:14;2475:8;2497:11;2405;:113::i;:::-;2528:15;:31:::0;;;;1250:1346;-1:-1:-1;;;;;;;;;;;1250:1346:5:o;1016:265:1:-;1089:14;;-1:-1:-1;;;;;1089:14:1;1075:10;:28;1067:63;;;;-1:-1:-1;;;1067:63:1;;9023:2:12;1067:63:1;;;9005:21:12;9062:2;9042:18;;;9035:30;9101:24;9081:18;;;9074:52;9143:18;;1067:63:1;;;;;;;;;1156:7;;;-1:-1:-1;;;;;;1169:20:1;;;1179:10;1169:20;;;;;;1195:14;:27;;;;;;;1234:42;;-1:-1:-1;;;;;1156:7:1;;;;1179:10;1156:7;;1234:42;;1137:16;;1234:42;1061:220;1016:265::o;587:27:5:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;819:117:7:-;905:8;;;:26;;;;;;;;878:12;;-1:-1:-1;;;;;905:8:7;;;;:24;;:26;;;;;;;;;;;:8;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;905:26:7;;;;;;;;;;;;:::i;:::-;898:33;;819:117;:::o;1309:261::-;1460:6;1481:8;;-1:-1:-1;;;;;1481:8:7;:21;1503:14;1519:25;1540:3;1519:20;:25::i;:::-;1546:8;1556;1481:84;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1474:91;1309:261;-1:-1:-1;;;;;1309:261:7:o;826:98:1:-;1956:20;:18;:20::i;:::-;897:22:::1;916:2;897:18;:22::i;:::-;826:98:::0;:::o;3288:96:5:-;1956:20:1;:18;:20::i;:::-;3161:8:7;:43;;-1:-1:-1;;;;;;3161:43:7;-1:-1:-1;;;;;3161:43:7;;;;;826:98:1;:::o;620:24:5:-;;;;;;;:::i;3002:280::-;3171:25;;;;:14;;:25;;;;;:::i;:::-;-1:-1:-1;3206:17:5;;;;:11;;:17;;;;;:::i;:::-;;3250:9;3238:37;3261:8;3271:3;3238:37;;;;;;;:::i;:::-;;;;;;;;3002:280;;;:::o;1730:111:1:-;1802:7;;-1:-1:-1;;;;;1802:7:1;1788:10;:21;1780:56;;;;-1:-1:-1;;;1780:56:1;;9374:2:12;1780:56:1;;;9356:21:12;9413:2;9393:18;;;9386:30;9452:24;9432:18;;;9425:52;9494:18;;1780:56:1;9172:346:12;1780:56:1;1730:111::o;2291:299:6:-;2447:20;;2443:51;;2481:13;;;;;;;;;;;;;;2443:51;2501:4;2521:8;2501:28;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;2535:13:6;;;2551:8;2535:24;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;-1:-1:-1;2565:11:6;;;;:20;;;;-1:-1:-1;;2291:299:6:o;3222:213::-;3315:14;;3311:46;;3343:14;;;;;;;;;;;;;;3311:46;3387:15;3364:20;;;:38;3408:12;;;;:22;3222:213::o;3596:148::-;3680:11;;3676:40;;3705:11;;;;;;;;;;;;;;3676:40;3723:9;;;;:16;3596:148::o;1869:384:7:-;2016:7;2051:8;;2016:7;;-1:-1:-1;;;;;2051:8:7;:20;2072:14;2088:25;2109:3;2088:20;:25::i;:::-;2115:8;2125;2051:83;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2031:103;;2171:8;;;;;;;;-1:-1:-1;;;;;2171:8:7;-1:-1:-1;;;;;2171:20:7;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2140:28;;;;:17;:28;;;;;;:53;;-1:-1:-1;;;;;;2140:53:7;-1:-1:-1;;;;;2140:53:7;;;;;;;;;;;2204:22;;2140:28;;2204:22;;;2239:9;1869:384;-1:-1:-1;;;;;1869:384:7:o;1078:862:6:-;1142:12;1162:33;-1:-1:-1;;;;;;;;;;;;;;;;;;;1162:33:6;1201:46;1222:3;354;1201:20;:46::i;:::-;-1:-1:-1;1254:32:6;;;;;;;;;;;;;;;;;;;:3;;:16;:32::i;:::-;1315:17;;1292:42;;1307:26;;;;;;;;:::i;:::-;1292:3;;:14;:42::i;:::-;1341:28;;;;;;;;;;;;;;;;;;;:3;;:16;:28::i;:::-;1398:13;;;;1375:38;;1390:22;;;;;;:::i;1375:38::-;1420:26;;;;;;;;;;;;;;;;;;;:3;;:16;:26::i;:::-;1469:11;;;;1452:29;;:3;;:16;:29::i;:::-;1492:9;;;;:16;:20;1488:217;;1522:24;;;;;;;;;;;;;;;;;;;:3;;:16;:24::i;:::-;1554:16;:3;:14;:16::i;:::-;1583:9;1578:96;1602:4;:9;;;:16;1598:1;:20;1578:96;;;1635:30;1652:4;:9;;;1662:1;1652:12;;;;;;;;:::i;:::-;;;;;;;1635:3;:16;;:30;;;;:::i;:::-;1620:3;;;;:::i;:::-;;;;1578:96;;;;1681:17;:3;:15;:17::i;:::-;1715:12;;;;:19;:23;1711:204;;1748:35;;;;;;;;;;;;;;;;;;;:3;;:16;:35::i;:::-;1791:45;1814:4;:20;;;1806:29;;;;;;;;:::i;1791:45::-;1844:27;;;;;;;;;;;;;;;;;;;:3;;:16;:27::i;:::-;1895:12;;;;1879:29;;:3;;:15;:29::i;:::-;1928:7;;1078:862;-1:-1:-1;;1078:862:6:o;1497:188:1:-;-1:-1:-1;;;;;1559:16:1;;1565:10;1559:16;;1551:52;;;;-1:-1:-1;;;1551:52:1;;9725:2:12;1551:52:1;;;9707:21:12;9764:2;9744:18;;;9737:30;9803:25;9783:18;;;9776:53;9846:18;;1551:52:1;9523:347:12;1551:52:1;1610:14;:19;;-1:-1:-1;;;;;;1610:19:1;-1:-1:-1;;;;;1610:19:1;;;;;;;;;1668:7;;1641:39;;1610:19;;1668:7;;1641:39;;-1:-1:-1;;1641:39:1;1497:188;:::o;1001:399:3:-;-1:-1:-1;;;;;;;;;;;;;;;;;1100:13:3;1111:2;1100:8;:13;:::i;:::-;:18;1096:71;;1146:13;1157:2;1146:8;:13;:::i;:::-;1140:20;;:2;:20;:::i;:::-;1128:32;;;;:::i;:::-;;;1096:71;-1:-1:-1;1214:12:3;;;;:23;;;1277:4;1271:11;;1289:16;;;-1:-1:-1;1312:14:3;;1354:18;;1346:27;;;1333:41;;1214:3;1001:399;;;;;:::o;2777:204:4:-;2875:71;2894:3;383:1;2931:5;2925:19;2875:18;:71::i;:::-;2952:24;:3;2969:5;2952:10;:24::i;:::-;;2777:204;;:::o;1464:236::-;1562:18;1554:5;:26;1551:145;;;1590:24;1603:3;1608:5;1590:12;:24::i;:::-;1464:236;;:::o;1551:145::-;1635:54;1654:3;234:1;1682:5;1635:18;:54::i;2985:129::-;3060:49;3087:3;430:1;3060:26;:49::i;3247:137::-;3323:56;3350:3;574:1;3323:26;:56::i;2154:187::-;2250:63;2269:3;335:1;2299:5;:12;682:625;803:2;794:5;:11;;;791:512;;815:44;:3;837:20;847:1;838:10;;;837:20;;;815:15;:44::i;791:512::-;885:4;876:5;:13;;;872:431;;899:41;:3;936:2;922:10;931:1;922:10;;;;921:17;899:15;:41::i;:::-;-1:-1:-1;948:23:4;:3;:23;;;969:1;948:13;:23::i;872:431::-;997:6;988:5;:15;;;984:319;;1013:41;:3;1050:2;1036:10;1045:1;1036:10;;;;1035:17;1013:15;:41::i;:::-;-1:-1:-1;1062:23:4;:3;:23;;;1083:1;1062:13;:23::i;984:319::-;1111:10;1102:5;:19;;;1098:205;;1131:41;:3;1168:2;1154:10;1163:1;1154:10;;;;1153:17;1131:15;:41::i;:::-;-1:-1:-1;1180:23:4;:3;:23;;;1201:1;1180:13;:23::i;1098:205::-;1224:41;:3;1261:2;1247:10;1256:1;1247:10;;;;1246:17;1224:15;:41::i;:::-;-1:-1:-1;1273:23:4;:3;:23;;;1294:1;1273:13;:23::i;4692:155:3:-;-1:-1:-1;;;;;;;;;;;;;;;;;4797:45:3;4803:3;4808;:7;;;:14;4824:4;4830;:11;4797:5;:45::i;:::-;4790:52;4692:155;-1:-1:-1;;;4692:155:3:o;2345:198:4:-;2434:63;:3;2456:39;2434:15;:63::i;:::-;;2503:35;2515:3;2531:5;2520:17;;;;;;8181:25:12;;8169:2;8154:18;;8035:177;2520:17:4;;;;;;;;;;;;;2503:11;:35::i;1311:149::-;1414:41;:3;1451:2;1437:10;1446:1;1437:10;;;;1436:17;6040:145:3;-1:-1:-1;;;;;;;;;;;;;;;;;6143:37:3;6154:3;6159;:7;;;:14;6175:4;6143:10;:37::i;9894:177::-;-1:-1:-1;;;;;;;;;;;;;;;;;10026:40:3;10035:3;10040;:7;;;:14;10056:4;10062:3;10026:8;:40::i;:::-;10019:47;9894:177;-1:-1:-1;;;;9894:177:3:o;2745:1210::-;-1:-1:-1;;;;;;;;;;;;;;;;;2903:4:3;:11;2896:3;:18;;2888:27;;;;;;2938:12;;;;2926:9;2932:3;2926;:9;:::i;:::-;:24;2922:90;;;2960:45;2967:3;2972:28;2976:3;:12;;;2996:3;2990;:9;;;;:::i;:::-;2972:3;:28::i;:::-;:32;;3003:1;2972:32;:::i;:::-;2960:6;:45::i;:::-;3018:12;3036:11;3133:3;3127:10;3204:6;3198:13;3320:3;3315:2;3307:6;3303:15;3299:25;3291:33;;3404:6;3398:3;3393;3389:13;3386:25;3383:76;;;3446:3;3441;3437:13;3429:6;3422:29;3383:76;-1:-1:-1;;;3483:2:3;3473:13;;3544:129;3558:2;3551:3;:9;3544:129;;3613:10;;3600:24;;3639:10;3647:2;3607:4;3639:10;:::i;:::-;;-1:-1:-1;3657:9:3;3664:2;3657:9;;:::i;:::-;;-1:-1:-1;3562:9:3;3569:2;3562:9;;:::i;:::-;;;3544:129;;;3807:10;3858:11;;-1:-1:-1;;3747:2:3;:8;;;3741:3;:15;3740:21;3854:22;;;3819:9;;3803:26;;;;3898:21;3885:35;;-1:-1:-1;3947:3:3;2745:1210;;;;;;:::o;5148:639::-;-1:-1:-1;;;;;;;;;;;;;;;;;5283:3:3;:12;;;5276:3;:19;5272:69;;5305:29;5312:3;5317;:12;;;5332:1;5317:16;;;;:::i;5305:29::-;5427:3;5421:10;5498:6;5492:13;5610:2;5604:3;5596:6;5592:16;5588:25;5634:4;5628;5620:19;;5705:6;5700:3;5697:15;5694:67;;;5750:1;5742:6;5738:14;5730:6;5723:30;5694:67;-1:-1:-1;5779:3:3;;5148:639;-1:-1:-1;;;;5148:639:3:o;8974:675::-;-1:-1:-1;;;;;;;;;;;;;;;;;9130:12:3;;;;9118:9;9124:3;9118;:9;:::i;:::-;:24;9114:73;;;9152:28;9159:3;9165:9;9171:3;9165;:9;:::i;9152:28::-;9193:12;9221:1;9209:8;9214:3;9209;:8;:::i;:::-;9208:14;;;;:::i;:::-;9193:29;;9308:3;9302:10;9423:3;9417;9409:6;9405:16;9401:26;9479:4;9471;9467:9;9460:4;9454:11;9450:27;9447:37;9441:4;9434:51;;9567:6;9561:13;9555:3;9550;9546:13;9543:32;9540:83;;;9610:3;9605;9601:13;9593:6;9586:29;9540:83;-1:-1:-1;9641:3:3;;8974:675;-1:-1:-1;;;;;8974:675:3:o;1961:124::-;2018:7;2041:1;2037;:5;2033:34;;;-1:-1:-1;2059:1:3;2052:8;;2033:34;-1:-1:-1;2079:1:3;1961:124;-1:-1:-1;1961:124:3:o;1801:156::-;1895:7;;1908:19;1895:3;1918:8;1908:4;:19::i;:::-;;1933;1940:3;1945:6;1933;:19::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:800:12;92:5;122:18;163:2;155:6;152:14;149:40;;;169:18;;:::i;:::-;215:6;212:1;208:14;241:4;263:28;287:2;283;279:11;263:28;:::i;:::-;325:21;;;254:37;-1:-1:-1;362:14:12;;;396:6;417:15;;;414:24;-1:-1:-1;411:44:12;;;451:1;448;441:12;411:44;473:1;464:10;;494:1;504:304;520:6;515:3;512:15;504:304;;;605:3;592:17;641:2;628:11;625:19;622:39;;;657:1;654;647:12;622:39;686:47;729:3;715:11;707:6;703:24;686:47;:::i;:::-;674:60;;-1:-1:-1;754:12:12;;;;786;;;;546:1;537:11;504:304;;;508:3;;;;;;14:800;;;;;:::o;819:242::-;872:5;925:3;918:4;910:6;906:17;902:27;892:55;;943:1;940;933:12;892:55;965:90;1051:3;1042:6;1029:20;1022:4;1014:6;1010:17;965:90;:::i;1066:347::-;1117:8;1127:6;1181:3;1174:4;1166:6;1162:17;1158:27;1148:55;;1199:1;1196;1189:12;1148:55;-1:-1:-1;1222:20:12;;1265:18;1254:30;;1251:50;;;1297:1;1294;1287:12;1251:50;1334:4;1326:6;1322:17;1310:29;;1386:3;1379:4;1370:6;1362;1358:19;1354:30;1351:39;1348:59;;;1403:1;1400;1393:12;1348:59;1066:347;;;;;:::o;1418:462::-;1460:5;1513:3;1506:4;1498:6;1494:17;1490:27;1480:55;;1531:1;1528;1521:12;1480:55;1567:6;1554:20;1598:48;1614:31;1642:2;1614:31;:::i;:::-;1598:48;:::i;:::-;1671:2;1662:7;1655:19;1717:3;1710:4;1705:2;1697:6;1693:15;1689:26;1686:35;1683:55;;;1734:1;1731;1724:12;1683:55;1799:2;1792:4;1784:6;1780:17;1773:4;1764:7;1760:18;1747:55;1847:1;1822:16;;;1840:4;1818:27;1811:38;;;;1826:7;1418:462;-1:-1:-1;;;1418:462:12:o;1885:153::-;1963:20;;2012:1;2002:12;;1992:40;;2028:1;2025;2018:12;1992:40;1885:153;;;:::o;2043:149::-;2117:20;;2166:1;2156:12;;2146:40;;2182:1;2179;2172:12;2197:163;2264:20;;2324:10;2313:22;;2303:33;;2293:61;;2350:1;2347;2340:12;2365:171;2432:20;;2492:18;2481:30;;2471:41;;2461:69;;2526:1;2523;2516:12;2541:247;2600:6;2653:2;2641:9;2632:7;2628:23;2624:32;2621:52;;;2669:1;2666;2659:12;2621:52;2708:9;2695:23;2727:31;2752:5;2727:31;:::i;2793:251::-;2863:6;2916:2;2904:9;2895:7;2891:23;2887:32;2884:52;;;2932:1;2929;2922:12;2884:52;2964:9;2958:16;2983:31;3008:5;2983:31;:::i;3049:184::-;3119:6;3172:2;3160:9;3151:7;3147:23;3143:32;3140:52;;;3188:1;3185;3178:12;3140:52;-1:-1:-1;3211:16:12;;3049:184;-1:-1:-1;3049:184:12:o;3238:607::-;3333:6;3341;3349;3402:2;3390:9;3381:7;3377:23;3373:32;3370:52;;;3418:1;3415;3408:12;3370:52;3454:9;3441:23;3431:33;;3515:2;3504:9;3500:18;3487:32;3538:18;3579:2;3571:6;3568:14;3565:34;;;3595:1;3592;3585:12;3565:34;3618:49;3659:7;3650:6;3639:9;3635:22;3618:49;:::i;:::-;3608:59;;3720:2;3709:9;3705:18;3692:32;3676:48;;3749:2;3739:8;3736:16;3733:36;;;3765:1;3762;3755:12;3733:36;;3788:51;3831:7;3820:8;3809:9;3805:24;3788:51;:::i;:::-;3778:61;;;3238:607;;;;;:::o;3850:634::-;3929:6;3982:2;3970:9;3961:7;3957:23;3953:32;3950:52;;;3998:1;3995;3988:12;3950:52;4031:9;4025:16;4064:18;4056:6;4053:30;4050:50;;;4096:1;4093;4086:12;4050:50;4119:22;;4172:4;4164:13;;4160:27;-1:-1:-1;4150:55:12;;4201:1;4198;4191:12;4150:55;4230:2;4224:9;4255:48;4271:31;4299:2;4271:31;:::i;4255:48::-;4326:2;4319:5;4312:17;4366:7;4361:2;4356;4352;4348:11;4344:20;4341:33;4338:53;;;4387:1;4384;4377:12;4338:53;4400:54;4451:2;4446;4439:5;4435:14;4430:2;4426;4422:11;4400:54;:::i;4489:1348::-;4644:6;4652;4660;4668;4676;4684;4692;4700;4753:3;4741:9;4732:7;4728:23;4724:33;4721:53;;;4770:1;4767;4760:12;4721:53;4810:9;4797:23;4839:18;4880:2;4872:6;4869:14;4866:34;;;4896:1;4893;4886:12;4866:34;4935:58;4985:7;4976:6;4965:9;4961:22;4935:58;:::i;:::-;5012:8;;-1:-1:-1;4909:84:12;-1:-1:-1;5100:2:12;5085:18;;5072:32;;-1:-1:-1;5116:16:12;;;5113:36;;;5145:1;5142;5135:12;5113:36;5184:60;5236:7;5225:8;5214:9;5210:24;5184:60;:::i;:::-;5263:8;;-1:-1:-1;5158:86:12;-1:-1:-1;5351:2:12;5336:18;;5323:32;;-1:-1:-1;5367:16:12;;;5364:36;;;5396:1;5393;5386:12;5364:36;5434:8;5423:9;5419:24;5409:34;;5481:7;5474:4;5470:2;5466:13;5462:27;5452:55;;5503:1;5500;5493:12;5452:55;5543:2;5530:16;5569:2;5561:6;5558:14;5555:34;;;5585:1;5582;5575:12;5555:34;5638:7;5633:2;5623:6;5620:1;5616:14;5612:2;5608:23;5604:32;5601:45;5598:65;;;5659:1;5656;5649:12;5598:65;5690:2;5686;5682:11;5672:21;;5712:6;5702:16;;;;;5737:37;5770:2;5759:9;5755:18;5737:37;:::i;:::-;5727:47;;5793:38;5826:3;5815:9;5811:19;5793:38;:::i;:::-;5783:48;;4489:1348;;;;;;;;;;;:::o;5842:1394::-;5951:6;5959;5967;5975;6028:3;6016:9;6007:7;6003:23;5999:33;5996:53;;;6045:1;6042;6035:12;5996:53;6085:9;6072:23;6114:18;6155:2;6147:6;6144:14;6141:34;;;6171:1;6168;6161:12;6141:34;6194:22;;;;6250:4;6232:16;;;6228:27;6225:47;;;6268:1;6265;6258:12;6225:47;6294:22;;:::i;:::-;6339:28;6364:2;6339:28;:::i;:::-;6332:5;6325:43;6400:37;6433:2;6429;6425:11;6400:37;:::i;:::-;6395:2;6388:5;6384:14;6377:61;6470:41;6507:2;6503;6499:11;6470:41;:::i;:::-;6465:2;6458:5;6454:14;6447:65;6558:2;6554;6550:11;6537:25;6587:2;6577:8;6574:16;6571:36;;;6603:1;6600;6593:12;6571:36;6639:44;6675:7;6664:8;6660:2;6656:17;6639:44;:::i;:::-;6634:2;6627:5;6623:14;6616:68;;6730:3;6726:2;6722:12;6709:26;6760:2;6750:8;6747:16;6744:36;;;6776:1;6773;6766:12;6744:36;6813:44;6849:7;6838:8;6834:2;6830:17;6813:44;:::i;:::-;6807:3;6800:5;6796:15;6789:69;;6904:3;6900:2;6896:12;6883:26;6934:2;6924:8;6921:16;6918:36;;;6950:1;6947;6940:12;6918:36;6987:55;7034:7;7023:8;7019:2;7015:17;6987:55;:::i;:::-;6981:3;6970:15;;6963:80;-1:-1:-1;6974:5:12;-1:-1:-1;7086:37:12;;-1:-1:-1;;7119:2:12;7104:18;;7086:37;:::i;:::-;7076:47;;7142:37;7175:2;7164:9;7160:18;7142:37;:::i;:::-;5842:1394;;;;-1:-1:-1;7132:47:12;;7226:2;7211:18;7198:32;;-1:-1:-1;;5842:1394:12:o;7241:296::-;7310:6;7363:2;7351:9;7342:7;7338:23;7334:32;7331:52;;;7379:1;7376;7369:12;7331:52;7411:9;7405:16;7461:26;7454:5;7450:38;7443:5;7440:49;7430:77;;7503:1;7500;7493:12;7542:257;7583:3;7621:5;7615:12;7648:6;7643:3;7636:19;7664:63;7720:6;7713:4;7708:3;7704:14;7697:4;7690:5;7686:16;7664:63;:::i;:::-;7781:2;7760:15;-1:-1:-1;;7756:29:12;7747:39;;;;7788:4;7743:50;;7542:257;-1:-1:-1;;7542:257:12:o;8217:217::-;8364:2;8353:9;8346:21;8327:4;8384:44;8424:2;8413:9;8409:18;8401:6;8384:44;:::i;8439:377::-;8632:2;8621:9;8614:21;8595:4;8658:44;8698:2;8687:9;8683:18;8675:6;8658:44;:::i;:::-;8750:9;8742:6;8738:22;8733:2;8722:9;8718:18;8711:50;8778:32;8803:6;8795;8778:32;:::i;10057:470::-;10296:18;10288:6;10284:31;10273:9;10266:50;10352:3;10347:2;10336:9;10332:18;10325:31;10247:4;10373:45;10413:3;10402:9;10398:19;10390:6;10373:45;:::i;:::-;10466:10;10454:23;;;;10449:2;10434:18;;10427:51;-1:-1:-1;10509:2:12;10494:18;10487:34;10365:53;10057:470;-1:-1:-1;;10057:470:12:o;10745:253::-;10817:2;10811:9;10859:4;10847:17;;10894:18;10879:34;;10915:22;;;10876:62;10873:88;;;10941:18;;:::i;:::-;10977:2;10970:22;10745:253;:::o;11003:275::-;11074:2;11068:9;11139:2;11120:13;;-1:-1:-1;;11116:27:12;11104:40;;11174:18;11159:34;;11195:22;;;11156:62;11153:88;;;11221:18;;:::i;:::-;11257:2;11250:22;11003:275;;-1:-1:-1;11003:275:12:o;11283:186::-;11331:4;11364:18;11356:6;11353:30;11350:56;;;11386:18;;:::i;:::-;-1:-1:-1;11452:2:12;11431:15;-1:-1:-1;;11427:29:12;11458:4;11423:40;;11283:186::o;11474:128::-;11514:3;11545:1;11541:6;11538:1;11535:13;11532:39;;;11551:18;;:::i;:::-;-1:-1:-1;11587:9:12;;11474:128::o;11607:422::-;11696:1;11739:5;11696:1;11753:270;11774:7;11764:8;11761:21;11753:270;;;11833:4;11829:1;11825:6;11821:17;11815:4;11812:27;11809:53;;;11842:18;;:::i;:::-;11892:7;11882:8;11878:22;11875:55;;;11912:16;;;;11875:55;11991:22;;;;11951:15;;;;11753:270;;;11757:3;11607:422;;;;;:::o;12034:131::-;12094:5;12123:36;12150:8;12144:4;12219:5;12249:8;12239:80;;-1:-1:-1;12290:1:12;12304:5;;12239:80;12338:4;12328:76;;-1:-1:-1;12375:1:12;12389:5;;12328:76;12420:4;12438:1;12433:59;;;;12506:1;12501:130;;;;12413:218;;12433:59;12463:1;12454:10;;12477:5;;;12501:130;12538:3;12528:8;12525:17;12522:43;;;12545:18;;:::i;:::-;-1:-1:-1;;12601:1:12;12587:16;;12616:5;;12413:218;;12715:2;12705:8;12702:16;12696:3;12690:4;12687:13;12683:36;12677:2;12667:8;12664:16;12659:2;12653:4;12650:12;12646:35;12643:77;12640:159;;;-1:-1:-1;12752:19:12;;;12784:5;;12640:159;12831:34;12856:8;12850:4;12831:34;:::i;:::-;12901:6;12897:1;12893:6;12889:19;12880:7;12877:32;12874:58;;;12912:18;;:::i;:::-;12950:20;;12170:806;-1:-1:-1;;;12170:806:12:o;12981:168::-;13021:7;13087:1;13083;13079:6;13075:14;13072:1;13069:21;13064:1;13057:9;13050:17;13046:45;13043:71;;;13094:18;;:::i;:::-;-1:-1:-1;13134:9:12;;12981:168::o;13154:125::-;13194:4;13222:1;13219;13216:8;13213:34;;;13227:18;;:::i;:::-;-1:-1:-1;13264:9:12;;13154:125::o;13284:256::-;13422:9;13459:75;13519:14;13511:6;13504:5;13459:75;:::i;13545:258::-;13617:1;13627:113;13641:6;13638:1;13635:13;13627:113;;;13717:11;;;13711:18;13698:11;;;13691:39;13663:2;13656:10;13627:113;;;13758:6;13755:1;13752:13;13749:48;;;-1:-1:-1;;13793:1:12;13775:16;;13768:27;13545:258::o;13808:437::-;13887:1;13883:12;;;;13930;;;13951:61;;14005:4;13997:6;13993:17;13983:27;;13951:61;14058:2;14050:6;14047:14;14027:18;14024:38;14021:218;;;-1:-1:-1;;;14092:1:12;14085:88;14196:4;14193:1;14186:15;14224:4;14221:1;14214:15;14250:135;14289:3;-1:-1:-1;;14310:17:12;;14307:43;;;14330:18;;:::i;:::-;-1:-1:-1;14377:1:12;14366:13;;14250:135::o;14390:266::-;14422:1;14448;14438:189;;-1:-1:-1;;;14480:1:12;14473:88;14584:4;14581:1;14574:15;14612:4;14609:1;14602:15;14438:189;-1:-1:-1;14641:9:12;;14390:266::o;14661:184::-;-1:-1:-1;;;14710:1:12;14703:88;14810:4;14807:1;14800:15;14834:4;14831:1;14824:15;14850:184;-1:-1:-1;;;14899:1:12;14892:88;14999:4;14996:1;14989:15;15023:4;15020:1;15013:15;15039:184;-1:-1:-1;;;15088:1:12;15081:88;15188:4;15185:1;15178:15;15212:4;15209:1;15202:15;15228:184;-1:-1:-1;;;15277:1:12;15270:88;15377:4;15374:1;15367:15;15401:4;15398:1;15391:15;15417:154;-1:-1:-1;;;;;15496:5:12;15492:54;15485:5;15482:65;15472:93;;15561:1;15558;15551:12"},"gasEstimates":{"creation":{"codeDepositCost":"1358400","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"52353","estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)":"infinite","executeRequest(string,bytes,string[],uint64,uint32)":"infinite","getDONPublicKey()":"infinite","handleOracleFulfillment(bytes32,bytes,bytes)":"infinite","latestError()":"infinite","latestRequestId()":"2330","latestResponse()":"infinite","owner()":"2368","transferOwnership(address)":"infinite","updateOracleAddress(address)":"26760"},"internal":{"fulfillRequest(bytes32,bytes memory,bytes memory)":"infinite"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)":"d4b39175","executeRequest(string,bytes,string[],uint64,uint32)":"27714589","getDONPublicKey()":"d328a91e","handleOracleFulfillment(bytes32,bytes,bytes)":"0ca76175","latestError()":"fffeb84e","latestRequestId()":"1aa46f59","latestResponse()":"bef3a2f0","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b","updateOracleAddress(address)":"f7023bb6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestIsAlreadyPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestIsNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotRegistry\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"OCRResponse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Functions.Location\",\"name\":\"codeLocation\",\"type\":\"uint8\"},{\"internalType\":\"enum Functions.Location\",\"name\":\"secretsLocation\",\"type\":\"uint8\"},{\"internalType\":\"enum Functions.CodeLanguage\",\"name\":\"language\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"secrets\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"internalType\":\"struct Functions.Request\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"estimateCost\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"secrets\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"name\":\"executeRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDONPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"updateOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"oracle\":\"- The FunctionsOracle contract\"}},\"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)\":{\"params\":{\"gasLimit\":\"gas limit for the fulfillment callback\",\"req\":\"The initialized Functions.Request\",\"subscriptionId\":\"The subscription ID\"},\"returns\":{\"_0\":\"billedCost Cost in Juels (1e18) of LINK\"}},\"executeRequest(string,bytes,string[],uint64,uint32)\":{\"params\":{\"args\":\"List of arguments accessible from within the source code\",\"secrets\":\"Encrypted secrets payload\",\"source\":\"JavaScript source code\",\"subscriptionId\":\"Billing ID\"}},\"getDONPublicKey()\":{\"details\":\"All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key\",\"returns\":{\"_0\":\"publicKey DON's public key\"}},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"params\":{\"err\":\"Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the user code.\"}}},\"title\":\"Functions Copns contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"constructor\":{\"notice\":\"Executes once when a contract is created to initialize state variables\"},\"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)\":{\"notice\":\"Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\"},\"executeRequest(string,bytes,string[],uint64,uint32)\":{\"notice\":\"Send a simple request\"},\"getDONPublicKey()\":{\"notice\":\"Returns the DON's secp256k1 public key used to encrypt secrets\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the designated transmitter node in an OCR round.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"This contract is a demonstration of using Functions.NOT FOR PRODUCTION USE\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TwitterVerifier.sol\":\"TwitterVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"contracts/TwitterVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./lib/dev/functions/FunctionsClient.sol\\\";\\n// import \\\"@chainlink/contracts/src/v0.8/dev/functions/FunctionsClient.sol\\\"; // Once published\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\nimport \\\"./utils/AddressToString.sol\\\";\\n\\n/**\\n * @title Functions Copns contract\\n * @notice This contract is a demonstration of using Functions.\\n * @notice NOT FOR PRODUCTION USE\\n */\\ncontract TwitterVerifier is FunctionsClient, ConfirmedOwner {\\n    using Functions for Functions.Request;\\n\\n    bytes32 public latestRequestId;\\n    bytes public latestResponse;\\n    bytes public latestError;\\n\\n    event OCRResponse(bytes32 indexed requestId, bytes result, bytes err);\\n\\n    /**\\n     * @notice Executes once when a contract is created to initialize state variables\\n     *\\n     * @param oracle - The FunctionsOracle contract\\n     */\\n    constructor(\\n        address oracle\\n    ) FunctionsClient(oracle) ConfirmedOwner(msg.sender) {}\\n\\n    /**\\n     * @notice Send a simple request\\n     * @param source JavaScript source code\\n     * @param secrets Encrypted secrets payload\\n     * @param args List of arguments accessible from within the source code\\n     * @param subscriptionId Billing ID\\n     */\\n    function executeRequest(\\n        string calldata source,\\n        bytes calldata secrets,\\n        string[] calldata args,\\n        uint64 subscriptionId,\\n        uint32 gasLimit\\n    ) public onlyOwner returns (bytes32) {\\n        Functions.Request memory req;\\n        req.initializeRequest(\\n            Functions.Location.Inline,\\n            Functions.CodeLanguage.JavaScript,\\n            source\\n        );\\n        if (secrets.length > 0) req.addInlineSecrets(secrets);\\n\\n        // The following is how we would add some arguments provided in the contract\\n        // to the request\\n        // In this case, it is not necessary, since the msg.sender will always\\n        // be the owner, and not the user\\n        // - Turn the sender address into a string\\n        // string memory sender = addressToString(msg.sender);\\n        // - And add it to the args\\n        // string[] memory newArgs = new string[](args.length + 1);\\n        // for (uint256 i = 0; i < args.length; i++) {\\n        // newArgs[i] = args[i];\\n        // }\\n        // newArgs[args.length] = sender;\\n\\n        // req.addArgs(newArgs);\\n        req.addArgs(args);\\n\\n        bytes32 assignedReqID = sendRequest(\\n            req,\\n            subscriptionId,\\n            gasLimit,\\n            tx.gasprice\\n        );\\n        latestRequestId = assignedReqID;\\n        return assignedReqID;\\n    }\\n\\n    /**\\n     * @notice Callback that is invoked once the DON has resolved the request or hit an error\\n     *\\n     * @param requestId The request ID, returned by sendRequest()\\n     * @param response Aggregated response from the user code\\n     * @param err Aggregated error from the user code or from the execution pipeline\\n     * Either response or error parameter will be set, but never both\\n     */\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        bytes memory response,\\n        bytes memory err\\n    ) internal override {\\n        // revert('test');\\n        latestResponse = response;\\n        latestError = err;\\n        emit OCRResponse(requestId, response, err);\\n    }\\n\\n    function updateOracleAddress(address oracle) public onlyOwner {\\n        setOracle(oracle);\\n    }\\n}\\n\",\"keccak256\":\"0x6649061a7d397296fe5a678ea9e4280af59a66067ef44fa56af45736b75ccf16\",\"license\":\"MIT\"},\"contracts/lib/dev/functions/Functions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport {CBORChainlink} from \\\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for Chainlink Functions\\n */\\nlibrary Functions {\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  enum Location {\\n    Inline,\\n    Remote\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation;\\n    Location secretsLocation;\\n    CodeLanguage language;\\n    string source; // Source code for Location.Inline or url for Location.Remote\\n    bytes secrets; // Encrypted secrets blob for Location.Inline or url for Location.Remote\\n    string[] args;\\n  }\\n\\n  error EmptySource();\\n  error EmptyUrl();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n\\n  /**\\n   * @notice Encodes a Request to CBOR encoded bytes\\n   * @param self The request to encode\\n   * @return CBOR encoded bytes\\n   */\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    BufferChainlink.buffer memory buf;\\n    BufferChainlink.init(buf, DEFAULT_BUFFER_SIZE);\\n\\n    buf.encodeString(\\\"codeLocation\\\");\\n    buf.encodeUInt(uint256(self.codeLocation));\\n\\n    buf.encodeString(\\\"language\\\");\\n    buf.encodeUInt(uint256(self.language));\\n\\n    buf.encodeString(\\\"source\\\");\\n    buf.encodeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buf.encodeString(\\\"args\\\");\\n      buf.startArray();\\n      for (uint256 i = 0; i < self.args.length; i++) {\\n        buf.encodeString(self.args[i]);\\n      }\\n      buf.endSequence();\\n    }\\n\\n    if (self.secrets.length > 0) {\\n      buf.encodeString(\\\"secretsLocation\\\");\\n      buf.encodeUInt(uint256(self.secretsLocation));\\n      buf.encodeString(\\\"secrets\\\");\\n      buf.encodeBytes(self.secrets);\\n    }\\n\\n    return buf.buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Sets the codeLocation and code on the request\\n   * @param self The uninitialized request\\n   * @param location The user provided source code location\\n   * @param language The programming language of the user code\\n   * @param source The user provided source code or a url\\n   */\\n  function initializeRequest(\\n    Request memory self,\\n    Location location,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = location;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Simplified version of initializeRequest for PoC\\n   * @param self The uninitialized request\\n   * @param javaScriptSource The user provided JS code (must not be empty)\\n   */\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /**\\n   * @notice Adds user encrypted secrets to a Request\\n   * @param self The initialized request\\n   * @param secrets The user encrypted secrets (must not be empty)\\n   */\\n  function addInlineSecrets(Request memory self, bytes memory secrets) internal pure {\\n    if (secrets.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Inline;\\n    self.secrets = secrets;\\n  }\\n\\n  /**\\n   * @notice Adds args for the user run function\\n   * @param self The initialized request\\n   * @param args The array of args (must not be empty)\\n   */\\n  function addArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n}\\n\",\"keccak256\":\"0x2d0a77965c1e058bca11725a9a47328678aacffdcc8cf9bb02b03f059d98540c\",\"license\":\"MIT\"},\"contracts/lib/dev/functions/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./Functions.sol\\\";\\nimport \\\"../interfaces/FunctionsClientInterface.sol\\\";\\nimport \\\"../interfaces/FunctionsOracleInterface.sol\\\";\\n\\n/**\\n * @title The Chainlink Functions client contract\\n * @notice Contract writers can inherit this contract in order to create Chainlink Functions requests\\n */\\nabstract contract FunctionsClient is FunctionsClientInterface {\\n  FunctionsOracleInterface private s_oracle;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error SenderIsNotRegistry();\\n  error RequestIsAlreadyPending();\\n  error RequestIsNotPending();\\n\\n  constructor(address oracle) {\\n    setOracle(oracle);\\n  }\\n\\n  /**\\n   * @inheritdoc FunctionsClientInterface\\n   */\\n  function getDONPublicKey() external view override returns (bytes memory) {\\n    return s_oracle.getDONPublicKey();\\n  }\\n\\n  /**\\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param req The initialized Functions.Request\\n   * @param subscriptionId The subscription ID\\n   * @param gasLimit gas limit for the fulfillment callback\\n   * @return billedCost Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    Functions.Request memory req,\\n    uint64 subscriptionId,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) public view returns (uint96) {\\n    return s_oracle.estimateCost(subscriptionId, Functions.encodeCBOR(req), gasLimit, gasPrice);\\n  }\\n\\n  /**\\n   * @notice Sends a Chainlink Functions request to the stored oracle address\\n   * @param req The initialized Functions.Request\\n   * @param subscriptionId The subscription ID\\n   * @param gasLimit gas limit for the fulfillment callback\\n   * @return requestId The generated request ID\\n   */\\n  function sendRequest(\\n    Functions.Request memory req,\\n    uint64 subscriptionId,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = s_oracle.sendRequest(subscriptionId, Functions.encodeCBOR(req), gasLimit, gasPrice);\\n    s_pendingRequests[requestId] = s_oracle.getRegistry();\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /**\\n   * @notice User defined function to handle a response\\n   * @param requestId The request ID, returned by sendRequest()\\n   * @param response Aggregated response from the user code\\n   * @param err Aggregated error from the user code or from the execution pipeline\\n   * Either response or error parameter will be set, but never both\\n   */\\n  function fulfillRequest(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) internal virtual;\\n\\n  /**\\n   * @inheritdoc FunctionsClientInterface\\n   */\\n  function handleOracleFulfillment(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) external override recordChainlinkFulfillment(requestId) {\\n    fulfillRequest(requestId, response, err);\\n  }\\n\\n  /**\\n   * @notice Sets the stored Oracle address\\n   * @param oracle The address of Functions Oracle contract\\n   */\\n  function setOracle(address oracle) internal {\\n    s_oracle = FunctionsOracleInterface(oracle);\\n  }\\n\\n  /**\\n   * @notice Gets the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function getChainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle that serviced the request.\\n   * Emits RequestFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    if (msg.sender != s_pendingRequests[requestId]) {\\n      revert SenderIsNotRegistry();\\n    }\\n    delete s_pendingRequests[requestId];\\n    emit RequestFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    if (s_pendingRequests[requestId] != address(0)) {\\n      revert RequestIsAlreadyPending();\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xc6f00bd3327dcc9a79674bbe6e0dda295a58ef480c7afc9eab309087d26f7f6e\",\"license\":\"MIT\"},\"contracts/lib/dev/interfaces/FunctionsBillingRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions billing subscription registry interface.\\n */\\ninterface FunctionsBillingRegistryInterface {\\n  struct RequestBilling {\\n    // a unique subscription ID allocated by billing system,\\n    uint64 subscriptionId;\\n    // the client contract that initiated the request to the DON\\n    // to use the subscription it must be added as a consumer on the subscription\\n    address client;\\n    // customer specified gas limit for the fulfillment callback\\n    uint32 gasLimit;\\n    // the expected gas price used to execute the transaction\\n    uint256 gasPrice;\\n  }\\n\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return uint32 global max for request gas limit\\n   * @return address[] list of registered DONs\\n   */\\n  function getRequestConfig() external view returns (uint32, address[] memory);\\n\\n  /**\\n   * @notice Determine the charged fee that will be paid to the Registry owner\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling memory billing)\\n    external\\n    view\\n    returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param gasLimit Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasPrice The request's billing configuration\\n   * @param donFee Fee charged by the DON that is paid to Oracle Node\\n   * @param registryFee Fee charged by the DON that is paid to Oracle Node\\n   * @return costEstimate Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint32 gasLimit,\\n    uint256 gasPrice,\\n    uint96 donFee,\\n    uint96 registryFee\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Initiate the billing process for an Functions request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing Billing configuration for the request\\n   * @return requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest.\\n   * @dev Only callable by a node that has been approved on the Registry\\n   */\\n  function startBilling(bytes calldata data, RequestBilling calldata billing) external returns (bytes32);\\n\\n  /**\\n   * @notice Finalize billing process for an Functions request by sending a callback to the Client contract and then charging the subscription\\n   * @param requestId identifier for the request that was generated by the Registry in the beginBilling commitment\\n   * @param response response data from DON consensus\\n   * @param err error from DON consensus\\n   * @param transmitter the Oracle who sent the report\\n   * @param signers the Oracles who had a part in generating the report\\n   * @param signerCount the number of signers on the report\\n   * @param reportValidationGas the amount of gas used for the report validation. Cost is split by all fulfillments on the report.\\n   * @param initialGas the initial amount of gas that should be used as a baseline to charge the single fulfillment for execution cost\\n   * @return success whether the callback was successsful\\n   * @dev Only callable by a node that has been approved on the Registry\\n   * @dev simulated offchain to determine if sufficient balance is present to fulfill the request\\n   */\\n  function fulfillAndBill(\\n    bytes32 requestId,\\n    bytes calldata response,\\n    bytes calldata err,\\n    address transmitter,\\n    address[31] memory signers, // 31 comes from OCR2Abstract.sol's maxNumOracles constant\\n    uint8 signerCount,\\n    uint256 reportValidationGas,\\n    uint256 initialGas\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Gets subscription owner.\\n   * @param subscriptionId - ID of the subscription\\n   * @return owner - owner of the subscription.\\n   */\\n  function getSubscriptionOwner(uint64 subscriptionId) external view returns (address owner);\\n}\\n\",\"keccak256\":\"0xac8c00e6634411559840e1962826ece125dd631879e7458897e573ec85cf7490\",\"license\":\"MIT\"},\"contracts/lib/dev/interfaces/FunctionsClientInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions client interface.\\n */\\ninterface FunctionsClientInterface {\\n  /**\\n   * @notice Returns the DON's secp256k1 public key used to encrypt secrets\\n   * @dev All Oracles nodes have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Chainlink Functions response handler called by the designated transmitter node in an OCR round.\\n   * @param requestId The requestId returned by FunctionsClient.sendRequest().\\n   * @param response Aggregated response from the user code.\\n   * @param err Aggregated error either from the user code or from the execution pipeline.\\n   * Either response or error parameter will be set, but never both.\\n   */\\n  function handleOracleFulfillment(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd5c899b894dc62548149681ee46f2027a6dac18eea67663069e496ea48e4f1fb\",\"license\":\"MIT\"},\"contracts/lib/dev/interfaces/FunctionsOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./FunctionsBillingRegistryInterface.sol\\\";\\n\\n/**\\n * @title Chainlink Functions oracle interface.\\n */\\ninterface FunctionsOracleInterface {\\n  /**\\n   * @notice Gets the stored billing registry address\\n   * @return registryAddress The address of Chainlink Functions billing registry contract\\n   */\\n  function getRegistry() external view returns (address);\\n\\n  /**\\n   * @notice Sets the stored billing registry address\\n   * @param registryAddress The new address of Chainlink Functions billing registry contract\\n   */\\n  function setRegistry(address registryAddress) external;\\n\\n  /**\\n   * @notice Returns the DON's secp256k1 public key that is used to encrypt secrets\\n   * @dev All nodes on the DON have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey the DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Sets DON's secp256k1 public key used to encrypt secrets\\n   * @dev Used to rotate the key\\n   * @param donPublicKey The new public key\\n   */\\n  function setDONPublicKey(bytes calldata donPublicKey) external;\\n\\n  /**\\n   * @notice Sets a per-node secp256k1 public key used to encrypt secrets for that node\\n   * @dev Callable only by contract owner and DON members\\n   * @param node node's address\\n   * @param publicKey node's public key\\n   */\\n  function setNodePublicKey(address node, bytes calldata publicKey) external;\\n\\n  /**\\n   * @notice Deletes node's public key\\n   * @dev Callable only by contract owner or the node itself\\n   * @param node node's address\\n   */\\n  function deleteNodePublicKey(address node) external;\\n\\n  /**\\n   * @notice Return two arrays of equal size containing DON members' addresses and their corresponding\\n   * public keys (or empty byte arrays if per-node key is not defined)\\n   */\\n  function getAllNodePublicKeys() external view returns (address[] memory, bytes[] memory);\\n\\n  /**\\n   * @notice Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling calldata billing)\\n    external\\n    view\\n    returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return billedCost Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Sends a request (encoded as data) using the provided subscriptionId\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return requestId A unique request identifier (unique per DON)\\n   */\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe53e646881ffadf7ad331cb42ba4e6c91232c1b8c4544ebc292a139deb8a0cff\",\"license\":\"MIT\"},\"contracts/utils/AddressToString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @notice Convert address to string\\n * @param _addr The address to convert\\n */\\n\\nfunction addressToString(address _addr) pure returns (string memory) {\\n    bytes32 value = bytes32(uint256(uint160(_addr)));\\n    bytes memory alphabet = \\\"0123456789abcdef\\\";\\n    bytes memory str = new bytes(42);\\n    str[0] = \\\"0\\\";\\n    str[1] = \\\"x\\\";\\n\\n    for (uint256 i = 0; i < 20; i++) {\\n        str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n        str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n    }\\n\\n    return string(str);\\n}\\n\",\"keccak256\":\"0xc9d3afd9dfd7380bcb4e559c3cdde59b495bc4ffdc7c849ec3edd0df82e5ecba\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1647,"contract":"contracts/TwitterVerifier.sol:TwitterVerifier","label":"s_oracle","offset":0,"slot":"0","type":"t_contract(FunctionsOracleInterface)2081"},{"astId":1651,"contract":"contracts/TwitterVerifier.sol:TwitterVerifier","label":"s_pendingRequests","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_address)"},{"astId":27,"contract":"contracts/TwitterVerifier.sol:TwitterVerifier","label":"s_owner","offset":0,"slot":"2","type":"t_address"},{"astId":29,"contract":"contracts/TwitterVerifier.sol:TwitterVerifier","label":"s_pendingOwner","offset":0,"slot":"3","type":"t_address"},{"astId":1182,"contract":"contracts/TwitterVerifier.sol:TwitterVerifier","label":"latestRequestId","offset":0,"slot":"4","type":"t_bytes32"},{"astId":1184,"contract":"contracts/TwitterVerifier.sol:TwitterVerifier","label":"latestResponse","offset":0,"slot":"5","type":"t_bytes_storage"},{"astId":1186,"contract":"contracts/TwitterVerifier.sol:TwitterVerifier","label":"latestError","offset":0,"slot":"6","type":"t_bytes_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(FunctionsOracleInterface)2081":{"encoding":"inplace","label":"contract FunctionsOracleInterface","numberOfBytes":"20"},"t_mapping(t_bytes32,t_address)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => address)","numberOfBytes":"32","value":"t_address"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"constructor":{"notice":"Executes once when a contract is created to initialize state variables"},"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)":{"notice":"Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee"},"executeRequest(string,bytes,string[],uint64,uint32)":{"notice":"Send a simple request"},"getDONPublicKey()":{"notice":"Returns the DON's secp256k1 public key used to encrypt secrets"},"handleOracleFulfillment(bytes32,bytes,bytes)":{"notice":"Chainlink Functions response handler called by the designated transmitter node in an OCR round."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address, pending."}},"notice":"This contract is a demonstration of using Functions.NOT FOR PRODUCTION USE","version":1}}},"contracts/lib/dev/functions/Functions.sol":{"Functions":{"abi":[{"inputs":[],"name":"EmptyArgs","type":"error"},{"inputs":[],"name":"EmptySecrets","type":"error"},{"inputs":[],"name":"EmptySource","type":"error"},{"inputs":[],"name":"EmptyUrl","type":"error"}],"devdoc":{"kind":"dev","methods":{},"title":"Library for Chainlink Functions","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122022d14249e1489e9092424bb370cf73b26e529b7aab7a0613ad39d55c862889b264736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 0xD1 TIMESTAMP 0x49 0xE1 BASEFEE SWAP15 SWAP1 SWAP3 TIMESTAMP 0x4B 0xB3 PUSH17 0xCF73B26E529B7AAB7A0613AD39D55C8628 DUP10 0xB2 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"284:3462:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;284:3462:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122022d14249e1489e9092424bb370cf73b26e529b7aab7a0613ad39d55c862889b264736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 0xD1 TIMESTAMP 0x49 0xE1 BASEFEE SWAP15 SWAP1 SWAP3 TIMESTAMP 0x4B 0xB3 PUSH17 0xCF73B26E529B7AAB7A0613AD39D55C8628 DUP10 0xB2 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"284:3462:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"addArgs(struct Functions.Request memory,string memory[] memory)":"infinite","addInlineSecrets(struct Functions.Request memory,bytes memory)":"infinite","encodeCBOR(struct Functions.Request memory)":"infinite","initializeRequest(struct Functions.Request memory,enum Functions.Location,enum Functions.CodeLanguage,string memory)":"infinite","initializeRequestForInlineJavaScript(struct Functions.Request memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyUrl\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Library for Chainlink Functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/dev/functions/Functions.sol\":\"Functions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"contracts/lib/dev/functions/Functions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport {CBORChainlink} from \\\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for Chainlink Functions\\n */\\nlibrary Functions {\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  enum Location {\\n    Inline,\\n    Remote\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation;\\n    Location secretsLocation;\\n    CodeLanguage language;\\n    string source; // Source code for Location.Inline or url for Location.Remote\\n    bytes secrets; // Encrypted secrets blob for Location.Inline or url for Location.Remote\\n    string[] args;\\n  }\\n\\n  error EmptySource();\\n  error EmptyUrl();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n\\n  /**\\n   * @notice Encodes a Request to CBOR encoded bytes\\n   * @param self The request to encode\\n   * @return CBOR encoded bytes\\n   */\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    BufferChainlink.buffer memory buf;\\n    BufferChainlink.init(buf, DEFAULT_BUFFER_SIZE);\\n\\n    buf.encodeString(\\\"codeLocation\\\");\\n    buf.encodeUInt(uint256(self.codeLocation));\\n\\n    buf.encodeString(\\\"language\\\");\\n    buf.encodeUInt(uint256(self.language));\\n\\n    buf.encodeString(\\\"source\\\");\\n    buf.encodeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buf.encodeString(\\\"args\\\");\\n      buf.startArray();\\n      for (uint256 i = 0; i < self.args.length; i++) {\\n        buf.encodeString(self.args[i]);\\n      }\\n      buf.endSequence();\\n    }\\n\\n    if (self.secrets.length > 0) {\\n      buf.encodeString(\\\"secretsLocation\\\");\\n      buf.encodeUInt(uint256(self.secretsLocation));\\n      buf.encodeString(\\\"secrets\\\");\\n      buf.encodeBytes(self.secrets);\\n    }\\n\\n    return buf.buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Sets the codeLocation and code on the request\\n   * @param self The uninitialized request\\n   * @param location The user provided source code location\\n   * @param language The programming language of the user code\\n   * @param source The user provided source code or a url\\n   */\\n  function initializeRequest(\\n    Request memory self,\\n    Location location,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = location;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Simplified version of initializeRequest for PoC\\n   * @param self The uninitialized request\\n   * @param javaScriptSource The user provided JS code (must not be empty)\\n   */\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /**\\n   * @notice Adds user encrypted secrets to a Request\\n   * @param self The initialized request\\n   * @param secrets The user encrypted secrets (must not be empty)\\n   */\\n  function addInlineSecrets(Request memory self, bytes memory secrets) internal pure {\\n    if (secrets.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Inline;\\n    self.secrets = secrets;\\n  }\\n\\n  /**\\n   * @notice Adds args for the user run function\\n   * @param self The initialized request\\n   * @param args The array of args (must not be empty)\\n   */\\n  function addArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n}\\n\",\"keccak256\":\"0x2d0a77965c1e058bca11725a9a47328678aacffdcc8cf9bb02b03f059d98540c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/lib/dev/functions/FunctionsClient.sol":{"FunctionsClient":{"abi":[{"inputs":[],"name":"RequestIsAlreadyPending","type":"error"},{"inputs":[],"name":"RequestIsNotPending","type":"error"},{"inputs":[],"name":"SenderIsNotRegistry","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestSent","type":"event"},{"inputs":[{"components":[{"internalType":"enum Functions.Location","name":"codeLocation","type":"uint8"},{"internalType":"enum Functions.Location","name":"secretsLocation","type":"uint8"},{"internalType":"enum Functions.CodeLanguage","name":"language","type":"uint8"},{"internalType":"string","name":"source","type":"string"},{"internalType":"bytes","name":"secrets","type":"bytes"},{"internalType":"string[]","name":"args","type":"string[]"}],"internalType":"struct Functions.Request","name":"req","type":"tuple"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"gasLimit","type":"uint32"},{"internalType":"uint256","name":"gasPrice","type":"uint256"}],"name":"estimateCost","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDONPublicKey","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"bytes","name":"response","type":"bytes"},{"internalType":"bytes","name":"err","type":"bytes"}],"name":"handleOracleFulfillment","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)":{"params":{"gasLimit":"gas limit for the fulfillment callback","req":"The initialized Functions.Request","subscriptionId":"The subscription ID"},"returns":{"_0":"billedCost Cost in Juels (1e18) of LINK"}},"getDONPublicKey()":{"details":"All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key","returns":{"_0":"publicKey DON's public key"}},"handleOracleFulfillment(bytes32,bytes,bytes)":{"params":{"err":"Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.","requestId":"The requestId returned by FunctionsClient.sendRequest().","response":"Aggregated response from the user code."}}},"title":"The Chainlink Functions client contract","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)":"d4b39175","getDONPublicKey()":"d328a91e","handleOracleFulfillment(bytes32,bytes,bytes)":"0ca76175"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"RequestIsAlreadyPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestIsNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotRegistry\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Functions.Location\",\"name\":\"codeLocation\",\"type\":\"uint8\"},{\"internalType\":\"enum Functions.Location\",\"name\":\"secretsLocation\",\"type\":\"uint8\"},{\"internalType\":\"enum Functions.CodeLanguage\",\"name\":\"language\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"secrets\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"internalType\":\"struct Functions.Request\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"estimateCost\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDONPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)\":{\"params\":{\"gasLimit\":\"gas limit for the fulfillment callback\",\"req\":\"The initialized Functions.Request\",\"subscriptionId\":\"The subscription ID\"},\"returns\":{\"_0\":\"billedCost Cost in Juels (1e18) of LINK\"}},\"getDONPublicKey()\":{\"details\":\"All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key\",\"returns\":{\"_0\":\"publicKey DON's public key\"}},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"params\":{\"err\":\"Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the user code.\"}}},\"title\":\"The Chainlink Functions client contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)\":{\"notice\":\"Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\"},\"getDONPublicKey()\":{\"notice\":\"Returns the DON's secp256k1 public key used to encrypt secrets\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the designated transmitter node in an OCR round.\"}},\"notice\":\"Contract writers can inherit this contract in order to create Chainlink Functions requests\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/dev/functions/FunctionsClient.sol\":\"FunctionsClient\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"contracts/lib/dev/functions/Functions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport {CBORChainlink} from \\\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for Chainlink Functions\\n */\\nlibrary Functions {\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  enum Location {\\n    Inline,\\n    Remote\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation;\\n    Location secretsLocation;\\n    CodeLanguage language;\\n    string source; // Source code for Location.Inline or url for Location.Remote\\n    bytes secrets; // Encrypted secrets blob for Location.Inline or url for Location.Remote\\n    string[] args;\\n  }\\n\\n  error EmptySource();\\n  error EmptyUrl();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n\\n  /**\\n   * @notice Encodes a Request to CBOR encoded bytes\\n   * @param self The request to encode\\n   * @return CBOR encoded bytes\\n   */\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    BufferChainlink.buffer memory buf;\\n    BufferChainlink.init(buf, DEFAULT_BUFFER_SIZE);\\n\\n    buf.encodeString(\\\"codeLocation\\\");\\n    buf.encodeUInt(uint256(self.codeLocation));\\n\\n    buf.encodeString(\\\"language\\\");\\n    buf.encodeUInt(uint256(self.language));\\n\\n    buf.encodeString(\\\"source\\\");\\n    buf.encodeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buf.encodeString(\\\"args\\\");\\n      buf.startArray();\\n      for (uint256 i = 0; i < self.args.length; i++) {\\n        buf.encodeString(self.args[i]);\\n      }\\n      buf.endSequence();\\n    }\\n\\n    if (self.secrets.length > 0) {\\n      buf.encodeString(\\\"secretsLocation\\\");\\n      buf.encodeUInt(uint256(self.secretsLocation));\\n      buf.encodeString(\\\"secrets\\\");\\n      buf.encodeBytes(self.secrets);\\n    }\\n\\n    return buf.buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Sets the codeLocation and code on the request\\n   * @param self The uninitialized request\\n   * @param location The user provided source code location\\n   * @param language The programming language of the user code\\n   * @param source The user provided source code or a url\\n   */\\n  function initializeRequest(\\n    Request memory self,\\n    Location location,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = location;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Simplified version of initializeRequest for PoC\\n   * @param self The uninitialized request\\n   * @param javaScriptSource The user provided JS code (must not be empty)\\n   */\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /**\\n   * @notice Adds user encrypted secrets to a Request\\n   * @param self The initialized request\\n   * @param secrets The user encrypted secrets (must not be empty)\\n   */\\n  function addInlineSecrets(Request memory self, bytes memory secrets) internal pure {\\n    if (secrets.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Inline;\\n    self.secrets = secrets;\\n  }\\n\\n  /**\\n   * @notice Adds args for the user run function\\n   * @param self The initialized request\\n   * @param args The array of args (must not be empty)\\n   */\\n  function addArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n}\\n\",\"keccak256\":\"0x2d0a77965c1e058bca11725a9a47328678aacffdcc8cf9bb02b03f059d98540c\",\"license\":\"MIT\"},\"contracts/lib/dev/functions/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./Functions.sol\\\";\\nimport \\\"../interfaces/FunctionsClientInterface.sol\\\";\\nimport \\\"../interfaces/FunctionsOracleInterface.sol\\\";\\n\\n/**\\n * @title The Chainlink Functions client contract\\n * @notice Contract writers can inherit this contract in order to create Chainlink Functions requests\\n */\\nabstract contract FunctionsClient is FunctionsClientInterface {\\n  FunctionsOracleInterface private s_oracle;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error SenderIsNotRegistry();\\n  error RequestIsAlreadyPending();\\n  error RequestIsNotPending();\\n\\n  constructor(address oracle) {\\n    setOracle(oracle);\\n  }\\n\\n  /**\\n   * @inheritdoc FunctionsClientInterface\\n   */\\n  function getDONPublicKey() external view override returns (bytes memory) {\\n    return s_oracle.getDONPublicKey();\\n  }\\n\\n  /**\\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param req The initialized Functions.Request\\n   * @param subscriptionId The subscription ID\\n   * @param gasLimit gas limit for the fulfillment callback\\n   * @return billedCost Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    Functions.Request memory req,\\n    uint64 subscriptionId,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) public view returns (uint96) {\\n    return s_oracle.estimateCost(subscriptionId, Functions.encodeCBOR(req), gasLimit, gasPrice);\\n  }\\n\\n  /**\\n   * @notice Sends a Chainlink Functions request to the stored oracle address\\n   * @param req The initialized Functions.Request\\n   * @param subscriptionId The subscription ID\\n   * @param gasLimit gas limit for the fulfillment callback\\n   * @return requestId The generated request ID\\n   */\\n  function sendRequest(\\n    Functions.Request memory req,\\n    uint64 subscriptionId,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = s_oracle.sendRequest(subscriptionId, Functions.encodeCBOR(req), gasLimit, gasPrice);\\n    s_pendingRequests[requestId] = s_oracle.getRegistry();\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /**\\n   * @notice User defined function to handle a response\\n   * @param requestId The request ID, returned by sendRequest()\\n   * @param response Aggregated response from the user code\\n   * @param err Aggregated error from the user code or from the execution pipeline\\n   * Either response or error parameter will be set, but never both\\n   */\\n  function fulfillRequest(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) internal virtual;\\n\\n  /**\\n   * @inheritdoc FunctionsClientInterface\\n   */\\n  function handleOracleFulfillment(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) external override recordChainlinkFulfillment(requestId) {\\n    fulfillRequest(requestId, response, err);\\n  }\\n\\n  /**\\n   * @notice Sets the stored Oracle address\\n   * @param oracle The address of Functions Oracle contract\\n   */\\n  function setOracle(address oracle) internal {\\n    s_oracle = FunctionsOracleInterface(oracle);\\n  }\\n\\n  /**\\n   * @notice Gets the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function getChainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle that serviced the request.\\n   * Emits RequestFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    if (msg.sender != s_pendingRequests[requestId]) {\\n      revert SenderIsNotRegistry();\\n    }\\n    delete s_pendingRequests[requestId];\\n    emit RequestFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    if (s_pendingRequests[requestId] != address(0)) {\\n      revert RequestIsAlreadyPending();\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xc6f00bd3327dcc9a79674bbe6e0dda295a58ef480c7afc9eab309087d26f7f6e\",\"license\":\"MIT\"},\"contracts/lib/dev/interfaces/FunctionsBillingRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions billing subscription registry interface.\\n */\\ninterface FunctionsBillingRegistryInterface {\\n  struct RequestBilling {\\n    // a unique subscription ID allocated by billing system,\\n    uint64 subscriptionId;\\n    // the client contract that initiated the request to the DON\\n    // to use the subscription it must be added as a consumer on the subscription\\n    address client;\\n    // customer specified gas limit for the fulfillment callback\\n    uint32 gasLimit;\\n    // the expected gas price used to execute the transaction\\n    uint256 gasPrice;\\n  }\\n\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return uint32 global max for request gas limit\\n   * @return address[] list of registered DONs\\n   */\\n  function getRequestConfig() external view returns (uint32, address[] memory);\\n\\n  /**\\n   * @notice Determine the charged fee that will be paid to the Registry owner\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling memory billing)\\n    external\\n    view\\n    returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param gasLimit Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasPrice The request's billing configuration\\n   * @param donFee Fee charged by the DON that is paid to Oracle Node\\n   * @param registryFee Fee charged by the DON that is paid to Oracle Node\\n   * @return costEstimate Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint32 gasLimit,\\n    uint256 gasPrice,\\n    uint96 donFee,\\n    uint96 registryFee\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Initiate the billing process for an Functions request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing Billing configuration for the request\\n   * @return requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest.\\n   * @dev Only callable by a node that has been approved on the Registry\\n   */\\n  function startBilling(bytes calldata data, RequestBilling calldata billing) external returns (bytes32);\\n\\n  /**\\n   * @notice Finalize billing process for an Functions request by sending a callback to the Client contract and then charging the subscription\\n   * @param requestId identifier for the request that was generated by the Registry in the beginBilling commitment\\n   * @param response response data from DON consensus\\n   * @param err error from DON consensus\\n   * @param transmitter the Oracle who sent the report\\n   * @param signers the Oracles who had a part in generating the report\\n   * @param signerCount the number of signers on the report\\n   * @param reportValidationGas the amount of gas used for the report validation. Cost is split by all fulfillments on the report.\\n   * @param initialGas the initial amount of gas that should be used as a baseline to charge the single fulfillment for execution cost\\n   * @return success whether the callback was successsful\\n   * @dev Only callable by a node that has been approved on the Registry\\n   * @dev simulated offchain to determine if sufficient balance is present to fulfill the request\\n   */\\n  function fulfillAndBill(\\n    bytes32 requestId,\\n    bytes calldata response,\\n    bytes calldata err,\\n    address transmitter,\\n    address[31] memory signers, // 31 comes from OCR2Abstract.sol's maxNumOracles constant\\n    uint8 signerCount,\\n    uint256 reportValidationGas,\\n    uint256 initialGas\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Gets subscription owner.\\n   * @param subscriptionId - ID of the subscription\\n   * @return owner - owner of the subscription.\\n   */\\n  function getSubscriptionOwner(uint64 subscriptionId) external view returns (address owner);\\n}\\n\",\"keccak256\":\"0xac8c00e6634411559840e1962826ece125dd631879e7458897e573ec85cf7490\",\"license\":\"MIT\"},\"contracts/lib/dev/interfaces/FunctionsClientInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions client interface.\\n */\\ninterface FunctionsClientInterface {\\n  /**\\n   * @notice Returns the DON's secp256k1 public key used to encrypt secrets\\n   * @dev All Oracles nodes have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Chainlink Functions response handler called by the designated transmitter node in an OCR round.\\n   * @param requestId The requestId returned by FunctionsClient.sendRequest().\\n   * @param response Aggregated response from the user code.\\n   * @param err Aggregated error either from the user code or from the execution pipeline.\\n   * Either response or error parameter will be set, but never both.\\n   */\\n  function handleOracleFulfillment(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd5c899b894dc62548149681ee46f2027a6dac18eea67663069e496ea48e4f1fb\",\"license\":\"MIT\"},\"contracts/lib/dev/interfaces/FunctionsOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./FunctionsBillingRegistryInterface.sol\\\";\\n\\n/**\\n * @title Chainlink Functions oracle interface.\\n */\\ninterface FunctionsOracleInterface {\\n  /**\\n   * @notice Gets the stored billing registry address\\n   * @return registryAddress The address of Chainlink Functions billing registry contract\\n   */\\n  function getRegistry() external view returns (address);\\n\\n  /**\\n   * @notice Sets the stored billing registry address\\n   * @param registryAddress The new address of Chainlink Functions billing registry contract\\n   */\\n  function setRegistry(address registryAddress) external;\\n\\n  /**\\n   * @notice Returns the DON's secp256k1 public key that is used to encrypt secrets\\n   * @dev All nodes on the DON have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey the DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Sets DON's secp256k1 public key used to encrypt secrets\\n   * @dev Used to rotate the key\\n   * @param donPublicKey The new public key\\n   */\\n  function setDONPublicKey(bytes calldata donPublicKey) external;\\n\\n  /**\\n   * @notice Sets a per-node secp256k1 public key used to encrypt secrets for that node\\n   * @dev Callable only by contract owner and DON members\\n   * @param node node's address\\n   * @param publicKey node's public key\\n   */\\n  function setNodePublicKey(address node, bytes calldata publicKey) external;\\n\\n  /**\\n   * @notice Deletes node's public key\\n   * @dev Callable only by contract owner or the node itself\\n   * @param node node's address\\n   */\\n  function deleteNodePublicKey(address node) external;\\n\\n  /**\\n   * @notice Return two arrays of equal size containing DON members' addresses and their corresponding\\n   * public keys (or empty byte arrays if per-node key is not defined)\\n   */\\n  function getAllNodePublicKeys() external view returns (address[] memory, bytes[] memory);\\n\\n  /**\\n   * @notice Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling calldata billing)\\n    external\\n    view\\n    returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return billedCost Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Sends a request (encoded as data) using the provided subscriptionId\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return requestId A unique request identifier (unique per DON)\\n   */\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe53e646881ffadf7ad331cb42ba4e6c91232c1b8c4544ebc292a139deb8a0cff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1647,"contract":"contracts/lib/dev/functions/FunctionsClient.sol:FunctionsClient","label":"s_oracle","offset":0,"slot":"0","type":"t_contract(FunctionsOracleInterface)2081"},{"astId":1651,"contract":"contracts/lib/dev/functions/FunctionsClient.sol:FunctionsClient","label":"s_pendingRequests","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(FunctionsOracleInterface)2081":{"encoding":"inplace","label":"contract FunctionsOracleInterface","numberOfBytes":"20"},"t_mapping(t_bytes32,t_address)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => address)","numberOfBytes":"32","value":"t_address"}}},"userdoc":{"kind":"user","methods":{"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)":{"notice":"Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee"},"getDONPublicKey()":{"notice":"Returns the DON's secp256k1 public key used to encrypt secrets"},"handleOracleFulfillment(bytes32,bytes,bytes)":{"notice":"Chainlink Functions response handler called by the designated transmitter node in an OCR round."}},"notice":"Contract writers can inherit this contract in order to create Chainlink Functions requests","version":1}}},"contracts/lib/dev/interfaces/FunctionsBillingRegistryInterface.sol":{"FunctionsBillingRegistryInterface":{"abi":[{"inputs":[{"internalType":"uint32","name":"gasLimit","type":"uint32"},{"internalType":"uint256","name":"gasPrice","type":"uint256"},{"internalType":"uint96","name":"donFee","type":"uint96"},{"internalType":"uint96","name":"registryFee","type":"uint96"}],"name":"estimateCost","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"bytes","name":"response","type":"bytes"},{"internalType":"bytes","name":"err","type":"bytes"},{"internalType":"address","name":"transmitter","type":"address"},{"internalType":"address[31]","name":"signers","type":"address[31]"},{"internalType":"uint8","name":"signerCount","type":"uint8"},{"internalType":"uint256","name":"reportValidationGas","type":"uint256"},{"internalType":"uint256","name":"initialGas","type":"uint256"}],"name":"fulfillAndBill","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"address","name":"client","type":"address"},{"internalType":"uint32","name":"gasLimit","type":"uint32"},{"internalType":"uint256","name":"gasPrice","type":"uint256"}],"internalType":"struct FunctionsBillingRegistryInterface.RequestBilling","name":"billing","type":"tuple"}],"name":"getRequiredFee","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"}],"name":"getSubscriptionOwner","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"address","name":"client","type":"address"},{"internalType":"uint32","name":"gasLimit","type":"uint32"},{"internalType":"uint256","name":"gasPrice","type":"uint256"}],"internalType":"struct FunctionsBillingRegistryInterface.RequestBilling","name":"billing","type":"tuple"}],"name":"startBilling","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"estimateCost(uint32,uint256,uint96,uint96)":{"params":{"donFee":"Fee charged by the DON that is paid to Oracle Node","gasLimit":"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request","gasPrice":"The request's billing configuration","registryFee":"Fee charged by the DON that is paid to Oracle Node"},"returns":{"_0":"costEstimate Cost in Juels (1e18) of LINK"}},"fulfillAndBill(bytes32,bytes,bytes,address,address[31],uint8,uint256,uint256)":{"details":"Only callable by a node that has been approved on the Registrysimulated offchain to determine if sufficient balance is present to fulfill the request","params":{"err":"error from DON consensus","initialGas":"the initial amount of gas that should be used as a baseline to charge the single fulfillment for execution cost","reportValidationGas":"the amount of gas used for the report validation. Cost is split by all fulfillments on the report.","requestId":"identifier for the request that was generated by the Registry in the beginBilling commitment","response":"response data from DON consensus","signerCount":"the number of signers on the report","signers":"the Oracles who had a part in generating the report","transmitter":"the Oracle who sent the report"},"returns":{"success":"whether the callback was successsful"}},"getRequestConfig()":{"returns":{"_0":"uint32 global max for request gas limit","_1":"address[] list of registered DONs"}},"getRequiredFee(bytes,(uint64,address,uint32,uint256))":{"params":{"billing":"The request's billing configuration","data":"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request"},"returns":{"_0":"fee Cost in Juels (1e18) of LINK"}},"getSubscriptionOwner(uint64)":{"params":{"subscriptionId":"- ID of the subscription"},"returns":{"owner":"- owner of the subscription."}},"startBilling(bytes,(uint64,address,uint32,uint256))":{"details":"Only callable by a node that has been approved on the Registry","params":{"billing":"Billing configuration for the request","data":"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request"},"returns":{"_0":"requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest."}}},"title":"Chainlink Functions billing subscription registry interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"estimateCost(uint32,uint256,uint96,uint96)":"a1a6d041","fulfillAndBill(bytes32,bytes,bytes,address,address[31],uint8,uint256,uint256)":"0739e4f1","getRequestConfig()":"00012291","getRequiredFee(bytes,(uint64,address,uint32,uint256))":"f1e14a21","getSubscriptionOwner(uint64)":"b2a489ff","startBilling(bytes,(uint64,address,uint32,uint256))":"a9d03c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"donFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"registryFee\",\"type\":\"uint96\"}],\"name\":\"estimateCost\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"internalType\":\"address[31]\",\"name\":\"signers\",\"type\":\"address[31]\"},{\"internalType\":\"uint8\",\"name\":\"signerCount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reportValidationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialGas\",\"type\":\"uint256\"}],\"name\":\"fulfillAndBill\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FunctionsBillingRegistryInterface.RequestBilling\",\"name\":\"billing\",\"type\":\"tuple\"}],\"name\":\"getRequiredFee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"name\":\"getSubscriptionOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FunctionsBillingRegistryInterface.RequestBilling\",\"name\":\"billing\",\"type\":\"tuple\"}],\"name\":\"startBilling\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"estimateCost(uint32,uint256,uint96,uint96)\":{\"params\":{\"donFee\":\"Fee charged by the DON that is paid to Oracle Node\",\"gasLimit\":\"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\",\"gasPrice\":\"The request's billing configuration\",\"registryFee\":\"Fee charged by the DON that is paid to Oracle Node\"},\"returns\":{\"_0\":\"costEstimate Cost in Juels (1e18) of LINK\"}},\"fulfillAndBill(bytes32,bytes,bytes,address,address[31],uint8,uint256,uint256)\":{\"details\":\"Only callable by a node that has been approved on the Registrysimulated offchain to determine if sufficient balance is present to fulfill the request\",\"params\":{\"err\":\"error from DON consensus\",\"initialGas\":\"the initial amount of gas that should be used as a baseline to charge the single fulfillment for execution cost\",\"reportValidationGas\":\"the amount of gas used for the report validation. Cost is split by all fulfillments on the report.\",\"requestId\":\"identifier for the request that was generated by the Registry in the beginBilling commitment\",\"response\":\"response data from DON consensus\",\"signerCount\":\"the number of signers on the report\",\"signers\":\"the Oracles who had a part in generating the report\",\"transmitter\":\"the Oracle who sent the report\"},\"returns\":{\"success\":\"whether the callback was successsful\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"uint32 global max for request gas limit\",\"_1\":\"address[] list of registered DONs\"}},\"getRequiredFee(bytes,(uint64,address,uint32,uint256))\":{\"params\":{\"billing\":\"The request's billing configuration\",\"data\":\"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\"},\"returns\":{\"_0\":\"fee Cost in Juels (1e18) of LINK\"}},\"getSubscriptionOwner(uint64)\":{\"params\":{\"subscriptionId\":\"- ID of the subscription\"},\"returns\":{\"owner\":\"- owner of the subscription.\"}},\"startBilling(bytes,(uint64,address,uint32,uint256))\":{\"details\":\"Only callable by a node that has been approved on the Registry\",\"params\":{\"billing\":\"Billing configuration for the request\",\"data\":\"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\"},\"returns\":{\"_0\":\"requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest.\"}}},\"title\":\"Chainlink Functions billing subscription registry interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"estimateCost(uint32,uint256,uint96,uint96)\":{\"notice\":\"Estimate the total cost to make a request: gas re-imbursement, plus DON fee, plus Registry fee\"},\"fulfillAndBill(bytes32,bytes,bytes,address,address[31],uint8,uint256,uint256)\":{\"notice\":\"Finalize billing process for an Functions request by sending a callback to the Client contract and then charging the subscription\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getRequiredFee(bytes,(uint64,address,uint32,uint256))\":{\"notice\":\"Determine the charged fee that will be paid to the Registry owner\"},\"getSubscriptionOwner(uint64)\":{\"notice\":\"Gets subscription owner.\"},\"startBilling(bytes,(uint64,address,uint32,uint256))\":{\"notice\":\"Initiate the billing process for an Functions request\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/dev/interfaces/FunctionsBillingRegistryInterface.sol\":\"FunctionsBillingRegistryInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/lib/dev/interfaces/FunctionsBillingRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions billing subscription registry interface.\\n */\\ninterface FunctionsBillingRegistryInterface {\\n  struct RequestBilling {\\n    // a unique subscription ID allocated by billing system,\\n    uint64 subscriptionId;\\n    // the client contract that initiated the request to the DON\\n    // to use the subscription it must be added as a consumer on the subscription\\n    address client;\\n    // customer specified gas limit for the fulfillment callback\\n    uint32 gasLimit;\\n    // the expected gas price used to execute the transaction\\n    uint256 gasPrice;\\n  }\\n\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return uint32 global max for request gas limit\\n   * @return address[] list of registered DONs\\n   */\\n  function getRequestConfig() external view returns (uint32, address[] memory);\\n\\n  /**\\n   * @notice Determine the charged fee that will be paid to the Registry owner\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling memory billing)\\n    external\\n    view\\n    returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param gasLimit Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasPrice The request's billing configuration\\n   * @param donFee Fee charged by the DON that is paid to Oracle Node\\n   * @param registryFee Fee charged by the DON that is paid to Oracle Node\\n   * @return costEstimate Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint32 gasLimit,\\n    uint256 gasPrice,\\n    uint96 donFee,\\n    uint96 registryFee\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Initiate the billing process for an Functions request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing Billing configuration for the request\\n   * @return requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest.\\n   * @dev Only callable by a node that has been approved on the Registry\\n   */\\n  function startBilling(bytes calldata data, RequestBilling calldata billing) external returns (bytes32);\\n\\n  /**\\n   * @notice Finalize billing process for an Functions request by sending a callback to the Client contract and then charging the subscription\\n   * @param requestId identifier for the request that was generated by the Registry in the beginBilling commitment\\n   * @param response response data from DON consensus\\n   * @param err error from DON consensus\\n   * @param transmitter the Oracle who sent the report\\n   * @param signers the Oracles who had a part in generating the report\\n   * @param signerCount the number of signers on the report\\n   * @param reportValidationGas the amount of gas used for the report validation. Cost is split by all fulfillments on the report.\\n   * @param initialGas the initial amount of gas that should be used as a baseline to charge the single fulfillment for execution cost\\n   * @return success whether the callback was successsful\\n   * @dev Only callable by a node that has been approved on the Registry\\n   * @dev simulated offchain to determine if sufficient balance is present to fulfill the request\\n   */\\n  function fulfillAndBill(\\n    bytes32 requestId,\\n    bytes calldata response,\\n    bytes calldata err,\\n    address transmitter,\\n    address[31] memory signers, // 31 comes from OCR2Abstract.sol's maxNumOracles constant\\n    uint8 signerCount,\\n    uint256 reportValidationGas,\\n    uint256 initialGas\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Gets subscription owner.\\n   * @param subscriptionId - ID of the subscription\\n   * @return owner - owner of the subscription.\\n   */\\n  function getSubscriptionOwner(uint64 subscriptionId) external view returns (address owner);\\n}\\n\",\"keccak256\":\"0xac8c00e6634411559840e1962826ece125dd631879e7458897e573ec85cf7490\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"estimateCost(uint32,uint256,uint96,uint96)":{"notice":"Estimate the total cost to make a request: gas re-imbursement, plus DON fee, plus Registry fee"},"fulfillAndBill(bytes32,bytes,bytes,address,address[31],uint8,uint256,uint256)":{"notice":"Finalize billing process for an Functions request by sending a callback to the Client contract and then charging the subscription"},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getRequiredFee(bytes,(uint64,address,uint32,uint256))":{"notice":"Determine the charged fee that will be paid to the Registry owner"},"getSubscriptionOwner(uint64)":{"notice":"Gets subscription owner."},"startBilling(bytes,(uint64,address,uint32,uint256))":{"notice":"Initiate the billing process for an Functions request"}},"version":1}}},"contracts/lib/dev/interfaces/FunctionsClientInterface.sol":{"FunctionsClientInterface":{"abi":[{"inputs":[],"name":"getDONPublicKey","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"bytes","name":"response","type":"bytes"},{"internalType":"bytes","name":"err","type":"bytes"}],"name":"handleOracleFulfillment","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"getDONPublicKey()":{"details":"All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key","returns":{"_0":"publicKey DON's public key"}},"handleOracleFulfillment(bytes32,bytes,bytes)":{"params":{"err":"Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.","requestId":"The requestId returned by FunctionsClient.sendRequest().","response":"Aggregated response from the user code."}}},"title":"Chainlink Functions client interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getDONPublicKey()":"d328a91e","handleOracleFulfillment(bytes32,bytes,bytes)":"0ca76175"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getDONPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getDONPublicKey()\":{\"details\":\"All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key\",\"returns\":{\"_0\":\"publicKey DON's public key\"}},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"params\":{\"err\":\"Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the user code.\"}}},\"title\":\"Chainlink Functions client interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDONPublicKey()\":{\"notice\":\"Returns the DON's secp256k1 public key used to encrypt secrets\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the designated transmitter node in an OCR round.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/dev/interfaces/FunctionsClientInterface.sol\":\"FunctionsClientInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/lib/dev/interfaces/FunctionsClientInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions client interface.\\n */\\ninterface FunctionsClientInterface {\\n  /**\\n   * @notice Returns the DON's secp256k1 public key used to encrypt secrets\\n   * @dev All Oracles nodes have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Chainlink Functions response handler called by the designated transmitter node in an OCR round.\\n   * @param requestId The requestId returned by FunctionsClient.sendRequest().\\n   * @param response Aggregated response from the user code.\\n   * @param err Aggregated error either from the user code or from the execution pipeline.\\n   * Either response or error parameter will be set, but never both.\\n   */\\n  function handleOracleFulfillment(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd5c899b894dc62548149681ee46f2027a6dac18eea67663069e496ea48e4f1fb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"getDONPublicKey()":{"notice":"Returns the DON's secp256k1 public key used to encrypt secrets"},"handleOracleFulfillment(bytes32,bytes,bytes)":{"notice":"Chainlink Functions response handler called by the designated transmitter node in an OCR round."}},"version":1}}},"contracts/lib/dev/interfaces/FunctionsOracleInterface.sol":{"FunctionsOracleInterface":{"abi":[{"inputs":[{"internalType":"address","name":"node","type":"address"}],"name":"deleteNodePublicKey","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint32","name":"gasLimit","type":"uint32"},{"internalType":"uint256","name":"gasPrice","type":"uint256"}],"name":"estimateCost","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAllNodePublicKeys","outputs":[{"internalType":"address[]","name":"","type":"address[]"},{"internalType":"bytes[]","name":"","type":"bytes[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDONPublicKey","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRegistry","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"components":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"address","name":"client","type":"address"},{"internalType":"uint32","name":"gasLimit","type":"uint32"},{"internalType":"uint256","name":"gasPrice","type":"uint256"}],"internalType":"struct FunctionsBillingRegistryInterface.RequestBilling","name":"billing","type":"tuple"}],"name":"getRequiredFee","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint32","name":"gasLimit","type":"uint32"},{"internalType":"uint256","name":"gasPrice","type":"uint256"}],"name":"sendRequest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"donPublicKey","type":"bytes"}],"name":"setDONPublicKey","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"node","type":"address"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"name":"setNodePublicKey","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"registryAddress","type":"address"}],"name":"setRegistry","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"deleteNodePublicKey(address)":{"details":"Callable only by contract owner or the node itself","params":{"node":"node's address"}},"estimateCost(uint64,bytes,uint32,uint256)":{"params":{"data":"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request","gasLimit":"Gas limit for the fulfillment callback","subscriptionId":"A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription"},"returns":{"_0":"billedCost Cost in Juels (1e18) of LINK"}},"getDONPublicKey()":{"details":"All nodes on the DON have the corresponding private key needed to decrypt the secrets encrypted with the public key","returns":{"_0":"publicKey the DON's public key"}},"getRegistry()":{"returns":{"_0":"registryAddress The address of Chainlink Functions billing registry contract"}},"getRequiredFee(bytes,(uint64,address,uint32,uint256))":{"params":{"billing":"The request's billing configuration","data":"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request"},"returns":{"_0":"fee Cost in Juels (1e18) of LINK"}},"sendRequest(uint64,bytes,uint32,uint256)":{"params":{"data":"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request","gasLimit":"Gas limit for the fulfillment callback","subscriptionId":"A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription"},"returns":{"_0":"requestId A unique request identifier (unique per DON)"}},"setDONPublicKey(bytes)":{"details":"Used to rotate the key","params":{"donPublicKey":"The new public key"}},"setNodePublicKey(address,bytes)":{"details":"Callable only by contract owner and DON members","params":{"node":"node's address","publicKey":"node's public key"}},"setRegistry(address)":{"params":{"registryAddress":"The new address of Chainlink Functions billing registry contract"}}},"title":"Chainlink Functions oracle interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deleteNodePublicKey(address)":"26ceabac","estimateCost(uint64,bytes,uint32,uint256)":"d227d245","getAllNodePublicKeys()":"53398987","getDONPublicKey()":"d328a91e","getRegistry()":"5ab1bd53","getRequiredFee(bytes,(uint64,address,uint32,uint256))":"f1e14a21","sendRequest(uint64,bytes,uint32,uint256)":"a98eb206","setDONPublicKey(bytes)":"7f15e166","setNodePublicKey(address,bytes)":"80756031","setRegistry(address)":"a91ee0dc"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"deleteNodePublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"estimateCost\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNodePublicKeys\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDONPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FunctionsBillingRegistryInterface.RequestBilling\",\"name\":\"billing\",\"type\":\"tuple\"}],\"name\":\"getRequiredFee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"sendRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"donPublicKey\",\"type\":\"bytes\"}],\"name\":\"setDONPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"setNodePublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deleteNodePublicKey(address)\":{\"details\":\"Callable only by contract owner or the node itself\",\"params\":{\"node\":\"node's address\"}},\"estimateCost(uint64,bytes,uint32,uint256)\":{\"params\":{\"data\":\"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\",\"gasLimit\":\"Gas limit for the fulfillment callback\",\"subscriptionId\":\"A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription\"},\"returns\":{\"_0\":\"billedCost Cost in Juels (1e18) of LINK\"}},\"getDONPublicKey()\":{\"details\":\"All nodes on the DON have the corresponding private key needed to decrypt the secrets encrypted with the public key\",\"returns\":{\"_0\":\"publicKey the DON's public key\"}},\"getRegistry()\":{\"returns\":{\"_0\":\"registryAddress The address of Chainlink Functions billing registry contract\"}},\"getRequiredFee(bytes,(uint64,address,uint32,uint256))\":{\"params\":{\"billing\":\"The request's billing configuration\",\"data\":\"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\"},\"returns\":{\"_0\":\"fee Cost in Juels (1e18) of LINK\"}},\"sendRequest(uint64,bytes,uint32,uint256)\":{\"params\":{\"data\":\"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\",\"gasLimit\":\"Gas limit for the fulfillment callback\",\"subscriptionId\":\"A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription\"},\"returns\":{\"_0\":\"requestId A unique request identifier (unique per DON)\"}},\"setDONPublicKey(bytes)\":{\"details\":\"Used to rotate the key\",\"params\":{\"donPublicKey\":\"The new public key\"}},\"setNodePublicKey(address,bytes)\":{\"details\":\"Callable only by contract owner and DON members\",\"params\":{\"node\":\"node's address\",\"publicKey\":\"node's public key\"}},\"setRegistry(address)\":{\"params\":{\"registryAddress\":\"The new address of Chainlink Functions billing registry contract\"}}},\"title\":\"Chainlink Functions oracle interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deleteNodePublicKey(address)\":{\"notice\":\"Deletes node's public key\"},\"estimateCost(uint64,bytes,uint32,uint256)\":{\"notice\":\"Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\"},\"getAllNodePublicKeys()\":{\"notice\":\"Return two arrays of equal size containing DON members' addresses and their corresponding public keys (or empty byte arrays if per-node key is not defined)\"},\"getDONPublicKey()\":{\"notice\":\"Returns the DON's secp256k1 public key that is used to encrypt secrets\"},\"getRegistry()\":{\"notice\":\"Gets the stored billing registry address\"},\"getRequiredFee(bytes,(uint64,address,uint32,uint256))\":{\"notice\":\"Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request\"},\"sendRequest(uint64,bytes,uint32,uint256)\":{\"notice\":\"Sends a request (encoded as data) using the provided subscriptionId\"},\"setDONPublicKey(bytes)\":{\"notice\":\"Sets DON's secp256k1 public key used to encrypt secrets\"},\"setNodePublicKey(address,bytes)\":{\"notice\":\"Sets a per-node secp256k1 public key used to encrypt secrets for that node\"},\"setRegistry(address)\":{\"notice\":\"Sets the stored billing registry address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/dev/interfaces/FunctionsOracleInterface.sol\":\"FunctionsOracleInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/lib/dev/interfaces/FunctionsBillingRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions billing subscription registry interface.\\n */\\ninterface FunctionsBillingRegistryInterface {\\n  struct RequestBilling {\\n    // a unique subscription ID allocated by billing system,\\n    uint64 subscriptionId;\\n    // the client contract that initiated the request to the DON\\n    // to use the subscription it must be added as a consumer on the subscription\\n    address client;\\n    // customer specified gas limit for the fulfillment callback\\n    uint32 gasLimit;\\n    // the expected gas price used to execute the transaction\\n    uint256 gasPrice;\\n  }\\n\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return uint32 global max for request gas limit\\n   * @return address[] list of registered DONs\\n   */\\n  function getRequestConfig() external view returns (uint32, address[] memory);\\n\\n  /**\\n   * @notice Determine the charged fee that will be paid to the Registry owner\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling memory billing)\\n    external\\n    view\\n    returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param gasLimit Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasPrice The request's billing configuration\\n   * @param donFee Fee charged by the DON that is paid to Oracle Node\\n   * @param registryFee Fee charged by the DON that is paid to Oracle Node\\n   * @return costEstimate Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint32 gasLimit,\\n    uint256 gasPrice,\\n    uint96 donFee,\\n    uint96 registryFee\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Initiate the billing process for an Functions request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing Billing configuration for the request\\n   * @return requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest.\\n   * @dev Only callable by a node that has been approved on the Registry\\n   */\\n  function startBilling(bytes calldata data, RequestBilling calldata billing) external returns (bytes32);\\n\\n  /**\\n   * @notice Finalize billing process for an Functions request by sending a callback to the Client contract and then charging the subscription\\n   * @param requestId identifier for the request that was generated by the Registry in the beginBilling commitment\\n   * @param response response data from DON consensus\\n   * @param err error from DON consensus\\n   * @param transmitter the Oracle who sent the report\\n   * @param signers the Oracles who had a part in generating the report\\n   * @param signerCount the number of signers on the report\\n   * @param reportValidationGas the amount of gas used for the report validation. Cost is split by all fulfillments on the report.\\n   * @param initialGas the initial amount of gas that should be used as a baseline to charge the single fulfillment for execution cost\\n   * @return success whether the callback was successsful\\n   * @dev Only callable by a node that has been approved on the Registry\\n   * @dev simulated offchain to determine if sufficient balance is present to fulfill the request\\n   */\\n  function fulfillAndBill(\\n    bytes32 requestId,\\n    bytes calldata response,\\n    bytes calldata err,\\n    address transmitter,\\n    address[31] memory signers, // 31 comes from OCR2Abstract.sol's maxNumOracles constant\\n    uint8 signerCount,\\n    uint256 reportValidationGas,\\n    uint256 initialGas\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Gets subscription owner.\\n   * @param subscriptionId - ID of the subscription\\n   * @return owner - owner of the subscription.\\n   */\\n  function getSubscriptionOwner(uint64 subscriptionId) external view returns (address owner);\\n}\\n\",\"keccak256\":\"0xac8c00e6634411559840e1962826ece125dd631879e7458897e573ec85cf7490\",\"license\":\"MIT\"},\"contracts/lib/dev/interfaces/FunctionsOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./FunctionsBillingRegistryInterface.sol\\\";\\n\\n/**\\n * @title Chainlink Functions oracle interface.\\n */\\ninterface FunctionsOracleInterface {\\n  /**\\n   * @notice Gets the stored billing registry address\\n   * @return registryAddress The address of Chainlink Functions billing registry contract\\n   */\\n  function getRegistry() external view returns (address);\\n\\n  /**\\n   * @notice Sets the stored billing registry address\\n   * @param registryAddress The new address of Chainlink Functions billing registry contract\\n   */\\n  function setRegistry(address registryAddress) external;\\n\\n  /**\\n   * @notice Returns the DON's secp256k1 public key that is used to encrypt secrets\\n   * @dev All nodes on the DON have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey the DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Sets DON's secp256k1 public key used to encrypt secrets\\n   * @dev Used to rotate the key\\n   * @param donPublicKey The new public key\\n   */\\n  function setDONPublicKey(bytes calldata donPublicKey) external;\\n\\n  /**\\n   * @notice Sets a per-node secp256k1 public key used to encrypt secrets for that node\\n   * @dev Callable only by contract owner and DON members\\n   * @param node node's address\\n   * @param publicKey node's public key\\n   */\\n  function setNodePublicKey(address node, bytes calldata publicKey) external;\\n\\n  /**\\n   * @notice Deletes node's public key\\n   * @dev Callable only by contract owner or the node itself\\n   * @param node node's address\\n   */\\n  function deleteNodePublicKey(address node) external;\\n\\n  /**\\n   * @notice Return two arrays of equal size containing DON members' addresses and their corresponding\\n   * public keys (or empty byte arrays if per-node key is not defined)\\n   */\\n  function getAllNodePublicKeys() external view returns (address[] memory, bytes[] memory);\\n\\n  /**\\n   * @notice Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling calldata billing)\\n    external\\n    view\\n    returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return billedCost Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Sends a request (encoded as data) using the provided subscriptionId\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return requestId A unique request identifier (unique per DON)\\n   */\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe53e646881ffadf7ad331cb42ba4e6c91232c1b8c4544ebc292a139deb8a0cff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"deleteNodePublicKey(address)":{"notice":"Deletes node's public key"},"estimateCost(uint64,bytes,uint32,uint256)":{"notice":"Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee"},"getAllNodePublicKeys()":{"notice":"Return two arrays of equal size containing DON members' addresses and their corresponding public keys (or empty byte arrays if per-node key is not defined)"},"getDONPublicKey()":{"notice":"Returns the DON's secp256k1 public key that is used to encrypt secrets"},"getRegistry()":{"notice":"Gets the stored billing registry address"},"getRequiredFee(bytes,(uint64,address,uint32,uint256))":{"notice":"Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request"},"sendRequest(uint64,bytes,uint32,uint256)":{"notice":"Sends a request (encoded as data) using the provided subscriptionId"},"setDONPublicKey(bytes)":{"notice":"Sets DON's secp256k1 public key used to encrypt secrets"},"setNodePublicKey(address,bytes)":{"notice":"Sets a per-node secp256k1 public key used to encrypt secrets for that node"},"setRegistry(address)":{"notice":"Sets the stored billing registry address"}},"version":1}}}}}}