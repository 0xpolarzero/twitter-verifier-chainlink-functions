{
  "address": "0xdb4c4c35E9B59a48E9931476753f5A183cD7280d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestIsAlreadyPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestIsNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotRegistry",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "OCRResponse",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Functions.Location",
              "name": "codeLocation",
              "type": "uint8"
            },
            {
              "internalType": "enum Functions.Location",
              "name": "secretsLocation",
              "type": "uint8"
            },
            {
              "internalType": "enum Functions.CodeLanguage",
              "name": "language",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "source",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "secrets",
              "type": "bytes"
            },
            {
              "internalType": "string[]",
              "name": "args",
              "type": "string[]"
            }
          ],
          "internalType": "struct Functions.Request",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        }
      ],
      "name": "estimateCost",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "secrets",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "args",
          "type": "string[]"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        }
      ],
      "name": "executeRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDONPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestError",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestResponse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "updateOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xde2bed2796f39c000962b7ff5050d05b01bb26bd7abcea8003116d662a1da8c6",
  "receipt": {
    "to": null,
    "from": "0xc06d127E504a944f63Bc750D8F512556c576F3EF",
    "contractAddress": "0xdb4c4c35E9B59a48E9931476753f5A183cD7280d",
    "transactionIndex": 5,
    "gasUsed": "1567569",
    "logsBloom": "0x
    "blockHash": "0x8da428a832ce679280c4b738c37c15c6cec19e3ebb056a1e5ac20500d1ea6577",
    "transactionHash": "0xde2bed2796f39c000962b7ff5050d05b01bb26bd7abcea8003116d662a1da8c6",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 31354357,
        "transactionHash": "0xde2bed2796f39c000962b7ff5050d05b01bb26bd7abcea8003116d662a1da8c6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c06d127e504a944f63bc750d8f512556c576f3ef",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000085a8b261bdf00000000000000000000000000000000000000000000000000133ce0c6315c549b000000000000000000000000000000000000000000002903f057b0509ed801a30000000000000000000000000000000000000000000000001334863b0b40759b000000000000000000000000000000000000000000002903f0600adbc4f3e0a3",
        "logIndex": 10,
        "blockHash": "0x8da428a832ce679280c4b738c37c15c6cec19e3ebb056a1e5ac20500d1ea6577"
      }
    ],
    "blockNumber": 31354357,
    "cumulativeGasUsed": "1847224",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6199175d137B791B7AB06C3452aa6acc3519b254"
  ],
  "numDeployments": 2,
  "solcInputHash": "4d9b0dded2d7ed0b152f534b9ba65908",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestIsAlreadyPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestIsNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotRegistry\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"OCRResponse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Functions.Location\",\"name\":\"codeLocation\",\"type\":\"uint8\"},{\"internalType\":\"enum Functions.Location\",\"name\":\"secretsLocation\",\"type\":\"uint8\"},{\"internalType\":\"enum Functions.CodeLanguage\",\"name\":\"language\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"secrets\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"internalType\":\"struct Functions.Request\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"estimateCost\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"secrets\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"name\":\"executeRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDONPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"updateOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"oracle\":\"- The FunctionsOracle contract\"}},\"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)\":{\"params\":{\"gasLimit\":\"gas limit for the fulfillment callback\",\"req\":\"The initialized Functions.Request\",\"subscriptionId\":\"The subscription ID\"},\"returns\":{\"_0\":\"billedCost Cost in Juels (1e18) of LINK\"}},\"executeRequest(string,bytes,string[],uint64,uint32)\":{\"params\":{\"args\":\"List of arguments accessible from within the source code\",\"secrets\":\"Encrypted secrets payload\",\"source\":\"JavaScript source code\",\"subscriptionId\":\"Billing ID\"}},\"getDONPublicKey()\":{\"details\":\"All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key\",\"returns\":{\"_0\":\"publicKey DON's public key\"}},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"params\":{\"err\":\"Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the user code.\"}}},\"title\":\"Functions Copns contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"constructor\":{\"notice\":\"Executes once when a contract is created to initialize state variables\"},\"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)\":{\"notice\":\"Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\"},\"executeRequest(string,bytes,string[],uint64,uint32)\":{\"notice\":\"Send a simple request\"},\"getDONPublicKey()\":{\"notice\":\"Returns the DON's secp256k1 public key used to encrypt secrets\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the designated transmitter node in an OCR round.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"This contract is a demonstration of using Functions.NOT FOR PRODUCTION USE\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TwitterVerifier.sol\":\"TwitterVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"contracts/TwitterVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./lib/dev/functions/FunctionsClient.sol\\\";\\n// import \\\"@chainlink/contracts/src/v0.8/dev/functions/FunctionsClient.sol\\\"; // Once published\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\nimport \\\"./utils/AddressToString.sol\\\";\\n\\n/**\\n * @title Functions Copns contract\\n * @notice This contract is a demonstration of using Functions.\\n * @notice NOT FOR PRODUCTION USE\\n */\\ncontract TwitterVerifier is FunctionsClient, ConfirmedOwner {\\n    using Functions for Functions.Request;\\n\\n    bytes32 public latestRequestId;\\n    bytes public latestResponse;\\n    bytes public latestError;\\n\\n    event OCRResponse(bytes32 indexed requestId, bytes result, bytes err);\\n\\n    /**\\n     * @notice Executes once when a contract is created to initialize state variables\\n     *\\n     * @param oracle - The FunctionsOracle contract\\n     */\\n    constructor(\\n        address oracle\\n    ) FunctionsClient(oracle) ConfirmedOwner(msg.sender) {}\\n\\n    /**\\n     * @notice Send a simple request\\n     * @param source JavaScript source code\\n     * @param secrets Encrypted secrets payload\\n     * @param args List of arguments accessible from within the source code\\n     * @param subscriptionId Billing ID\\n     */\\n    function executeRequest(\\n        string calldata source,\\n        bytes calldata secrets,\\n        string[] calldata args,\\n        uint64 subscriptionId,\\n        uint32 gasLimit\\n    ) public onlyOwner returns (bytes32) {\\n        Functions.Request memory req;\\n        req.initializeRequest(\\n            Functions.Location.Inline,\\n            Functions.CodeLanguage.JavaScript,\\n            source\\n        );\\n        if (secrets.length > 0) req.addInlineSecrets(secrets);\\n\\n        // The following is how we would add some arguments provided in the contract\\n        // to the request\\n        // In this case, it is not necessary, since the msg.sender will always\\n        // be the owner, and not the user\\n        // - Turn the sender address into a string\\n        // string memory sender = addressToString(msg.sender);\\n        // - And add it to the args\\n        // string[] memory newArgs = new string[](args.length + 1);\\n        // for (uint256 i = 0; i < args.length; i++) {\\n        // newArgs[i] = args[i];\\n        // }\\n        // newArgs[args.length] = sender;\\n\\n        // req.addArgs(newArgs);\\n        req.addArgs(args);\\n\\n        bytes32 assignedReqID = sendRequest(\\n            req,\\n            subscriptionId,\\n            gasLimit,\\n            tx.gasprice\\n        );\\n        latestRequestId = assignedReqID;\\n        return assignedReqID;\\n    }\\n\\n    /**\\n     * @notice Callback that is invoked once the DON has resolved the request or hit an error\\n     *\\n     * @param requestId The request ID, returned by sendRequest()\\n     * @param response Aggregated response from the user code\\n     * @param err Aggregated error from the user code or from the execution pipeline\\n     * Either response or error parameter will be set, but never both\\n     */\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        bytes memory response,\\n        bytes memory err\\n    ) internal override {\\n        // revert('test');\\n        latestResponse = response;\\n        latestError = err;\\n        emit OCRResponse(requestId, response, err);\\n    }\\n\\n    function updateOracleAddress(address oracle) public onlyOwner {\\n        setOracle(oracle);\\n    }\\n}\\n\",\"keccak256\":\"0x6649061a7d397296fe5a678ea9e4280af59a66067ef44fa56af45736b75ccf16\",\"license\":\"MIT\"},\"contracts/lib/dev/functions/Functions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport {CBORChainlink} from \\\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for Chainlink Functions\\n */\\nlibrary Functions {\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  enum Location {\\n    Inline,\\n    Remote\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation;\\n    Location secretsLocation;\\n    CodeLanguage language;\\n    string source; // Source code for Location.Inline or url for Location.Remote\\n    bytes secrets; // Encrypted secrets blob for Location.Inline or url for Location.Remote\\n    string[] args;\\n  }\\n\\n  error EmptySource();\\n  error EmptyUrl();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n\\n  /**\\n   * @notice Encodes a Request to CBOR encoded bytes\\n   * @param self The request to encode\\n   * @return CBOR encoded bytes\\n   */\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    BufferChainlink.buffer memory buf;\\n    BufferChainlink.init(buf, DEFAULT_BUFFER_SIZE);\\n\\n    buf.encodeString(\\\"codeLocation\\\");\\n    buf.encodeUInt(uint256(self.codeLocation));\\n\\n    buf.encodeString(\\\"language\\\");\\n    buf.encodeUInt(uint256(self.language));\\n\\n    buf.encodeString(\\\"source\\\");\\n    buf.encodeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buf.encodeString(\\\"args\\\");\\n      buf.startArray();\\n      for (uint256 i = 0; i < self.args.length; i++) {\\n        buf.encodeString(self.args[i]);\\n      }\\n      buf.endSequence();\\n    }\\n\\n    if (self.secrets.length > 0) {\\n      buf.encodeString(\\\"secretsLocation\\\");\\n      buf.encodeUInt(uint256(self.secretsLocation));\\n      buf.encodeString(\\\"secrets\\\");\\n      buf.encodeBytes(self.secrets);\\n    }\\n\\n    return buf.buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Sets the codeLocation and code on the request\\n   * @param self The uninitialized request\\n   * @param location The user provided source code location\\n   * @param language The programming language of the user code\\n   * @param source The user provided source code or a url\\n   */\\n  function initializeRequest(\\n    Request memory self,\\n    Location location,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = location;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Simplified version of initializeRequest for PoC\\n   * @param self The uninitialized request\\n   * @param javaScriptSource The user provided JS code (must not be empty)\\n   */\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /**\\n   * @notice Adds user encrypted secrets to a Request\\n   * @param self The initialized request\\n   * @param secrets The user encrypted secrets (must not be empty)\\n   */\\n  function addInlineSecrets(Request memory self, bytes memory secrets) internal pure {\\n    if (secrets.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Inline;\\n    self.secrets = secrets;\\n  }\\n\\n  /**\\n   * @notice Adds args for the user run function\\n   * @param self The initialized request\\n   * @param args The array of args (must not be empty)\\n   */\\n  function addArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n}\\n\",\"keccak256\":\"0x2d0a77965c1e058bca11725a9a47328678aacffdcc8cf9bb02b03f059d98540c\",\"license\":\"MIT\"},\"contracts/lib/dev/functions/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./Functions.sol\\\";\\nimport \\\"../interfaces/FunctionsClientInterface.sol\\\";\\nimport \\\"../interfaces/FunctionsOracleInterface.sol\\\";\\n\\n/**\\n * @title The Chainlink Functions client contract\\n * @notice Contract writers can inherit this contract in order to create Chainlink Functions requests\\n */\\nabstract contract FunctionsClient is FunctionsClientInterface {\\n  FunctionsOracleInterface private s_oracle;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error SenderIsNotRegistry();\\n  error RequestIsAlreadyPending();\\n  error RequestIsNotPending();\\n\\n  constructor(address oracle) {\\n    setOracle(oracle);\\n  }\\n\\n  /**\\n   * @inheritdoc FunctionsClientInterface\\n   */\\n  function getDONPublicKey() external view override returns (bytes memory) {\\n    return s_oracle.getDONPublicKey();\\n  }\\n\\n  /**\\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param req The initialized Functions.Request\\n   * @param subscriptionId The subscription ID\\n   * @param gasLimit gas limit for the fulfillment callback\\n   * @return billedCost Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    Functions.Request memory req,\\n    uint64 subscriptionId,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) public view returns (uint96) {\\n    return s_oracle.estimateCost(subscriptionId, Functions.encodeCBOR(req), gasLimit, gasPrice);\\n  }\\n\\n  /**\\n   * @notice Sends a Chainlink Functions request to the stored oracle address\\n   * @param req The initialized Functions.Request\\n   * @param subscriptionId The subscription ID\\n   * @param gasLimit gas limit for the fulfillment callback\\n   * @return requestId The generated request ID\\n   */\\n  function sendRequest(\\n    Functions.Request memory req,\\n    uint64 subscriptionId,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = s_oracle.sendRequest(subscriptionId, Functions.encodeCBOR(req), gasLimit, gasPrice);\\n    s_pendingRequests[requestId] = s_oracle.getRegistry();\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /**\\n   * @notice User defined function to handle a response\\n   * @param requestId The request ID, returned by sendRequest()\\n   * @param response Aggregated response from the user code\\n   * @param err Aggregated error from the user code or from the execution pipeline\\n   * Either response or error parameter will be set, but never both\\n   */\\n  function fulfillRequest(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) internal virtual;\\n\\n  /**\\n   * @inheritdoc FunctionsClientInterface\\n   */\\n  function handleOracleFulfillment(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) external override recordChainlinkFulfillment(requestId) {\\n    fulfillRequest(requestId, response, err);\\n  }\\n\\n  /**\\n   * @notice Sets the stored Oracle address\\n   * @param oracle The address of Functions Oracle contract\\n   */\\n  function setOracle(address oracle) internal {\\n    s_oracle = FunctionsOracleInterface(oracle);\\n  }\\n\\n  /**\\n   * @notice Gets the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function getChainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle that serviced the request.\\n   * Emits RequestFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    if (msg.sender != s_pendingRequests[requestId]) {\\n      revert SenderIsNotRegistry();\\n    }\\n    delete s_pendingRequests[requestId];\\n    emit RequestFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    if (s_pendingRequests[requestId] != address(0)) {\\n      revert RequestIsAlreadyPending();\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xc6f00bd3327dcc9a79674bbe6e0dda295a58ef480c7afc9eab309087d26f7f6e\",\"license\":\"MIT\"},\"contracts/lib/dev/interfaces/FunctionsBillingRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions billing subscription registry interface.\\n */\\ninterface FunctionsBillingRegistryInterface {\\n  struct RequestBilling {\\n    // a unique subscription ID allocated by billing system,\\n    uint64 subscriptionId;\\n    // the client contract that initiated the request to the DON\\n    // to use the subscription it must be added as a consumer on the subscription\\n    address client;\\n    // customer specified gas limit for the fulfillment callback\\n    uint32 gasLimit;\\n    // the expected gas price used to execute the transaction\\n    uint256 gasPrice;\\n  }\\n\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return uint32 global max for request gas limit\\n   * @return address[] list of registered DONs\\n   */\\n  function getRequestConfig() external view returns (uint32, address[] memory);\\n\\n  /**\\n   * @notice Determine the charged fee that will be paid to the Registry owner\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling memory billing)\\n    external\\n    view\\n    returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param gasLimit Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasPrice The request's billing configuration\\n   * @param donFee Fee charged by the DON that is paid to Oracle Node\\n   * @param registryFee Fee charged by the DON that is paid to Oracle Node\\n   * @return costEstimate Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint32 gasLimit,\\n    uint256 gasPrice,\\n    uint96 donFee,\\n    uint96 registryFee\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Initiate the billing process for an Functions request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing Billing configuration for the request\\n   * @return requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest.\\n   * @dev Only callable by a node that has been approved on the Registry\\n   */\\n  function startBilling(bytes calldata data, RequestBilling calldata billing) external returns (bytes32);\\n\\n  /**\\n   * @notice Finalize billing process for an Functions request by sending a callback to the Client contract and then charging the subscription\\n   * @param requestId identifier for the request that was generated by the Registry in the beginBilling commitment\\n   * @param response response data from DON consensus\\n   * @param err error from DON consensus\\n   * @param transmitter the Oracle who sent the report\\n   * @param signers the Oracles who had a part in generating the report\\n   * @param signerCount the number of signers on the report\\n   * @param reportValidationGas the amount of gas used for the report validation. Cost is split by all fulfillments on the report.\\n   * @param initialGas the initial amount of gas that should be used as a baseline to charge the single fulfillment for execution cost\\n   * @return success whether the callback was successsful\\n   * @dev Only callable by a node that has been approved on the Registry\\n   * @dev simulated offchain to determine if sufficient balance is present to fulfill the request\\n   */\\n  function fulfillAndBill(\\n    bytes32 requestId,\\n    bytes calldata response,\\n    bytes calldata err,\\n    address transmitter,\\n    address[31] memory signers, // 31 comes from OCR2Abstract.sol's maxNumOracles constant\\n    uint8 signerCount,\\n    uint256 reportValidationGas,\\n    uint256 initialGas\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Gets subscription owner.\\n   * @param subscriptionId - ID of the subscription\\n   * @return owner - owner of the subscription.\\n   */\\n  function getSubscriptionOwner(uint64 subscriptionId) external view returns (address owner);\\n}\\n\",\"keccak256\":\"0xac8c00e6634411559840e1962826ece125dd631879e7458897e573ec85cf7490\",\"license\":\"MIT\"},\"contracts/lib/dev/interfaces/FunctionsClientInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions client interface.\\n */\\ninterface FunctionsClientInterface {\\n  /**\\n   * @notice Returns the DON's secp256k1 public key used to encrypt secrets\\n   * @dev All Oracles nodes have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Chainlink Functions response handler called by the designated transmitter node in an OCR round.\\n   * @param requestId The requestId returned by FunctionsClient.sendRequest().\\n   * @param response Aggregated response from the user code.\\n   * @param err Aggregated error either from the user code or from the execution pipeline.\\n   * Either response or error parameter will be set, but never both.\\n   */\\n  function handleOracleFulfillment(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd5c899b894dc62548149681ee46f2027a6dac18eea67663069e496ea48e4f1fb\",\"license\":\"MIT\"},\"contracts/lib/dev/interfaces/FunctionsOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./FunctionsBillingRegistryInterface.sol\\\";\\n\\n/**\\n * @title Chainlink Functions oracle interface.\\n */\\ninterface FunctionsOracleInterface {\\n  /**\\n   * @notice Gets the stored billing registry address\\n   * @return registryAddress The address of Chainlink Functions billing registry contract\\n   */\\n  function getRegistry() external view returns (address);\\n\\n  /**\\n   * @notice Sets the stored billing registry address\\n   * @param registryAddress The new address of Chainlink Functions billing registry contract\\n   */\\n  function setRegistry(address registryAddress) external;\\n\\n  /**\\n   * @notice Returns the DON's secp256k1 public key that is used to encrypt secrets\\n   * @dev All nodes on the DON have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey the DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Sets DON's secp256k1 public key used to encrypt secrets\\n   * @dev Used to rotate the key\\n   * @param donPublicKey The new public key\\n   */\\n  function setDONPublicKey(bytes calldata donPublicKey) external;\\n\\n  /**\\n   * @notice Sets a per-node secp256k1 public key used to encrypt secrets for that node\\n   * @dev Callable only by contract owner and DON members\\n   * @param node node's address\\n   * @param publicKey node's public key\\n   */\\n  function setNodePublicKey(address node, bytes calldata publicKey) external;\\n\\n  /**\\n   * @notice Deletes node's public key\\n   * @dev Callable only by contract owner or the node itself\\n   * @param node node's address\\n   */\\n  function deleteNodePublicKey(address node) external;\\n\\n  /**\\n   * @notice Return two arrays of equal size containing DON members' addresses and their corresponding\\n   * public keys (or empty byte arrays if per-node key is not defined)\\n   */\\n  function getAllNodePublicKeys() external view returns (address[] memory, bytes[] memory);\\n\\n  /**\\n   * @notice Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling calldata billing)\\n    external\\n    view\\n    returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return billedCost Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Sends a request (encoded as data) using the provided subscriptionId\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return requestId A unique request identifier (unique per DON)\\n   */\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe53e646881ffadf7ad331cb42ba4e6c91232c1b8c4544ebc292a139deb8a0cff\",\"license\":\"MIT\"},\"contracts/utils/AddressToString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @notice Convert address to string\\n * @param _addr The address to convert\\n */\\n\\nfunction addressToString(address _addr) pure returns (string memory) {\\n    bytes32 value = bytes32(uint256(uint160(_addr)));\\n    bytes memory alphabet = \\\"0123456789abcdef\\\";\\n    bytes memory str = new bytes(42);\\n    str[0] = \\\"0\\\";\\n    str[1] = \\\"x\\\";\\n\\n    for (uint256 i = 0; i < 20; i++) {\\n        str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n        str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n    }\\n\\n    return string(str);\\n}\\n\",\"keccak256\":\"0xc9d3afd9dfd7380bcb4e559c3cdde59b495bc4ffdc7c849ec3edd0df82e5ecba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c6338038062001c63833981016040819052620000349162000199565b600080546001600160a01b0319166001600160a01b038316178155339081906001600160a01b038216620000af5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600280546001600160a01b0319166001600160a01b0384811691909117909155811615620000e257620000e281620000ec565b50505050620001cb565b6001600160a01b038116331415620001475760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401620000a6565b600380546001600160a01b0319166001600160a01b03838116918217909255600254604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b600060208284031215620001ac57600080fd5b81516001600160a01b0381168114620001c457600080fd5b9392505050565b611a8880620001db6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063bef3a2f011610081578063f2fde38b1161005b578063f2fde38b14610182578063f7023bb614610195578063fffeb84e146101a857600080fd5b8063bef3a2f014610135578063d328a91e1461014a578063d4b391751461015257600080fd5b806327714589116100b257806327714589146100ff57806379ba5097146101125780638da5cb5b1461011a57600080fd5b80630ca76175146100ce5780631aa46f59146100e3575b600080fd5b6100e16100dc3660046113d9565b6101b0565b005b6100ec60045481565b6040519081526020015b60405180910390f35b6100ec61010d3660046114b4565b610256565b6100e161035f565b6002546040516001600160a01b0390911681526020016100f6565b61013d610419565b6040516100f6919061170b565b61013d6104a7565b61016561016036600461159f565b610545565b6040516bffffffffffffffffffffffff90911681526020016100f6565b6100e1610190366004611386565b6105db565b6100e16101a3366004611386565b6105ef565b61013d610615565b60008381526001602052604090205483906001600160a01b03163314610202576040517fa0c5ec6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526001602052604080822080546001600160a01b03191690555182917f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e691a2610250848484610622565b50505050565b6000610260610689565b61029a6040805160c08101909152806000815260200160008152602001600081526020016060815260200160608152602001606081525090565b6102e16000808c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879594939250506106e59050565b86156103295761032988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085939250506107799050565b61033d610336868861193a565b82906107c0565b600061034b8286863a610800565b60048190559b9a5050505050505050505050565b6003546001600160a01b031633146103be5760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b600280546001600160a01b0319808216339081179093556003805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6005805461042690611973565b80601f016020809104026020016040519081016040528092919081815260200182805461045290611973565b801561049f5780601f106104745761010080835404028352916020019161049f565b820191906000526020600020905b81548152906001019060200180831161048257829003601f168201915b505050505081565b60008054604080517fd328a91e00000000000000000000000000000000000000000000000000000000815290516060936001600160a01b039093169263d328a91e9260048082019391829003018186803b15801561050457600080fd5b505afa158015610518573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105409190810190611446565b905090565b600080546001600160a01b031663d227d2458561056188610975565b86866040518563ffffffff1660e01b81526004016105829493929190611743565b60206040518083038186803b15801561059a57600080fd5b505afa1580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d291906116b1565b95945050505050565b6105e3610689565b6105ec81610c0b565b50565b6105f7610689565b600080546001600160a01b0319166001600160a01b03831617905550565b6006805461042690611973565b8151610635906005906020850190611153565b508051610649906006906020840190611153565b50827f7bab0ec163b5c132c72b8146ac4d6e067e82ed58f8b131150aa71c9258911562838360405161067c92919061171e565b60405180910390a2505050565b6002546001600160a01b031633146106e35760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016103b5565b565b805161071d576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83836001811115610730576107306119fb565b90816001811115610743576107436119fb565b90525060408401828015610759576107596119fb565b90818015610769576107696119fb565b9052506060909301929092525050565b80516107b1576040517fe889636f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020830152608090910152565b80516107f8576040517ffe936cb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a090910152565b6000805481906001600160a01b031663a98eb2068661081e89610975565b87876040518563ffffffff1660e01b815260040161083f9493929190611743565b602060405180830381600087803b15801561085957600080fd5b505af115801561086d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089191906113c0565b905060008054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b815260040160206040518083038186803b1580156108df57600080fd5b505afa1580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091791906113a3565b60008281526001602052604080822080546001600160a01b0319166001600160a01b039490941693909317909255905182917f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db891a295945050505050565b6060610994604051806040016040528060608152602001600081525090565b6109a081610100610cb6565b5060408051808201909152600c81527f636f64654c6f636174696f6e000000000000000000000000000000000000000060208201526109e0908290610d21565b82516109fe9060018111156109f7576109f76119fb565b8290610d3d565b60408051808201909152600881527f6c616e67756167650000000000000000000000000000000000000000000000006020820152610a3d908290610d21565b6040830151610a549080156109f7576109f76119fb565b60408051808201909152600681527f736f7572636500000000000000000000000000000000000000000000000000006020820152610a93908290610d21565b6060830151610aa3908290610d21565b60a08301515115610b525760408051808201909152600481527f61726773000000000000000000000000000000000000000000000000000000006020820152610aed908290610d21565b610af681610d67565b60005b8360a0015151811015610b4857610b368460a001518281518110610b1f57610b1f611a11565b602002602001015183610d2190919063ffffffff16565b80610b40816119a8565b915050610af9565b50610b5281610d72565b60808301515115610c045760408051808201909152600f81527f736563726574734c6f636174696f6e00000000000000000000000000000000006020820152610b9c908290610d21565b610bb5836020015160018111156109f7576109f76119fb565b60408051808201909152600781527f73656372657473000000000000000000000000000000000000000000000000006020820152610bf4908290610d21565b6080830151610c04908290610d7d565b5192915050565b6001600160a01b038116331415610c645760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016103b5565b600380546001600160a01b0319166001600160a01b03838116918217909255600254604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b604080518082019091526060815260006020820152610cd66020836119c3565b15610cfe57610ce66020836119c3565b610cf1906020611923565b610cfb9083611801565b91505b506020808301829052604080518085526000815283019091019052815b92915050565b610d2e8260038351610d86565b610d388282610e95565b505050565b67ffffffffffffffff811115610d5b57610d578282610ec3565b5050565b610d5782600083610d86565b6105ec816004610efa565b6105ec816007610efa565b610d2e82600283515b60178167ffffffffffffffff1611610dab576102508360e0600585901b168317610f0b565b60ff8167ffffffffffffffff1611610de957610dd2836018611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166001610f30565b61ffff8167ffffffffffffffff1611610e2857610e11836019611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166002610f30565b63ffffffff8167ffffffffffffffff1611610e6957610e5283601a611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166004610f30565b610e7e83601b611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166008610f30565b604080518082019091526060815260006020820152610ebc83846000015151848551610f5e565b9392505050565b610ece8260c2610f0b565b50610d578282604051602001610ee691815260200190565b604051602081830303815290604052610d7d565b610d3882601f611fe0600585901b16175b604080518082019091526060815260006020820152610ebc8384600001515184611048565b604080518082019091526060815260006020820152610f568485600001515185856110a4565b949350505050565b6040805180820190915260608152600060208201528251821115610f8157600080fd5b6020850151610f908386611801565b1115610fc357610fc385610fb387602001518786610fae9190611801565b611125565b610fbe906002611904565b61113c565b600080865180518760208301019350808887011115610fe25787860182525b505050602084015b602084106110225780518252611001602083611801565b915061100e602082611801565b905061101b602085611923565b9350610fea565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6040805180820190915260608152600060208201528360200151831061107d5761107d8485602001516002610fbe9190611904565b83518051602085830101848153508085141561109a576001810182525b5093949350505050565b60408051808201909152606081526000602082015260208501516110c88584611801565b11156110dc576110dc85610fb38685611801565b600060016110ec8461010061185c565b6110f69190611923565b905085518386820101858319825116178152508051848701111561111a5783860181525b509495945050505050565b600081831115611136575081610d1b565b50919050565b81516111488383610cb6565b506102508382610e95565b82805461115f90611973565b90600052602060002090601f01602090048101928261118157600085556111c7565b82601f1061119a57805160ff19168380011785556111c7565b828001600101855582156111c7579182015b828111156111c75782518255916020019190600101906111ac565b506111d39291506111d7565b5090565b5b808211156111d357600081556001016111d8565b600067ffffffffffffffff8084111561120757611207611a27565b8360051b60206112188183016117a8565b86815293508084018583810189101561123057600080fd5b60009350835b8881101561126b5781358681111561124c578586fd5b6112588b828b016112e1565b8452509183019190830190600101611236565b5050505050509392505050565b600082601f83011261128957600080fd5b610ebc838335602085016111ec565b60008083601f8401126112aa57600080fd5b50813567ffffffffffffffff8111156112c257600080fd5b6020830191508360208285010111156112da57600080fd5b9250929050565b600082601f8301126112f257600080fd5b8135611305611300826117d9565b6117a8565b81815284602083860101111561131a57600080fd5b816020850160208301376000918101602001919091529392505050565b80356001811061134657600080fd5b919050565b80356002811061134657600080fd5b803563ffffffff8116811461134657600080fd5b803567ffffffffffffffff8116811461134657600080fd5b60006020828403121561139857600080fd5b8135610ebc81611a3d565b6000602082840312156113b557600080fd5b8151610ebc81611a3d565b6000602082840312156113d257600080fd5b5051919050565b6000806000606084860312156113ee57600080fd5b83359250602084013567ffffffffffffffff8082111561140d57600080fd5b611419878388016112e1565b9350604086013591508082111561142f57600080fd5b5061143c868287016112e1565b9150509250925092565b60006020828403121561145857600080fd5b815167ffffffffffffffff81111561146f57600080fd5b8201601f8101841361148057600080fd5b805161148e611300826117d9565b8181528560208385010111156114a357600080fd5b6105d2826020830160208601611947565b60008060008060008060008060a0898b0312156114d057600080fd5b883567ffffffffffffffff808211156114e857600080fd5b6114f48c838d01611298565b909a50985060208b013591508082111561150d57600080fd5b6115198c838d01611298565b909850965060408b013591508082111561153257600080fd5b818b0191508b601f83011261154657600080fd5b81358181111561155557600080fd5b8c60208260051b850101111561156a57600080fd5b60208301965080955050505061158260608a0161136e565b915061159060808a0161135a565b90509295985092959890939650565b600080600080608085870312156115b557600080fd5b843567ffffffffffffffff808211156115cd57600080fd5b9086019060c082890312156115e157600080fd5b6115e961177f565b6115f28361134b565b81526116006020840161134b565b602082015261161160408401611337565b604082015260608301358281111561162857600080fd5b6116348a8286016112e1565b60608301525060808301358281111561164c57600080fd5b6116588a8286016112e1565b60808301525060a08301358281111561167057600080fd5b61167c8a828601611278565b60a08301525095506116939150506020860161136e565b92506116a16040860161135a565b9396929550929360600135925050565b6000602082840312156116c357600080fd5b81516bffffffffffffffffffffffff81168114610ebc57600080fd5b600081518084526116f7816020860160208601611947565b601f01601f19169290920160200192915050565b602081526000610ebc60208301846116df565b60408152600061173160408301856116df565b82810360208401526105d281856116df565b67ffffffffffffffff8516815260806020820152600061176660808301866116df565b63ffffffff949094166040830152506060015292915050565b60405160c0810167ffffffffffffffff811182821017156117a2576117a2611a27565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156117d1576117d1611a27565b604052919050565b600067ffffffffffffffff8211156117f3576117f3611a27565b50601f01601f191660200190565b60008219821115611814576118146119e5565b500190565b600181815b8085111561185457816000190482111561183a5761183a6119e5565b8085161561184757918102915b93841c939080029061181e565b509250929050565b6000610ebc838360008261187257506001610d1b565b8161187f57506000610d1b565b8160018114611895576002811461189f576118bb565b6001915050610d1b565b60ff8411156118b0576118b06119e5565b50506001821b610d1b565b5060208310610133831016604e8410600b84101617156118de575081810a610d1b565b6118e88383611819565b80600019048211156118fc576118fc6119e5565b029392505050565b600081600019048311821515161561191e5761191e6119e5565b500290565b600082821015611935576119356119e5565b500390565b6000610ebc3684846111ec565b60005b8381101561196257818101518382015260200161194a565b838111156102505750506000910152565b600181811c9082168061198757607f821691505b6020821081141561113657634e487b7160e01b600052602260045260246000fd5b60006000198214156119bc576119bc6119e5565b5060010190565b6000826119e057634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146105ec57600080fdfea26469706673582212206520d46725cdfd7844c91ea04455710d6bed3f8bef2a1255ec7219de11937b0664736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c8063bef3a2f011610081578063f2fde38b1161005b578063f2fde38b14610182578063f7023bb614610195578063fffeb84e146101a857600080fd5b8063bef3a2f014610135578063d328a91e1461014a578063d4b391751461015257600080fd5b806327714589116100b257806327714589146100ff57806379ba5097146101125780638da5cb5b1461011a57600080fd5b80630ca76175146100ce5780631aa46f59146100e3575b600080fd5b6100e16100dc3660046113d9565b6101b0565b005b6100ec60045481565b6040519081526020015b60405180910390f35b6100ec61010d3660046114b4565b610256565b6100e161035f565b6002546040516001600160a01b0390911681526020016100f6565b61013d610419565b6040516100f6919061170b565b61013d6104a7565b61016561016036600461159f565b610545565b6040516bffffffffffffffffffffffff90911681526020016100f6565b6100e1610190366004611386565b6105db565b6100e16101a3366004611386565b6105ef565b61013d610615565b60008381526001602052604090205483906001600160a01b03163314610202576040517fa0c5ec6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526001602052604080822080546001600160a01b03191690555182917f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e691a2610250848484610622565b50505050565b6000610260610689565b61029a6040805160c08101909152806000815260200160008152602001600081526020016060815260200160608152602001606081525090565b6102e16000808c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879594939250506106e59050565b86156103295761032988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085939250506107799050565b61033d610336868861193a565b82906107c0565b600061034b8286863a610800565b60048190559b9a5050505050505050505050565b6003546001600160a01b031633146103be5760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b600280546001600160a01b0319808216339081179093556003805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6005805461042690611973565b80601f016020809104026020016040519081016040528092919081815260200182805461045290611973565b801561049f5780601f106104745761010080835404028352916020019161049f565b820191906000526020600020905b81548152906001019060200180831161048257829003601f168201915b505050505081565b60008054604080517fd328a91e00000000000000000000000000000000000000000000000000000000815290516060936001600160a01b039093169263d328a91e9260048082019391829003018186803b15801561050457600080fd5b505afa158015610518573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105409190810190611446565b905090565b600080546001600160a01b031663d227d2458561056188610975565b86866040518563ffffffff1660e01b81526004016105829493929190611743565b60206040518083038186803b15801561059a57600080fd5b505afa1580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d291906116b1565b95945050505050565b6105e3610689565b6105ec81610c0b565b50565b6105f7610689565b600080546001600160a01b0319166001600160a01b03831617905550565b6006805461042690611973565b8151610635906005906020850190611153565b508051610649906006906020840190611153565b50827f7bab0ec163b5c132c72b8146ac4d6e067e82ed58f8b131150aa71c9258911562838360405161067c92919061171e565b60405180910390a2505050565b6002546001600160a01b031633146106e35760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016103b5565b565b805161071d576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83836001811115610730576107306119fb565b90816001811115610743576107436119fb565b90525060408401828015610759576107596119fb565b90818015610769576107696119fb565b9052506060909301929092525050565b80516107b1576040517fe889636f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020830152608090910152565b80516107f8576040517ffe936cb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a090910152565b6000805481906001600160a01b031663a98eb2068661081e89610975565b87876040518563ffffffff1660e01b815260040161083f9493929190611743565b602060405180830381600087803b15801561085957600080fd5b505af115801561086d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089191906113c0565b905060008054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b815260040160206040518083038186803b1580156108df57600080fd5b505afa1580156108f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091791906113a3565b60008281526001602052604080822080546001600160a01b0319166001600160a01b039490941693909317909255905182917f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db891a295945050505050565b6060610994604051806040016040528060608152602001600081525090565b6109a081610100610cb6565b5060408051808201909152600c81527f636f64654c6f636174696f6e000000000000000000000000000000000000000060208201526109e0908290610d21565b82516109fe9060018111156109f7576109f76119fb565b8290610d3d565b60408051808201909152600881527f6c616e67756167650000000000000000000000000000000000000000000000006020820152610a3d908290610d21565b6040830151610a549080156109f7576109f76119fb565b60408051808201909152600681527f736f7572636500000000000000000000000000000000000000000000000000006020820152610a93908290610d21565b6060830151610aa3908290610d21565b60a08301515115610b525760408051808201909152600481527f61726773000000000000000000000000000000000000000000000000000000006020820152610aed908290610d21565b610af681610d67565b60005b8360a0015151811015610b4857610b368460a001518281518110610b1f57610b1f611a11565b602002602001015183610d2190919063ffffffff16565b80610b40816119a8565b915050610af9565b50610b5281610d72565b60808301515115610c045760408051808201909152600f81527f736563726574734c6f636174696f6e00000000000000000000000000000000006020820152610b9c908290610d21565b610bb5836020015160018111156109f7576109f76119fb565b60408051808201909152600781527f73656372657473000000000000000000000000000000000000000000000000006020820152610bf4908290610d21565b6080830151610c04908290610d7d565b5192915050565b6001600160a01b038116331415610c645760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016103b5565b600380546001600160a01b0319166001600160a01b03838116918217909255600254604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b604080518082019091526060815260006020820152610cd66020836119c3565b15610cfe57610ce66020836119c3565b610cf1906020611923565b610cfb9083611801565b91505b506020808301829052604080518085526000815283019091019052815b92915050565b610d2e8260038351610d86565b610d388282610e95565b505050565b67ffffffffffffffff811115610d5b57610d578282610ec3565b5050565b610d5782600083610d86565b6105ec816004610efa565b6105ec816007610efa565b610d2e82600283515b60178167ffffffffffffffff1611610dab576102508360e0600585901b168317610f0b565b60ff8167ffffffffffffffff1611610de957610dd2836018611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166001610f30565b61ffff8167ffffffffffffffff1611610e2857610e11836019611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166002610f30565b63ffffffff8167ffffffffffffffff1611610e6957610e5283601a611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166004610f30565b610e7e83601b611fe0600586901b1617610f0b565b506102508367ffffffffffffffff83166008610f30565b604080518082019091526060815260006020820152610ebc83846000015151848551610f5e565b9392505050565b610ece8260c2610f0b565b50610d578282604051602001610ee691815260200190565b604051602081830303815290604052610d7d565b610d3882601f611fe0600585901b16175b604080518082019091526060815260006020820152610ebc8384600001515184611048565b604080518082019091526060815260006020820152610f568485600001515185856110a4565b949350505050565b6040805180820190915260608152600060208201528251821115610f8157600080fd5b6020850151610f908386611801565b1115610fc357610fc385610fb387602001518786610fae9190611801565b611125565b610fbe906002611904565b61113c565b600080865180518760208301019350808887011115610fe25787860182525b505050602084015b602084106110225780518252611001602083611801565b915061100e602082611801565b905061101b602085611923565b9350610fea565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6040805180820190915260608152600060208201528360200151831061107d5761107d8485602001516002610fbe9190611904565b83518051602085830101848153508085141561109a576001810182525b5093949350505050565b60408051808201909152606081526000602082015260208501516110c88584611801565b11156110dc576110dc85610fb38685611801565b600060016110ec8461010061185c565b6110f69190611923565b905085518386820101858319825116178152508051848701111561111a5783860181525b509495945050505050565b600081831115611136575081610d1b565b50919050565b81516111488383610cb6565b506102508382610e95565b82805461115f90611973565b90600052602060002090601f01602090048101928261118157600085556111c7565b82601f1061119a57805160ff19168380011785556111c7565b828001600101855582156111c7579182015b828111156111c75782518255916020019190600101906111ac565b506111d39291506111d7565b5090565b5b808211156111d357600081556001016111d8565b600067ffffffffffffffff8084111561120757611207611a27565b8360051b60206112188183016117a8565b86815293508084018583810189101561123057600080fd5b60009350835b8881101561126b5781358681111561124c578586fd5b6112588b828b016112e1565b8452509183019190830190600101611236565b5050505050509392505050565b600082601f83011261128957600080fd5b610ebc838335602085016111ec565b60008083601f8401126112aa57600080fd5b50813567ffffffffffffffff8111156112c257600080fd5b6020830191508360208285010111156112da57600080fd5b9250929050565b600082601f8301126112f257600080fd5b8135611305611300826117d9565b6117a8565b81815284602083860101111561131a57600080fd5b816020850160208301376000918101602001919091529392505050565b80356001811061134657600080fd5b919050565b80356002811061134657600080fd5b803563ffffffff8116811461134657600080fd5b803567ffffffffffffffff8116811461134657600080fd5b60006020828403121561139857600080fd5b8135610ebc81611a3d565b6000602082840312156113b557600080fd5b8151610ebc81611a3d565b6000602082840312156113d257600080fd5b5051919050565b6000806000606084860312156113ee57600080fd5b83359250602084013567ffffffffffffffff8082111561140d57600080fd5b611419878388016112e1565b9350604086013591508082111561142f57600080fd5b5061143c868287016112e1565b9150509250925092565b60006020828403121561145857600080fd5b815167ffffffffffffffff81111561146f57600080fd5b8201601f8101841361148057600080fd5b805161148e611300826117d9565b8181528560208385010111156114a357600080fd5b6105d2826020830160208601611947565b60008060008060008060008060a0898b0312156114d057600080fd5b883567ffffffffffffffff808211156114e857600080fd5b6114f48c838d01611298565b909a50985060208b013591508082111561150d57600080fd5b6115198c838d01611298565b909850965060408b013591508082111561153257600080fd5b818b0191508b601f83011261154657600080fd5b81358181111561155557600080fd5b8c60208260051b850101111561156a57600080fd5b60208301965080955050505061158260608a0161136e565b915061159060808a0161135a565b90509295985092959890939650565b600080600080608085870312156115b557600080fd5b843567ffffffffffffffff808211156115cd57600080fd5b9086019060c082890312156115e157600080fd5b6115e961177f565b6115f28361134b565b81526116006020840161134b565b602082015261161160408401611337565b604082015260608301358281111561162857600080fd5b6116348a8286016112e1565b60608301525060808301358281111561164c57600080fd5b6116588a8286016112e1565b60808301525060a08301358281111561167057600080fd5b61167c8a828601611278565b60a08301525095506116939150506020860161136e565b92506116a16040860161135a565b9396929550929360600135925050565b6000602082840312156116c357600080fd5b81516bffffffffffffffffffffffff81168114610ebc57600080fd5b600081518084526116f7816020860160208601611947565b601f01601f19169290920160200192915050565b602081526000610ebc60208301846116df565b60408152600061173160408301856116df565b82810360208401526105d281856116df565b67ffffffffffffffff8516815260806020820152600061176660808301866116df565b63ffffffff949094166040830152506060015292915050565b60405160c0810167ffffffffffffffff811182821017156117a2576117a2611a27565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156117d1576117d1611a27565b604052919050565b600067ffffffffffffffff8211156117f3576117f3611a27565b50601f01601f191660200190565b60008219821115611814576118146119e5565b500190565b600181815b8085111561185457816000190482111561183a5761183a6119e5565b8085161561184757918102915b93841c939080029061181e565b509250929050565b6000610ebc838360008261187257506001610d1b565b8161187f57506000610d1b565b8160018114611895576002811461189f576118bb565b6001915050610d1b565b60ff8411156118b0576118b06119e5565b50506001821b610d1b565b5060208310610133831016604e8410600b84101617156118de575081810a610d1b565b6118e88383611819565b80600019048211156118fc576118fc6119e5565b029392505050565b600081600019048311821515161561191e5761191e6119e5565b500290565b600082821015611935576119356119e5565b500390565b6000610ebc3684846111ec565b60005b8381101561196257818101518382015260200161194a565b838111156102505750506000910152565b600181811c9082168061198757607f821691505b6020821081141561113657634e487b7160e01b600052602260045260246000fd5b60006000198214156119bc576119bc6119e5565b5060010190565b6000826119e057634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146105ec57600080fdfea26469706673582212206520d46725cdfd7844c91ea04455710d6bed3f8bef2a1255ec7219de11937b0664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "oracle": "- The FunctionsOracle contract"
        }
      },
      "estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)": {
        "params": {
          "gasLimit": "gas limit for the fulfillment callback",
          "req": "The initialized Functions.Request",
          "subscriptionId": "The subscription ID"
        },
        "returns": {
          "_0": "billedCost Cost in Juels (1e18) of LINK"
        }
      },
      "executeRequest(string,bytes,string[],uint64,uint32)": {
        "params": {
          "args": "List of arguments accessible from within the source code",
          "secrets": "Encrypted secrets payload",
          "source": "JavaScript source code",
          "subscriptionId": "Billing ID"
        }
      },
      "getDONPublicKey()": {
        "details": "All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key",
        "returns": {
          "_0": "publicKey DON's public key"
        }
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "params": {
          "err": "Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the user code."
        }
      }
    },
    "title": "Functions Copns contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "constructor": {
        "notice": "Executes once when a contract is created to initialize state variables"
      },
      "estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)": {
        "notice": "Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee"
      },
      "executeRequest(string,bytes,string[],uint64,uint32)": {
        "notice": "Send a simple request"
      },
      "getDONPublicKey()": {
        "notice": "Returns the DON's secp256k1 public key used to encrypt secrets"
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the designated transmitter node in an OCR round."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "notice": "This contract is a demonstration of using Functions.NOT FOR PRODUCTION USE",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1647,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "s_oracle",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(FunctionsOracleInterface)2081"
      },
      {
        "astId": 1651,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 27,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "s_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 29,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1182,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "latestRequestId",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 1184,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "latestResponse",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1186,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "latestError",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(FunctionsOracleInterface)2081": {
        "encoding": "inplace",
        "label": "contract FunctionsOracleInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}