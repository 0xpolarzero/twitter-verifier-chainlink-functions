{
  "address": "0xbE40a3f619C855A1C059f3b684398703cd51609d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestIsAlreadyPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestIsNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotRegistry",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "OCRResponse",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Functions.Location",
              "name": "codeLocation",
              "type": "uint8"
            },
            {
              "internalType": "enum Functions.Location",
              "name": "secretsLocation",
              "type": "uint8"
            },
            {
              "internalType": "enum Functions.CodeLanguage",
              "name": "language",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "source",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "secrets",
              "type": "bytes"
            },
            {
              "internalType": "string[]",
              "name": "args",
              "type": "string[]"
            }
          ],
          "internalType": "struct Functions.Request",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        }
      ],
      "name": "estimateCost",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "secrets",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "args",
          "type": "string[]"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        }
      ],
      "name": "executeRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDONPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestError",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestResponse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "updateOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x62b8afc4d6eeddf6cc6b8e786037284278071e880347f4312a45b04cfd366b04",
  "receipt": {
    "to": null,
    "from": "0xc06d127E504a944f63Bc750D8F512556c576F3EF",
    "contractAddress": "0xbE40a3f619C855A1C059f3b684398703cd51609d",
    "transactionIndex": 0,
    "gasUsed": "2744664",
    "logsBloom": "0x
    "blockHash": "0x18c314cbfb0a2f8688ce4aba3dd18b858bee7015fba3788ad336d5bfa9811f66",
    "transactionHash": "0x62b8afc4d6eeddf6cc6b8e786037284278071e880347f4312a45b04cfd366b04",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 31318695,
        "transactionHash": "0x62b8afc4d6eeddf6cc6b8e786037284278071e880347f4312a45b04cfd366b04",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c06d127e504a944f63bc750d8f512556c576f3ef",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000af84a1eed7ca8000000000000000000000000000000000000000000000000015768cc4bff222f10000000000000000000000000000000000000000000009f4075510da548065f600000000000000000000000000000000000000000000000014c70822d11a58710000000000000000000000000000000000000000000009f40804957c43583076",
        "logIndex": 0,
        "blockHash": "0x18c314cbfb0a2f8688ce4aba3dd18b858bee7015fba3788ad336d5bfa9811f66"
      }
    ],
    "blockNumber": 31318695,
    "cumulativeGasUsed": "2744664",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6199175d137B791B7AB06C3452aa6acc3519b254"
  ],
  "numDeployments": 1,
  "solcInputHash": "642716b88ff861074836ad2153747f45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestIsAlreadyPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestIsNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotRegistry\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"OCRResponse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Functions.Location\",\"name\":\"codeLocation\",\"type\":\"uint8\"},{\"internalType\":\"enum Functions.Location\",\"name\":\"secretsLocation\",\"type\":\"uint8\"},{\"internalType\":\"enum Functions.CodeLanguage\",\"name\":\"language\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"secrets\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"internalType\":\"struct Functions.Request\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"estimateCost\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"secrets\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"name\":\"executeRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDONPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"updateOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"oracle\":\"- The FunctionsOracle contract\"}},\"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)\":{\"params\":{\"gasLimit\":\"gas limit for the fulfillment callback\",\"req\":\"The initialized Functions.Request\",\"subscriptionId\":\"The subscription ID\"},\"returns\":{\"_0\":\"billedCost Cost in Juels (1e18) of LINK\"}},\"executeRequest(string,bytes,string[],uint64,uint32)\":{\"params\":{\"args\":\"List of arguments accessible from within the source code\",\"secrets\":\"Encrypted secrets payload\",\"source\":\"JavaScript source code\",\"subscriptionId\":\"Billing ID\"}},\"getDONPublicKey()\":{\"details\":\"All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key\",\"returns\":{\"_0\":\"publicKey DON's public key\"}},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"params\":{\"err\":\"Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the user code.\"}}},\"title\":\"Functions Copns contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"constructor\":{\"notice\":\"Executes once when a contract is created to initialize state variables\"},\"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)\":{\"notice\":\"Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\"},\"executeRequest(string,bytes,string[],uint64,uint32)\":{\"notice\":\"Send a simple request\"},\"getDONPublicKey()\":{\"notice\":\"Returns the DON's secp256k1 public key used to encrypt secrets\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the designated transmitter node in an OCR round.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"This contract is a demonstration of using Functions.NOT FOR PRODUCTION USE\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TwitterVerifier.sol\":\"TwitterVerifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"contracts/TwitterVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../lib/contracts/dev/functions/FunctionsClient.sol\\\";\\n// import \\\"@chainlink/contracts/src/v0.8/dev/functions/FunctionsClient.sol\\\"; // Once published\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\nimport \\\"./utils/AddressToString.sol\\\";\\n\\n/**\\n * @title Functions Copns contract\\n * @notice This contract is a demonstration of using Functions.\\n * @notice NOT FOR PRODUCTION USE\\n */\\ncontract TwitterVerifier is FunctionsClient, ConfirmedOwner {\\n    using Functions for Functions.Request;\\n\\n    bytes32 public latestRequestId;\\n    bytes public latestResponse;\\n    bytes public latestError;\\n\\n    event OCRResponse(bytes32 indexed requestId, bytes result, bytes err);\\n\\n    /**\\n     * @notice Executes once when a contract is created to initialize state variables\\n     *\\n     * @param oracle - The FunctionsOracle contract\\n     */\\n    constructor(\\n        address oracle\\n    ) FunctionsClient(oracle) ConfirmedOwner(msg.sender) {}\\n\\n    /**\\n     * @notice Send a simple request\\n     * @param source JavaScript source code\\n     * @param secrets Encrypted secrets payload\\n     * @param args List of arguments accessible from within the source code\\n     * @param subscriptionId Billing ID\\n     */\\n    function executeRequest(\\n        string calldata source,\\n        bytes calldata secrets,\\n        string[] calldata args,\\n        uint64 subscriptionId,\\n        uint32 gasLimit\\n    ) public onlyOwner returns (bytes32) {\\n        Functions.Request memory req;\\n        req.initializeRequest(\\n            Functions.Location.Inline,\\n            Functions.CodeLanguage.JavaScript,\\n            source\\n        );\\n        if (secrets.length > 0) req.addInlineSecrets(secrets);\\n\\n        // Turn the sender address into a string\\n        string memory sender = addressToString(msg.sender);\\n\\n        // And add it to the args\\n        string[] memory newArgs = new string[](args.length + 1);\\n        for (uint256 i = 0; i < args.length; i++) {\\n            newArgs[i] = args[i];\\n        }\\n        newArgs[args.length] = sender;\\n\\n        req.addArgs(newArgs);\\n\\n        bytes32 assignedReqID = sendRequest(\\n            req,\\n            subscriptionId,\\n            gasLimit,\\n            tx.gasprice\\n        );\\n        latestRequestId = assignedReqID;\\n        return assignedReqID;\\n    }\\n\\n    /**\\n     * @notice Callback that is invoked once the DON has resolved the request or hit an error\\n     *\\n     * @param requestId The request ID, returned by sendRequest()\\n     * @param response Aggregated response from the user code\\n     * @param err Aggregated error from the user code or from the execution pipeline\\n     * Either response or error parameter will be set, but never both\\n     */\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        bytes memory response,\\n        bytes memory err\\n    ) internal override {\\n        // revert('test');\\n        latestResponse = response;\\n        latestError = err;\\n        emit OCRResponse(requestId, response, err);\\n    }\\n\\n    function updateOracleAddress(address oracle) public onlyOwner {\\n        setOracle(oracle);\\n    }\\n}\\n\",\"keccak256\":\"0xb5ce749bee46569bb8a163ef5538a2d39c7f6d66171aede53dcfc5da16bcd055\",\"license\":\"MIT\"},\"contracts/utils/AddressToString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @notice Convert address to string\\n * @param _addr The address to convert\\n */\\n\\nfunction addressToString(address _addr) pure returns (string memory) {\\n    bytes32 value = bytes32(uint256(uint160(_addr)));\\n    bytes memory alphabet = \\\"0123456789abcdef\\\";\\n    bytes memory str = new bytes(42);\\n    str[0] = \\\"0\\\";\\n    str[1] = \\\"x\\\";\\n\\n    for (uint256 i = 0; i < 20; i++) {\\n        str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n        str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n    }\\n\\n    return string(str);\\n}\\n\",\"keccak256\":\"0xd28eb9e4f4ea6feab18b90435caf586f2c2ff4834071e2f421bb3cf19b03ad3e\",\"license\":\"MIT\"},\"lib/contracts/dev/functions/Functions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport {CBORChainlink} from \\\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for Chainlink Functions\\n */\\nlibrary Functions {\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  enum Location {\\n    Inline,\\n    Remote\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation;\\n    Location secretsLocation;\\n    CodeLanguage language;\\n    string source; // Source code for Location.Inline or url for Location.Remote\\n    bytes secrets; // Encrypted secrets blob for Location.Inline or url for Location.Remote\\n    string[] args;\\n  }\\n\\n  error EmptySource();\\n  error EmptyUrl();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n\\n  /**\\n   * @notice Encodes a Request to CBOR encoded bytes\\n   * @param self The request to encode\\n   * @return CBOR encoded bytes\\n   */\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    BufferChainlink.buffer memory buf;\\n    BufferChainlink.init(buf, DEFAULT_BUFFER_SIZE);\\n\\n    buf.encodeString(\\\"codeLocation\\\");\\n    buf.encodeUInt(uint256(self.codeLocation));\\n\\n    buf.encodeString(\\\"language\\\");\\n    buf.encodeUInt(uint256(self.language));\\n\\n    buf.encodeString(\\\"source\\\");\\n    buf.encodeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buf.encodeString(\\\"args\\\");\\n      buf.startArray();\\n      for (uint256 i = 0; i < self.args.length; i++) {\\n        buf.encodeString(self.args[i]);\\n      }\\n      buf.endSequence();\\n    }\\n\\n    if (self.secrets.length > 0) {\\n      buf.encodeString(\\\"secretsLocation\\\");\\n      buf.encodeUInt(uint256(self.secretsLocation));\\n      buf.encodeString(\\\"secrets\\\");\\n      buf.encodeBytes(self.secrets);\\n    }\\n\\n    return buf.buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Sets the codeLocation and code on the request\\n   * @param self The uninitialized request\\n   * @param location The user provided source code location\\n   * @param language The programming language of the user code\\n   * @param source The user provided source code or a url\\n   */\\n  function initializeRequest(\\n    Request memory self,\\n    Location location,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = location;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Simplified version of initializeRequest for PoC\\n   * @param self The uninitialized request\\n   * @param javaScriptSource The user provided JS code (must not be empty)\\n   */\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /**\\n   * @notice Adds user encrypted secrets to a Request\\n   * @param self The initialized request\\n   * @param secrets The user encrypted secrets (must not be empty)\\n   */\\n  function addInlineSecrets(Request memory self, bytes memory secrets) internal pure {\\n    if (secrets.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Inline;\\n    self.secrets = secrets;\\n  }\\n\\n  /**\\n   * @notice Adds args for the user run function\\n   * @param self The initialized request\\n   * @param args The array of args (must not be empty)\\n   */\\n  function addArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n}\\n\",\"keccak256\":\"0x2d0a77965c1e058bca11725a9a47328678aacffdcc8cf9bb02b03f059d98540c\",\"license\":\"MIT\"},\"lib/contracts/dev/functions/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./Functions.sol\\\";\\nimport \\\"../interfaces/FunctionsClientInterface.sol\\\";\\nimport \\\"../interfaces/FunctionsOracleInterface.sol\\\";\\n\\n/**\\n * @title The Chainlink Functions client contract\\n * @notice Contract writers can inherit this contract in order to create Chainlink Functions requests\\n */\\nabstract contract FunctionsClient is FunctionsClientInterface {\\n  FunctionsOracleInterface private s_oracle;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error SenderIsNotRegistry();\\n  error RequestIsAlreadyPending();\\n  error RequestIsNotPending();\\n\\n  constructor(address oracle) {\\n    setOracle(oracle);\\n  }\\n\\n  /**\\n   * @inheritdoc FunctionsClientInterface\\n   */\\n  function getDONPublicKey() external view override returns (bytes memory) {\\n    return s_oracle.getDONPublicKey();\\n  }\\n\\n  /**\\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param req The initialized Functions.Request\\n   * @param subscriptionId The subscription ID\\n   * @param gasLimit gas limit for the fulfillment callback\\n   * @return billedCost Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    Functions.Request memory req,\\n    uint64 subscriptionId,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) public view returns (uint96) {\\n    return s_oracle.estimateCost(subscriptionId, Functions.encodeCBOR(req), gasLimit, gasPrice);\\n  }\\n\\n  /**\\n   * @notice Sends a Chainlink Functions request to the stored oracle address\\n   * @param req The initialized Functions.Request\\n   * @param subscriptionId The subscription ID\\n   * @param gasLimit gas limit for the fulfillment callback\\n   * @return requestId The generated request ID\\n   */\\n  function sendRequest(\\n    Functions.Request memory req,\\n    uint64 subscriptionId,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = s_oracle.sendRequest(subscriptionId, Functions.encodeCBOR(req), gasLimit, gasPrice);\\n    s_pendingRequests[requestId] = s_oracle.getRegistry();\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /**\\n   * @notice User defined function to handle a response\\n   * @param requestId The request ID, returned by sendRequest()\\n   * @param response Aggregated response from the user code\\n   * @param err Aggregated error from the user code or from the execution pipeline\\n   * Either response or error parameter will be set, but never both\\n   */\\n  function fulfillRequest(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) internal virtual;\\n\\n  /**\\n   * @inheritdoc FunctionsClientInterface\\n   */\\n  function handleOracleFulfillment(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) external override recordChainlinkFulfillment(requestId) {\\n    fulfillRequest(requestId, response, err);\\n  }\\n\\n  /**\\n   * @notice Sets the stored Oracle address\\n   * @param oracle The address of Functions Oracle contract\\n   */\\n  function setOracle(address oracle) internal {\\n    s_oracle = FunctionsOracleInterface(oracle);\\n  }\\n\\n  /**\\n   * @notice Gets the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function getChainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle that serviced the request.\\n   * Emits RequestFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    if (msg.sender != s_pendingRequests[requestId]) {\\n      revert SenderIsNotRegistry();\\n    }\\n    delete s_pendingRequests[requestId];\\n    emit RequestFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    if (s_pendingRequests[requestId] != address(0)) {\\n      revert RequestIsAlreadyPending();\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xc6f00bd3327dcc9a79674bbe6e0dda295a58ef480c7afc9eab309087d26f7f6e\",\"license\":\"MIT\"},\"lib/contracts/dev/interfaces/FunctionsBillingRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions billing subscription registry interface.\\n */\\ninterface FunctionsBillingRegistryInterface {\\n  struct RequestBilling {\\n    // a unique subscription ID allocated by billing system,\\n    uint64 subscriptionId;\\n    // the client contract that initiated the request to the DON\\n    // to use the subscription it must be added as a consumer on the subscription\\n    address client;\\n    // customer specified gas limit for the fulfillment callback\\n    uint32 gasLimit;\\n    // the expected gas price used to execute the transaction\\n    uint256 gasPrice;\\n  }\\n\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return uint32 global max for request gas limit\\n   * @return address[] list of registered DONs\\n   */\\n  function getRequestConfig() external view returns (uint32, address[] memory);\\n\\n  /**\\n   * @notice Determine the charged fee that will be paid to the Registry owner\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling memory billing)\\n    external\\n    view\\n    returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param gasLimit Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasPrice The request's billing configuration\\n   * @param donFee Fee charged by the DON that is paid to Oracle Node\\n   * @param registryFee Fee charged by the DON that is paid to Oracle Node\\n   * @return costEstimate Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint32 gasLimit,\\n    uint256 gasPrice,\\n    uint96 donFee,\\n    uint96 registryFee\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Initiate the billing process for an Functions request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing Billing configuration for the request\\n   * @return requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest.\\n   * @dev Only callable by a node that has been approved on the Registry\\n   */\\n  function startBilling(bytes calldata data, RequestBilling calldata billing) external returns (bytes32);\\n\\n  /**\\n   * @notice Finalize billing process for an Functions request by sending a callback to the Client contract and then charging the subscription\\n   * @param requestId identifier for the request that was generated by the Registry in the beginBilling commitment\\n   * @param response response data from DON consensus\\n   * @param err error from DON consensus\\n   * @param transmitter the Oracle who sent the report\\n   * @param signers the Oracles who had a part in generating the report\\n   * @param signerCount the number of signers on the report\\n   * @param reportValidationGas the amount of gas used for the report validation. Cost is split by all fulfillments on the report.\\n   * @param initialGas the initial amount of gas that should be used as a baseline to charge the single fulfillment for execution cost\\n   * @return success whether the callback was successsful\\n   * @dev Only callable by a node that has been approved on the Registry\\n   * @dev simulated offchain to determine if sufficient balance is present to fulfill the request\\n   */\\n  function fulfillAndBill(\\n    bytes32 requestId,\\n    bytes calldata response,\\n    bytes calldata err,\\n    address transmitter,\\n    address[31] memory signers, // 31 comes from OCR2Abstract.sol's maxNumOracles constant\\n    uint8 signerCount,\\n    uint256 reportValidationGas,\\n    uint256 initialGas\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Gets subscription owner.\\n   * @param subscriptionId - ID of the subscription\\n   * @return owner - owner of the subscription.\\n   */\\n  function getSubscriptionOwner(uint64 subscriptionId) external view returns (address owner);\\n}\\n\",\"keccak256\":\"0xac8c00e6634411559840e1962826ece125dd631879e7458897e573ec85cf7490\",\"license\":\"MIT\"},\"lib/contracts/dev/interfaces/FunctionsClientInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions client interface.\\n */\\ninterface FunctionsClientInterface {\\n  /**\\n   * @notice Returns the DON's secp256k1 public key used to encrypt secrets\\n   * @dev All Oracles nodes have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Chainlink Functions response handler called by the designated transmitter node in an OCR round.\\n   * @param requestId The requestId returned by FunctionsClient.sendRequest().\\n   * @param response Aggregated response from the user code.\\n   * @param err Aggregated error either from the user code or from the execution pipeline.\\n   * Either response or error parameter will be set, but never both.\\n   */\\n  function handleOracleFulfillment(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd5c899b894dc62548149681ee46f2027a6dac18eea67663069e496ea48e4f1fb\",\"license\":\"MIT\"},\"lib/contracts/dev/interfaces/FunctionsOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./FunctionsBillingRegistryInterface.sol\\\";\\n\\n/**\\n * @title Chainlink Functions oracle interface.\\n */\\ninterface FunctionsOracleInterface {\\n  /**\\n   * @notice Gets the stored billing registry address\\n   * @return registryAddress The address of Chainlink Functions billing registry contract\\n   */\\n  function getRegistry() external view returns (address);\\n\\n  /**\\n   * @notice Sets the stored billing registry address\\n   * @param registryAddress The new address of Chainlink Functions billing registry contract\\n   */\\n  function setRegistry(address registryAddress) external;\\n\\n  /**\\n   * @notice Returns the DON's secp256k1 public key that is used to encrypt secrets\\n   * @dev All nodes on the DON have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey the DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Sets DON's secp256k1 public key used to encrypt secrets\\n   * @dev Used to rotate the key\\n   * @param donPublicKey The new public key\\n   */\\n  function setDONPublicKey(bytes calldata donPublicKey) external;\\n\\n  /**\\n   * @notice Sets a per-node secp256k1 public key used to encrypt secrets for that node\\n   * @dev Callable only by contract owner and DON members\\n   * @param node node's address\\n   * @param publicKey node's public key\\n   */\\n  function setNodePublicKey(address node, bytes calldata publicKey) external;\\n\\n  /**\\n   * @notice Deletes node's public key\\n   * @dev Callable only by contract owner or the node itself\\n   * @param node node's address\\n   */\\n  function deleteNodePublicKey(address node) external;\\n\\n  /**\\n   * @notice Return two arrays of equal size containing DON members' addresses and their corresponding\\n   * public keys (or empty byte arrays if per-node key is not defined)\\n   */\\n  function getAllNodePublicKeys() external view returns (address[] memory, bytes[] memory);\\n\\n  /**\\n   * @notice Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(bytes calldata data, FunctionsBillingRegistryInterface.RequestBilling calldata billing)\\n    external\\n    view\\n    returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return billedCost Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Sends a request (encoded as data) using the provided subscriptionId\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return requestId A unique request identifier (unique per DON)\\n   */\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe53e646881ffadf7ad331cb42ba4e6c91232c1b8c4544ebc292a139deb8a0cff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200341e3803806200341e833981810160405281019062000037919062000330565b33806000836200004d816200015260201b60201c565b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000c0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b790620003c3565b60405180910390fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620001485762000147816200019560201b60201c565b5b5050505062000457565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000206576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001fd9062000435565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002f882620002cb565b9050919050565b6200030a81620002eb565b81146200031657600080fd5b50565b6000815190506200032a81620002ff565b92915050565b600060208284031215620003495762000348620002c6565b5b6000620003598482850162000319565b91505092915050565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b6000620003ab60188362000362565b9150620003b88262000373565b602082019050919050565b60006020820190508181036000830152620003de816200039c565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006200041d60178362000362565b91506200042a82620003e5565b602082019050919050565b6000602082019050818103600083015262000450816200040e565b9050919050565b612fb780620004676000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063bef3a2f011610071578063bef3a2f014610140578063d328a91e1461015e578063d4b391751461017c578063f2fde38b146101ac578063f7023bb6146101c8578063fffeb84e146101e4576100a9565b80630ca76175146100ae5780631aa46f59146100ca57806327714589146100e857806379ba5097146101185780638da5cb5b14610122575b600080fd5b6100c860048036038101906100c39190611cd2565b610202565b005b6100d261030f565b6040516100df9190611d6c565b60405180910390f35b61010260048036038101906100fd9190611f0f565b610315565b60405161010f9190611d6c565b60405180910390f35b61012061055c565b005b61012a6106f3565b604051610137919061202c565b60405180910390f35b61014861071d565b60405161015591906120c6565b60405180910390f35b6101666107ab565b60405161017391906120c6565b60405180910390f35b610196600480360381019061019191906123e8565b610846565b6040516101a39190612492565b60405180910390f35b6101c660048036038101906101c191906124d9565b6108fb565b005b6101e260048036038101906101dd91906124d9565b61090f565b005b6101ec610923565b6040516101f991906120c6565b60405180910390f35b826001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461029b576040517fa0c5ec6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e660405160405180910390a26103098484846109b1565b50505050565b60045481565b600061031f610a10565b610327611abd565b6103836000808c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505084610aa2909392919063ffffffff16565b60008888905011156103e7576103e688888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082610b4c90919063ffffffff16565b5b60006103f233610bc5565b905060006001888890506104069190612535565b67ffffffffffffffff81111561041f5761041e611ba7565b5b60405190808252806020026020018201604052801561045257816020015b606081526020019060019003908161043d5790505b50905060005b888890508110156104fc5788888281811061047657610475612569565b5b905060200281019061048891906125a7565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508282815181106104de576104dd612569565b5b602002602001018190525080806104f49061260a565b915050610458565b508181898990508151811061051457610513612569565b5b60200260200101819052506105328184610ed090919063ffffffff16565b60006105408488883a610f18565b9050806004819055508094505050505098975050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e3906126af565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6005805461072a906126fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610756906126fe565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b505050505081565b606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d328a91e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610818573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610841919061279f565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d227d2458561088f886110e0565b86866040518563ffffffff1660e01b81526004016108b09493929190612815565b602060405180830381865afa1580156108cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f1919061288d565b9050949350505050565b610903610a10565b61090c816113e2565b50565b610917610a10565b61092081611510565b50565b60068054610930906126fe565b80601f016020809104026020016040519081016040528092919081815260200182805461095c906126fe565b80156109a95780601f1061097e576101008083540402835291602001916109a9565b820191906000526020600020905b81548152906001019060200180831161098c57829003601f168201915b505050505081565b81600590816109c09190612a66565b5080600690816109d09190612a66565b50827f7bab0ec163b5c132c72b8146ac4d6e067e82ed58f8b131150aa71c92589115628383604051610a03929190612b38565b60405180910390a2505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9790612bbb565b60405180910390fd5b565b6000815103610add576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8284600001906001811115610af557610af4612bdb565b5b90816001811115610b0957610b08612bdb565b5b815250508184604001906000811115610b2557610b24612bdb565b5b90816000811115610b3957610b38612bdb565b5b8152505080846060018190525050505050565b6000815103610b87576040517fe889636f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082602001906001811115610ba057610b9f612bdb565b5b90816001811115610bb457610bb3612bdb565b5b815250508082608001819052505050565b606060008273ffffffffffffffffffffffffffffffffffffffff1660001b905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000602a67ffffffffffffffff811115610c3c57610c3b611ba7565b5b6040519080825280601f01601f191660200182016040528015610c6e5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610ca657610ca5612569565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610d0a57610d09612569565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b6014811015610ec45782600485600c84610d569190612535565b60208110610d6757610d66612569565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110610da657610da5612569565b5b602001015160f81c60f81b82600283610dbf9190612c0a565b6002610dcb9190612535565b81518110610ddc57610ddb612569565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85600c84610e1f9190612535565b60208110610e3057610e2f612569565b5b1a60f81b1660f81c60ff1681518110610e4c57610e4b612569565b5b602001015160f81c60f81b82600283610e659190612c0a565b6003610e719190612535565b81518110610e8257610e81612569565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610ebc9061260a565b915050610d3c565b50809350505050919050565b6000815103610f0b576040517ffe936cb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808260a001819052505050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a98eb20686610f61896110e0565b87876040518563ffffffff1660e01b8152600401610f829493929190612815565b6020604051808303816000875af1158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc59190612c79565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015611032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110569190612cbb565b6001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db860405160405180910390a280915050949350505050565b60606110ea611b28565b6110f681610100611553565b5061113f6040518060400160405280600c81526020017f636f64654c6f636174696f6e0000000000000000000000000000000000000000815250826115bd90919063ffffffff16565b6111688360000151600181111561115957611158612bdb565b5b826115e290919063ffffffff16565b6111b06040518060400160405280600881526020017f6c616e6775616765000000000000000000000000000000000000000000000000815250826115bd90919063ffffffff16565b6111d9836040015160008111156111ca576111c9612bdb565b5b826115e290919063ffffffff16565b6112216040518060400160405280600681526020017f736f757263650000000000000000000000000000000000000000000000000000815250826115bd90919063ffffffff16565b6112388360600151826115bd90919063ffffffff16565b60008360a001515111156112f65761128e6040518060400160405280600481526020017f6172677300000000000000000000000000000000000000000000000000000000815250826115bd90919063ffffffff16565b61129781611612565b60005b8360a00151518110156112eb576112d88460a0015182815181106112c1576112c0612569565b5b6020026020010151836115bd90919063ffffffff16565b80806112e39061260a565b91505061129a565b506112f581611620565b5b600083608001515111156113d55761134c6040518060400160405280600f81526020017f736563726574734c6f636174696f6e0000000000000000000000000000000000815250826115bd90919063ffffffff16565b6113758360200151600181111561136657611365612bdb565b5b826115e290919063ffffffff16565b6113bd6040518060400160405280600781526020017f7365637265747300000000000000000000000000000000000000000000000000815250826115bd90919063ffffffff16565b6113d483608001518261162e90919063ffffffff16565b5b8060000151915050919050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611450576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144790612d34565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61155b611b28565b600060208361156a9190612d83565b146115965760208261157c9190612d83565b60206115889190612db4565b826115939190612535565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b6115ca8260038351611653565b6115dd81836117d890919063ffffffff16565b505050565b67ffffffffffffffff811115611601576115fc82826117fa565b61160e565b61160d82600083611653565b5b5050565b61161d816004611846565b50565b61162b816007611846565b50565b61163b8260028351611653565b61164e81836117d890919063ffffffff16565b505050565b60178167ffffffffffffffff161161168a576116848160058460ff16901b60ff16178461186890919063ffffffff16565b506117d3565b60ff8167ffffffffffffffff16116116e0576116b9601860058460ff16901b178461186890919063ffffffff16565b506116da8167ffffffffffffffff166001856118889092919063ffffffff16565b506117d2565b61ffff8167ffffffffffffffff161161173757611710601960058460ff16901b178461186890919063ffffffff16565b506117318167ffffffffffffffff166002856118889092919063ffffffff16565b506117d1565b63ffffffff8167ffffffffffffffff161161179057611769601a60058460ff16901b178461186890919063ffffffff16565b5061178a8167ffffffffffffffff166004856118889092919063ffffffff16565b506117d0565b6117ad601b60058460ff16901b178461186890919063ffffffff16565b506117ce8167ffffffffffffffff166008856118889092919063ffffffff16565b505b5b5b5b505050565b6117e0611b28565b6117f2838460000151518485516118aa565b905092915050565b61181860026005600660ff16901b178361186890919063ffffffff16565b50611842828260405160200161182e9190612de8565b60405160208183030381529060405261162e565b5050565b611863601f60058360ff16901b178361186890919063ffffffff16565b505050565b611870611b28565b6118808384600001515184611999565b905092915050565b611890611b28565b6118a18485600001515185856119ef565b90509392505050565b6118b2611b28565b82518211156118c057600080fd5b846020015182856118d19190612535565b1115611906576119058560026118f6886020015188876118f19190612535565b611a7d565b6119009190612c0a565b611a99565b5b6000808651805187602083010193508088870111156119255787860182525b60208701925050505b6020841061196c57805182526020826119479190612535565b91506020816119569190612535565b90506020846119659190612db4565b935061192e565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6119a1611b28565b836020015183106119c7576119c684600286602001516119c19190612c0a565b611a99565b5b835180516020858301018481538186036119e2576001820183525b5050508390509392505050565b6119f7611b28565b84602001518483611a089190612535565b1115611a3057611a2f8560028685611a209190612535565b611a2a9190612c0a565b611a99565b5b6000600183610100611a429190612f36565b611a4c9190612db4565b90508551838682010185831982511617815281518588011115611a6f5784870182525b505085915050949350505050565b600081831115611a8f57829050611a93565b8190505b92915050565b600082600001519050611aac8383611553565b50611ab783826117d8565b50505050565b6040518060c0016040528060006001811115611adc57611adb612bdb565b5b815260200160006001811115611af557611af4612bdb565b5b8152602001600080811115611b0d57611b0c612bdb565b5b81526020016060815260200160608152602001606081525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611b6981611b56565b8114611b7457600080fd5b50565b600081359050611b8681611b60565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bdf82611b96565b810181811067ffffffffffffffff82111715611bfe57611bfd611ba7565b5b80604052505050565b6000611c11611b42565b9050611c1d8282611bd6565b919050565b600067ffffffffffffffff821115611c3d57611c3c611ba7565b5b611c4682611b96565b9050602081019050919050565b82818337600083830152505050565b6000611c75611c7084611c22565b611c07565b905082815260208101848484011115611c9157611c90611b91565b5b611c9c848285611c53565b509392505050565b600082601f830112611cb957611cb8611b8c565b5b8135611cc9848260208601611c62565b91505092915050565b600080600060608486031215611ceb57611cea611b4c565b5b6000611cf986828701611b77565b935050602084013567ffffffffffffffff811115611d1a57611d19611b51565b5b611d2686828701611ca4565b925050604084013567ffffffffffffffff811115611d4757611d46611b51565b5b611d5386828701611ca4565b9150509250925092565b611d6681611b56565b82525050565b6000602082019050611d816000830184611d5d565b92915050565b600080fd5b600080fd5b60008083601f840112611da757611da6611b8c565b5b8235905067ffffffffffffffff811115611dc457611dc3611d87565b5b602083019150836001820283011115611de057611ddf611d8c565b5b9250929050565b60008083601f840112611dfd57611dfc611b8c565b5b8235905067ffffffffffffffff811115611e1a57611e19611d87565b5b602083019150836001820283011115611e3657611e35611d8c565b5b9250929050565b60008083601f840112611e5357611e52611b8c565b5b8235905067ffffffffffffffff811115611e7057611e6f611d87565b5b602083019150836020820283011115611e8c57611e8b611d8c565b5b9250929050565b600067ffffffffffffffff82169050919050565b611eb081611e93565b8114611ebb57600080fd5b50565b600081359050611ecd81611ea7565b92915050565b600063ffffffff82169050919050565b611eec81611ed3565b8114611ef757600080fd5b50565b600081359050611f0981611ee3565b92915050565b60008060008060008060008060a0898b031215611f2f57611f2e611b4c565b5b600089013567ffffffffffffffff811115611f4d57611f4c611b51565b5b611f598b828c01611d91565b9850985050602089013567ffffffffffffffff811115611f7c57611f7b611b51565b5b611f888b828c01611de7565b9650965050604089013567ffffffffffffffff811115611fab57611faa611b51565b5b611fb78b828c01611e3d565b94509450506060611fca8b828c01611ebe565b9250506080611fdb8b828c01611efa565b9150509295985092959890939650565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061201682611feb565b9050919050565b6120268161200b565b82525050565b6000602082019050612041600083018461201d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612081578082015181840152602081019050612066565b60008484015250505050565b600061209882612047565b6120a28185612052565b93506120b2818560208601612063565b6120bb81611b96565b840191505092915050565b600060208201905081810360008301526120e0818461208d565b905092915050565b600080fd5b600080fd5b600281106120ff57600080fd5b50565b600081359050612111816120f2565b92915050565b6001811061212457600080fd5b50565b60008135905061213681612117565b92915050565b600067ffffffffffffffff82111561215757612156611ba7565b5b61216082611b96565b9050602081019050919050565b600061218061217b8461213c565b611c07565b90508281526020810184848401111561219c5761219b611b91565b5b6121a7848285611c53565b509392505050565b600082601f8301126121c4576121c3611b8c565b5b81356121d484826020860161216d565b91505092915050565b600067ffffffffffffffff8211156121f8576121f7611ba7565b5b602082029050602081019050919050565b600061221c612217846121dd565b611c07565b9050808382526020820190506020840283018581111561223f5761223e611d8c565b5b835b8181101561228657803567ffffffffffffffff81111561226457612263611b8c565b5b80860161227189826121af565b85526020850194505050602081019050612241565b5050509392505050565b600082601f8301126122a5576122a4611b8c565b5b81356122b5848260208601612209565b91505092915050565b600060c082840312156122d4576122d36120e8565b5b6122de60c0611c07565b905060006122ee84828501612102565b600083015250602061230284828501612102565b602083015250604061231684828501612127565b604083015250606082013567ffffffffffffffff81111561233a576123396120ed565b5b612346848285016121af565b606083015250608082013567ffffffffffffffff81111561236a576123696120ed565b5b61237684828501611ca4565b60808301525060a082013567ffffffffffffffff81111561239a576123996120ed565b5b6123a684828501612290565b60a08301525092915050565b6000819050919050565b6123c5816123b2565b81146123d057600080fd5b50565b6000813590506123e2816123bc565b92915050565b6000806000806080858703121561240257612401611b4c565b5b600085013567ffffffffffffffff8111156124205761241f611b51565b5b61242c878288016122be565b945050602061243d87828801611ebe565b935050604061244e87828801611efa565b925050606061245f878288016123d3565b91505092959194509250565b60006bffffffffffffffffffffffff82169050919050565b61248c8161246b565b82525050565b60006020820190506124a76000830184612483565b92915050565b6124b68161200b565b81146124c157600080fd5b50565b6000813590506124d3816124ad565b92915050565b6000602082840312156124ef576124ee611b4c565b5b60006124fd848285016124c4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612540826123b2565b915061254b836123b2565b925082820190508082111561256357612562612506565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126125c4576125c3612598565b5b80840192508235915067ffffffffffffffff8211156125e6576125e561259d565b5b602083019250600182023603831315612602576126016125a2565b5b509250929050565b6000612615826123b2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361264757612646612506565b5b600182019050919050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000612699601683612652565b91506126a482612663565b602082019050919050565b600060208201905081810360008301526126c88161268c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061271657607f821691505b602082108103612729576127286126cf565b5b50919050565b600061274261273d84611c22565b611c07565b90508281526020810184848401111561275e5761275d611b91565b5b612769848285612063565b509392505050565b600082601f83011261278657612785611b8c565b5b815161279684826020860161272f565b91505092915050565b6000602082840312156127b5576127b4611b4c565b5b600082015167ffffffffffffffff8111156127d3576127d2611b51565b5b6127df84828501612771565b91505092915050565b6127f181611e93565b82525050565b61280081611ed3565b82525050565b61280f816123b2565b82525050565b600060808201905061282a60008301876127e8565b818103602083015261283c818661208d565b905061284b60408301856127f7565b6128586060830184612806565b95945050505050565b61286a8161246b565b811461287557600080fd5b50565b60008151905061288781612861565b92915050565b6000602082840312156128a3576128a2611b4c565b5b60006128b184828501612878565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261291c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826128df565b61292686836128df565b95508019841693508086168417925050509392505050565b6000819050919050565b600061296361295e612959846123b2565b61293e565b6123b2565b9050919050565b6000819050919050565b61297d83612948565b6129916129898261296a565b8484546128ec565b825550505050565b600090565b6129a6612999565b6129b1818484612974565b505050565b5b818110156129d5576129ca60008261299e565b6001810190506129b7565b5050565b601f821115612a1a576129eb816128ba565b6129f4846128cf565b81016020851015612a03578190505b612a17612a0f856128cf565b8301826129b6565b50505b505050565b600082821c905092915050565b6000612a3d60001984600802612a1f565b1980831691505092915050565b6000612a568383612a2c565b9150826002028217905092915050565b612a6f82612047565b67ffffffffffffffff811115612a8857612a87611ba7565b5b612a9282546126fe565b612a9d8282856129d9565b600060209050601f831160018114612ad05760008415612abe578287015190505b612ac88582612a4a565b865550612b30565b601f198416612ade866128ba565b60005b82811015612b0657848901518255600182019150602085019450602081019050612ae1565b86831015612b235784890151612b1f601f891682612a2c565b8355505b6001600288020188555050505b505050505050565b60006040820190508181036000830152612b52818561208d565b90508181036020830152612b66818461208d565b90509392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000612ba5601683612652565b9150612bb082612b6f565b602082019050919050565b60006020820190508181036000830152612bd481612b98565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000612c15826123b2565b9150612c20836123b2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c5957612c58612506565b5b828202905092915050565b600081519050612c7381611b60565b92915050565b600060208284031215612c8f57612c8e611b4c565b5b6000612c9d84828501612c64565b91505092915050565b600081519050612cb5816124ad565b92915050565b600060208284031215612cd157612cd0611b4c565b5b6000612cdf84828501612ca6565b91505092915050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000612d1e601783612652565b9150612d2982612ce8565b602082019050919050565b60006020820190508181036000830152612d4d81612d11565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d8e826123b2565b9150612d99836123b2565b925082612da957612da8612d54565b5b828206905092915050565b6000612dbf826123b2565b9150612dca836123b2565b9250828203905081811115612de257612de1612506565b5b92915050565b6000602082019050612dfd6000830184612806565b92915050565b60008160011c9050919050565b6000808291508390505b6001851115612e5a57808604811115612e3657612e35612506565b5b6001851615612e455780820291505b8081029050612e5385612e03565b9450612e1a565b94509492505050565b600082612e735760019050612f2f565b81612e815760009050612f2f565b8160018114612e975760028114612ea157612ed0565b6001915050612f2f565b60ff841115612eb357612eb2612506565b5b8360020a915084821115612eca57612ec9612506565b5b50612f2f565b5060208310610133831016604e8410600b8410161715612f055782820a905083811115612f0057612eff612506565b5b612f2f565b612f128484846001612e10565b92509050818404811115612f2957612f28612506565b5b81810290505b9392505050565b6000612f41826123b2565b9150612f4c836123b2565b9250612f797fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612e63565b90509291505056fea26469706673582212200a34e76562b4783628544a66c4bf10000efa84b449f286ff6dc4529762efdc1c64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063bef3a2f011610071578063bef3a2f014610140578063d328a91e1461015e578063d4b391751461017c578063f2fde38b146101ac578063f7023bb6146101c8578063fffeb84e146101e4576100a9565b80630ca76175146100ae5780631aa46f59146100ca57806327714589146100e857806379ba5097146101185780638da5cb5b14610122575b600080fd5b6100c860048036038101906100c39190611cd2565b610202565b005b6100d261030f565b6040516100df9190611d6c565b60405180910390f35b61010260048036038101906100fd9190611f0f565b610315565b60405161010f9190611d6c565b60405180910390f35b61012061055c565b005b61012a6106f3565b604051610137919061202c565b60405180910390f35b61014861071d565b60405161015591906120c6565b60405180910390f35b6101666107ab565b60405161017391906120c6565b60405180910390f35b610196600480360381019061019191906123e8565b610846565b6040516101a39190612492565b60405180910390f35b6101c660048036038101906101c191906124d9565b6108fb565b005b6101e260048036038101906101dd91906124d9565b61090f565b005b6101ec610923565b6040516101f991906120c6565b60405180910390f35b826001600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461029b576040517fa0c5ec6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e660405160405180910390a26103098484846109b1565b50505050565b60045481565b600061031f610a10565b610327611abd565b6103836000808c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505084610aa2909392919063ffffffff16565b60008888905011156103e7576103e688888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082610b4c90919063ffffffff16565b5b60006103f233610bc5565b905060006001888890506104069190612535565b67ffffffffffffffff81111561041f5761041e611ba7565b5b60405190808252806020026020018201604052801561045257816020015b606081526020019060019003908161043d5790505b50905060005b888890508110156104fc5788888281811061047657610475612569565b5b905060200281019061048891906125a7565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508282815181106104de576104dd612569565b5b602002602001018190525080806104f49061260a565b915050610458565b508181898990508151811061051457610513612569565b5b60200260200101819052506105328184610ed090919063ffffffff16565b60006105408488883a610f18565b9050806004819055508094505050505098975050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e3906126af565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6005805461072a906126fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610756906126fe565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b505050505081565b606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d328a91e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610818573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610841919061279f565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d227d2458561088f886110e0565b86866040518563ffffffff1660e01b81526004016108b09493929190612815565b602060405180830381865afa1580156108cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f1919061288d565b9050949350505050565b610903610a10565b61090c816113e2565b50565b610917610a10565b61092081611510565b50565b60068054610930906126fe565b80601f016020809104026020016040519081016040528092919081815260200182805461095c906126fe565b80156109a95780601f1061097e576101008083540402835291602001916109a9565b820191906000526020600020905b81548152906001019060200180831161098c57829003601f168201915b505050505081565b81600590816109c09190612a66565b5080600690816109d09190612a66565b50827f7bab0ec163b5c132c72b8146ac4d6e067e82ed58f8b131150aa71c92589115628383604051610a03929190612b38565b60405180910390a2505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9790612bbb565b60405180910390fd5b565b6000815103610add576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8284600001906001811115610af557610af4612bdb565b5b90816001811115610b0957610b08612bdb565b5b815250508184604001906000811115610b2557610b24612bdb565b5b90816000811115610b3957610b38612bdb565b5b8152505080846060018190525050505050565b6000815103610b87576040517fe889636f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082602001906001811115610ba057610b9f612bdb565b5b90816001811115610bb457610bb3612bdb565b5b815250508082608001819052505050565b606060008273ffffffffffffffffffffffffffffffffffffffff1660001b905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000602a67ffffffffffffffff811115610c3c57610c3b611ba7565b5b6040519080825280601f01601f191660200182016040528015610c6e5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610ca657610ca5612569565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610d0a57610d09612569565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b6014811015610ec45782600485600c84610d569190612535565b60208110610d6757610d66612569565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110610da657610da5612569565b5b602001015160f81c60f81b82600283610dbf9190612c0a565b6002610dcb9190612535565b81518110610ddc57610ddb612569565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85600c84610e1f9190612535565b60208110610e3057610e2f612569565b5b1a60f81b1660f81c60ff1681518110610e4c57610e4b612569565b5b602001015160f81c60f81b82600283610e659190612c0a565b6003610e719190612535565b81518110610e8257610e81612569565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610ebc9061260a565b915050610d3c565b50809350505050919050565b6000815103610f0b576040517ffe936cb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808260a001819052505050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a98eb20686610f61896110e0565b87876040518563ffffffff1660e01b8152600401610f829493929190612815565b6020604051808303816000875af1158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc59190612c79565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015611032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110569190612cbb565b6001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db860405160405180910390a280915050949350505050565b60606110ea611b28565b6110f681610100611553565b5061113f6040518060400160405280600c81526020017f636f64654c6f636174696f6e0000000000000000000000000000000000000000815250826115bd90919063ffffffff16565b6111688360000151600181111561115957611158612bdb565b5b826115e290919063ffffffff16565b6111b06040518060400160405280600881526020017f6c616e6775616765000000000000000000000000000000000000000000000000815250826115bd90919063ffffffff16565b6111d9836040015160008111156111ca576111c9612bdb565b5b826115e290919063ffffffff16565b6112216040518060400160405280600681526020017f736f757263650000000000000000000000000000000000000000000000000000815250826115bd90919063ffffffff16565b6112388360600151826115bd90919063ffffffff16565b60008360a001515111156112f65761128e6040518060400160405280600481526020017f6172677300000000000000000000000000000000000000000000000000000000815250826115bd90919063ffffffff16565b61129781611612565b60005b8360a00151518110156112eb576112d88460a0015182815181106112c1576112c0612569565b5b6020026020010151836115bd90919063ffffffff16565b80806112e39061260a565b91505061129a565b506112f581611620565b5b600083608001515111156113d55761134c6040518060400160405280600f81526020017f736563726574734c6f636174696f6e0000000000000000000000000000000000815250826115bd90919063ffffffff16565b6113758360200151600181111561136657611365612bdb565b5b826115e290919063ffffffff16565b6113bd6040518060400160405280600781526020017f7365637265747300000000000000000000000000000000000000000000000000815250826115bd90919063ffffffff16565b6113d483608001518261162e90919063ffffffff16565b5b8060000151915050919050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611450576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144790612d34565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61155b611b28565b600060208361156a9190612d83565b146115965760208261157c9190612d83565b60206115889190612db4565b826115939190612535565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b6115ca8260038351611653565b6115dd81836117d890919063ffffffff16565b505050565b67ffffffffffffffff811115611601576115fc82826117fa565b61160e565b61160d82600083611653565b5b5050565b61161d816004611846565b50565b61162b816007611846565b50565b61163b8260028351611653565b61164e81836117d890919063ffffffff16565b505050565b60178167ffffffffffffffff161161168a576116848160058460ff16901b60ff16178461186890919063ffffffff16565b506117d3565b60ff8167ffffffffffffffff16116116e0576116b9601860058460ff16901b178461186890919063ffffffff16565b506116da8167ffffffffffffffff166001856118889092919063ffffffff16565b506117d2565b61ffff8167ffffffffffffffff161161173757611710601960058460ff16901b178461186890919063ffffffff16565b506117318167ffffffffffffffff166002856118889092919063ffffffff16565b506117d1565b63ffffffff8167ffffffffffffffff161161179057611769601a60058460ff16901b178461186890919063ffffffff16565b5061178a8167ffffffffffffffff166004856118889092919063ffffffff16565b506117d0565b6117ad601b60058460ff16901b178461186890919063ffffffff16565b506117ce8167ffffffffffffffff166008856118889092919063ffffffff16565b505b5b5b5b505050565b6117e0611b28565b6117f2838460000151518485516118aa565b905092915050565b61181860026005600660ff16901b178361186890919063ffffffff16565b50611842828260405160200161182e9190612de8565b60405160208183030381529060405261162e565b5050565b611863601f60058360ff16901b178361186890919063ffffffff16565b505050565b611870611b28565b6118808384600001515184611999565b905092915050565b611890611b28565b6118a18485600001515185856119ef565b90509392505050565b6118b2611b28565b82518211156118c057600080fd5b846020015182856118d19190612535565b1115611906576119058560026118f6886020015188876118f19190612535565b611a7d565b6119009190612c0a565b611a99565b5b6000808651805187602083010193508088870111156119255787860182525b60208701925050505b6020841061196c57805182526020826119479190612535565b91506020816119569190612535565b90506020846119659190612db4565b935061192e565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b6119a1611b28565b836020015183106119c7576119c684600286602001516119c19190612c0a565b611a99565b5b835180516020858301018481538186036119e2576001820183525b5050508390509392505050565b6119f7611b28565b84602001518483611a089190612535565b1115611a3057611a2f8560028685611a209190612535565b611a2a9190612c0a565b611a99565b5b6000600183610100611a429190612f36565b611a4c9190612db4565b90508551838682010185831982511617815281518588011115611a6f5784870182525b505085915050949350505050565b600081831115611a8f57829050611a93565b8190505b92915050565b600082600001519050611aac8383611553565b50611ab783826117d8565b50505050565b6040518060c0016040528060006001811115611adc57611adb612bdb565b5b815260200160006001811115611af557611af4612bdb565b5b8152602001600080811115611b0d57611b0c612bdb565b5b81526020016060815260200160608152602001606081525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611b6981611b56565b8114611b7457600080fd5b50565b600081359050611b8681611b60565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bdf82611b96565b810181811067ffffffffffffffff82111715611bfe57611bfd611ba7565b5b80604052505050565b6000611c11611b42565b9050611c1d8282611bd6565b919050565b600067ffffffffffffffff821115611c3d57611c3c611ba7565b5b611c4682611b96565b9050602081019050919050565b82818337600083830152505050565b6000611c75611c7084611c22565b611c07565b905082815260208101848484011115611c9157611c90611b91565b5b611c9c848285611c53565b509392505050565b600082601f830112611cb957611cb8611b8c565b5b8135611cc9848260208601611c62565b91505092915050565b600080600060608486031215611ceb57611cea611b4c565b5b6000611cf986828701611b77565b935050602084013567ffffffffffffffff811115611d1a57611d19611b51565b5b611d2686828701611ca4565b925050604084013567ffffffffffffffff811115611d4757611d46611b51565b5b611d5386828701611ca4565b9150509250925092565b611d6681611b56565b82525050565b6000602082019050611d816000830184611d5d565b92915050565b600080fd5b600080fd5b60008083601f840112611da757611da6611b8c565b5b8235905067ffffffffffffffff811115611dc457611dc3611d87565b5b602083019150836001820283011115611de057611ddf611d8c565b5b9250929050565b60008083601f840112611dfd57611dfc611b8c565b5b8235905067ffffffffffffffff811115611e1a57611e19611d87565b5b602083019150836001820283011115611e3657611e35611d8c565b5b9250929050565b60008083601f840112611e5357611e52611b8c565b5b8235905067ffffffffffffffff811115611e7057611e6f611d87565b5b602083019150836020820283011115611e8c57611e8b611d8c565b5b9250929050565b600067ffffffffffffffff82169050919050565b611eb081611e93565b8114611ebb57600080fd5b50565b600081359050611ecd81611ea7565b92915050565b600063ffffffff82169050919050565b611eec81611ed3565b8114611ef757600080fd5b50565b600081359050611f0981611ee3565b92915050565b60008060008060008060008060a0898b031215611f2f57611f2e611b4c565b5b600089013567ffffffffffffffff811115611f4d57611f4c611b51565b5b611f598b828c01611d91565b9850985050602089013567ffffffffffffffff811115611f7c57611f7b611b51565b5b611f888b828c01611de7565b9650965050604089013567ffffffffffffffff811115611fab57611faa611b51565b5b611fb78b828c01611e3d565b94509450506060611fca8b828c01611ebe565b9250506080611fdb8b828c01611efa565b9150509295985092959890939650565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061201682611feb565b9050919050565b6120268161200b565b82525050565b6000602082019050612041600083018461201d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612081578082015181840152602081019050612066565b60008484015250505050565b600061209882612047565b6120a28185612052565b93506120b2818560208601612063565b6120bb81611b96565b840191505092915050565b600060208201905081810360008301526120e0818461208d565b905092915050565b600080fd5b600080fd5b600281106120ff57600080fd5b50565b600081359050612111816120f2565b92915050565b6001811061212457600080fd5b50565b60008135905061213681612117565b92915050565b600067ffffffffffffffff82111561215757612156611ba7565b5b61216082611b96565b9050602081019050919050565b600061218061217b8461213c565b611c07565b90508281526020810184848401111561219c5761219b611b91565b5b6121a7848285611c53565b509392505050565b600082601f8301126121c4576121c3611b8c565b5b81356121d484826020860161216d565b91505092915050565b600067ffffffffffffffff8211156121f8576121f7611ba7565b5b602082029050602081019050919050565b600061221c612217846121dd565b611c07565b9050808382526020820190506020840283018581111561223f5761223e611d8c565b5b835b8181101561228657803567ffffffffffffffff81111561226457612263611b8c565b5b80860161227189826121af565b85526020850194505050602081019050612241565b5050509392505050565b600082601f8301126122a5576122a4611b8c565b5b81356122b5848260208601612209565b91505092915050565b600060c082840312156122d4576122d36120e8565b5b6122de60c0611c07565b905060006122ee84828501612102565b600083015250602061230284828501612102565b602083015250604061231684828501612127565b604083015250606082013567ffffffffffffffff81111561233a576123396120ed565b5b612346848285016121af565b606083015250608082013567ffffffffffffffff81111561236a576123696120ed565b5b61237684828501611ca4565b60808301525060a082013567ffffffffffffffff81111561239a576123996120ed565b5b6123a684828501612290565b60a08301525092915050565b6000819050919050565b6123c5816123b2565b81146123d057600080fd5b50565b6000813590506123e2816123bc565b92915050565b6000806000806080858703121561240257612401611b4c565b5b600085013567ffffffffffffffff8111156124205761241f611b51565b5b61242c878288016122be565b945050602061243d87828801611ebe565b935050604061244e87828801611efa565b925050606061245f878288016123d3565b91505092959194509250565b60006bffffffffffffffffffffffff82169050919050565b61248c8161246b565b82525050565b60006020820190506124a76000830184612483565b92915050565b6124b68161200b565b81146124c157600080fd5b50565b6000813590506124d3816124ad565b92915050565b6000602082840312156124ef576124ee611b4c565b5b60006124fd848285016124c4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612540826123b2565b915061254b836123b2565b925082820190508082111561256357612562612506565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126125c4576125c3612598565b5b80840192508235915067ffffffffffffffff8211156125e6576125e561259d565b5b602083019250600182023603831315612602576126016125a2565b5b509250929050565b6000612615826123b2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361264757612646612506565b5b600182019050919050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000612699601683612652565b91506126a482612663565b602082019050919050565b600060208201905081810360008301526126c88161268c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061271657607f821691505b602082108103612729576127286126cf565b5b50919050565b600061274261273d84611c22565b611c07565b90508281526020810184848401111561275e5761275d611b91565b5b612769848285612063565b509392505050565b600082601f83011261278657612785611b8c565b5b815161279684826020860161272f565b91505092915050565b6000602082840312156127b5576127b4611b4c565b5b600082015167ffffffffffffffff8111156127d3576127d2611b51565b5b6127df84828501612771565b91505092915050565b6127f181611e93565b82525050565b61280081611ed3565b82525050565b61280f816123b2565b82525050565b600060808201905061282a60008301876127e8565b818103602083015261283c818661208d565b905061284b60408301856127f7565b6128586060830184612806565b95945050505050565b61286a8161246b565b811461287557600080fd5b50565b60008151905061288781612861565b92915050565b6000602082840312156128a3576128a2611b4c565b5b60006128b184828501612878565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261291c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826128df565b61292686836128df565b95508019841693508086168417925050509392505050565b6000819050919050565b600061296361295e612959846123b2565b61293e565b6123b2565b9050919050565b6000819050919050565b61297d83612948565b6129916129898261296a565b8484546128ec565b825550505050565b600090565b6129a6612999565b6129b1818484612974565b505050565b5b818110156129d5576129ca60008261299e565b6001810190506129b7565b5050565b601f821115612a1a576129eb816128ba565b6129f4846128cf565b81016020851015612a03578190505b612a17612a0f856128cf565b8301826129b6565b50505b505050565b600082821c905092915050565b6000612a3d60001984600802612a1f565b1980831691505092915050565b6000612a568383612a2c565b9150826002028217905092915050565b612a6f82612047565b67ffffffffffffffff811115612a8857612a87611ba7565b5b612a9282546126fe565b612a9d8282856129d9565b600060209050601f831160018114612ad05760008415612abe578287015190505b612ac88582612a4a565b865550612b30565b601f198416612ade866128ba565b60005b82811015612b0657848901518255600182019150602085019450602081019050612ae1565b86831015612b235784890151612b1f601f891682612a2c565b8355505b6001600288020188555050505b505050505050565b60006040820190508181036000830152612b52818561208d565b90508181036020830152612b66818461208d565b90509392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000612ba5601683612652565b9150612bb082612b6f565b602082019050919050565b60006020820190508181036000830152612bd481612b98565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000612c15826123b2565b9150612c20836123b2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c5957612c58612506565b5b828202905092915050565b600081519050612c7381611b60565b92915050565b600060208284031215612c8f57612c8e611b4c565b5b6000612c9d84828501612c64565b91505092915050565b600081519050612cb5816124ad565b92915050565b600060208284031215612cd157612cd0611b4c565b5b6000612cdf84828501612ca6565b91505092915050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000612d1e601783612652565b9150612d2982612ce8565b602082019050919050565b60006020820190508181036000830152612d4d81612d11565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d8e826123b2565b9150612d99836123b2565b925082612da957612da8612d54565b5b828206905092915050565b6000612dbf826123b2565b9150612dca836123b2565b9250828203905081811115612de257612de1612506565b5b92915050565b6000602082019050612dfd6000830184612806565b92915050565b60008160011c9050919050565b6000808291508390505b6001851115612e5a57808604811115612e3657612e35612506565b5b6001851615612e455780820291505b8081029050612e5385612e03565b9450612e1a565b94509492505050565b600082612e735760019050612f2f565b81612e815760009050612f2f565b8160018114612e975760028114612ea157612ed0565b6001915050612f2f565b60ff841115612eb357612eb2612506565b5b8360020a915084821115612eca57612ec9612506565b5b50612f2f565b5060208310610133831016604e8410600b8410161715612f055782820a905083811115612f0057612eff612506565b5b612f2f565b612f128484846001612e10565b92509050818404811115612f2957612f28612506565b5b81810290505b9392505050565b6000612f41826123b2565b9150612f4c836123b2565b9250612f797fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612e63565b90509291505056fea26469706673582212200a34e76562b4783628544a66c4bf10000efa84b449f286ff6dc4529762efdc1c64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "oracle": "- The FunctionsOracle contract"
        }
      },
      "estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)": {
        "params": {
          "gasLimit": "gas limit for the fulfillment callback",
          "req": "The initialized Functions.Request",
          "subscriptionId": "The subscription ID"
        },
        "returns": {
          "_0": "billedCost Cost in Juels (1e18) of LINK"
        }
      },
      "executeRequest(string,bytes,string[],uint64,uint32)": {
        "params": {
          "args": "List of arguments accessible from within the source code",
          "secrets": "Encrypted secrets payload",
          "source": "JavaScript source code",
          "subscriptionId": "Billing ID"
        }
      },
      "getDONPublicKey()": {
        "details": "All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key",
        "returns": {
          "_0": "publicKey DON's public key"
        }
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "params": {
          "err": "Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the user code."
        }
      }
    },
    "title": "Functions Copns contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "constructor": {
        "notice": "Executes once when a contract is created to initialize state variables"
      },
      "estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)": {
        "notice": "Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee"
      },
      "executeRequest(string,bytes,string[],uint64,uint32)": {
        "notice": "Send a simple request"
      },
      "getDONPublicKey()": {
        "notice": "Returns the DON's secp256k1 public key used to encrypt secrets"
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the designated transmitter node in an OCR round."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "notice": "This contract is a demonstration of using Functions.NOT FOR PRODUCTION USE",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1802,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "s_oracle",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(FunctionsOracleInterface)2236"
      },
      {
        "astId": 1806,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 27,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "s_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 29,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1182,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "latestRequestId",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 1184,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "latestResponse",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1186,
        "contract": "contracts/TwitterVerifier.sol:TwitterVerifier",
        "label": "latestError",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(FunctionsOracleInterface)2236": {
        "encoding": "inplace",
        "label": "contract FunctionsOracleInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}